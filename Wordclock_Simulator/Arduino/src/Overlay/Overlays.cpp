/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       Overlays.cpp
 *      \brief
 *
 *      \details
 *
 *
******************************************************************************************************************************************************/
#define _OVERLAYS_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "Overlays.h"


/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  getState()
******************************************************************************************************************************************************/
Overlays::StateType Overlays::getState() const {
    if(isDisabled()) { return OverlayType::STATE_DISABLED; }
    if(isIdle()) { return OverlayType::STATE_IDLE; }
    if(isShow()) { return OverlayType::STATE_SHOW; }
    return OverlayType::STATE_DISABLED;
} /* getState */

/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
void Overlays::task() {
    ClockDate date = RealTimeClock::getInstance().getDate();
    ClockTime time = RealTimeClock::getInstance().getTime();

    if(LastSecond != time.getSecond()) {
        LastSecond = time.getSecond();
        if(isShow()) { taskShow(date, time); }
        else { taskIdle(date, time); }
    }
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  taskIdle()
******************************************************************************************************************************************************/
void Overlays::taskIdle(ClockDate date, ClockTime time) {
#if (OVERLAYS_SUPPORT_DATE == STD_ON)
    if((Date.getIsActive()) && (ShowTimerInSeconds == 0u)) {
        ShowTimerInSeconds = Date.task(ShowTimerInSeconds, date, time);
    }
#endif
#if (OVERLAYS_SUPPORT_TEMPERATURE == STD_ON)
    if((Temperature.getIsActive()) && (ShowTimerInSeconds == 0u)) {
        ShowTimerInSeconds =  Temperature.task(ShowTimerInSeconds, date, time);
    }
#endif
#if (OVERLAYS_SUPPORT_TEXT == STD_ON)
    if((Text.getIsActive()) && (ShowTimerInSeconds == 0u)) {
        ShowTimerInSeconds =  Text.task(ShowTimerInSeconds, date, time);
    }
#endif
} /* taskIdle */

/******************************************************************************************************************************************************
  taskShow()
******************************************************************************************************************************************************/
void Overlays::taskShow(ClockDate date, ClockTime time) {
    if(Date.getState() == OverlayDate::STATE_SHOW) { ShowTimerInSeconds = Date.task(ShowTimerInSeconds, date, time); }
    if(Temperature.getState() == OverlayTemperature::STATE_SHOW) { ShowTimerInSeconds =  Temperature.task(ShowTimerInSeconds, date, time); }
    if(Text.getState() == OverlayText::STATE_SHOW) { ShowTimerInSeconds =  Text.task(ShowTimerInSeconds, date, time); }
} /* taskShow */


/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
