
WS2812.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800100  00800100  000005fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c0f  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097a  00000000  00000000  000023df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c34  00000000  00000000  00002d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00003990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083e  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fd5  00000000  00000000  000044d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000054ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__dtors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_16>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	01 02       	muls	r16, r17
  6a:	04 08       	sbc	r0, r4
  6c:	10 20       	and	r1, r0
  6e:	40 80       	ld	r4, Z
  70:	01 02       	muls	r16, r17
  72:	04 08       	sbc	r0, r4
  74:	10 20       	and	r1, r0
  76:	01 02       	muls	r16, r17
  78:	04 08       	sbc	r0, r4
  7a:	10 20       	and	r1, r0

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <port_to_output_PGM>:
  90:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009a <port_to_mode_PGM>:
  9a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000a4 <__ctors_start>:
  a4:	87 00       	.word	0x0087	; ????

000000a6 <__ctors_end>:
  a6:	8c 00       	.word	0x008c	; ????

000000a8 <__dtors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	af 31       	cpi	r26, 0x1F	; 31
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c3 e5       	ldi	r28, 0x53	; 83
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <__do_global_ctors+0x10>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	0e 94 b2 02 	call	0x564	; 0x564 <__tablejump2__>
  d4:	c2 35       	cpi	r28, 0x52	; 82
  d6:	d1 07       	cpc	r29, r17
  d8:	c9 f7       	brne	.-14     	; 0xcc <__do_global_ctors+0x8>
  da:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  de:	0c 94 b8 02 	jmp	0x570	; 0x570 <__do_global_dtors>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <setup>:
#include <WS2812.h>

WS2812 LED(12); // 1 LED

void setup()
{
  e6:	08 95       	ret

000000e8 <loop>:
	//Serial.begin(9600);
}

void loop()
{
  e8:	0f 93       	push	r16
	LED.setBrightness(11);
  ea:	6b e0       	ldi	r22, 0x0B	; 11
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN6WS281213setBrightnessEh>
	LED.setPixel(0, 50, 50, 50);
  f4:	02 e3       	ldi	r16, 0x32	; 50
  f6:	22 e3       	ldi	r18, 0x32	; 50
  f8:	42 e3       	ldi	r20, 0x32	; 50
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN6WS28128setPixelEhhhh>
	LED.show();
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1

	//delay(1000); // Wait 500 ms
 108:	0f 91       	pop	r16

void loop()
{
	LED.setBrightness(11);
	LED.setPixel(0, 50, 50, 50);
	LED.show();
 10a:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_ZN6WS28124showEv>

0000010e <_GLOBAL__sub_I_LED>:
ï»¿#include <Arduino.h>
#include <WS2812.h>

WS2812 LED(12); // 1 LED
 10e:	6c e0       	ldi	r22, 0x0C	; 12
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0c 94 c1 00 	jmp	0x182	; 0x182 <_ZN6WS2812C1Eh>

00000118 <_GLOBAL__sub_D_LED>:
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0c 94 90 00 	jmp	0x120	; 0x120 <_ZN6WS2812D1Ev>

00000120 <_ZN6WS2812D1Ev>:
		OffsetBlue = 2;
	}
	if(ColorOrder == WS2812_COLOR_ORDER_RGB) {
		OffsetRed = 0;
		OffsetGreen = 1;
		OffsetBlue = 2;
 120:	08 95       	ret

00000122 <_ZN6WS28126setPinEh>:
 122:	dc 01       	movw	r26, r24
 124:	64 31       	cpi	r22, 0x14	; 20
 126:	58 f5       	brcc	.+86     	; 0x17e <_ZN6WS28126setPinEh+0x5c>
 128:	86 2f       	mov	r24, r22
 12a:	26 2f       	mov	r18, r22
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	e8 59       	subi	r30, 0x98	; 152
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	e4 91       	lpm	r30, Z
 136:	ec 93       	st	X, r30
 138:	24 58       	subi	r18, 0x84	; 132
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	f9 01       	movw	r30, r18
 13e:	94 91       	lpm	r25, Z
 140:	e9 2f       	mov	r30, r25
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e0 57       	subi	r30, 0x70	; 112
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	45 91       	lpm	r20, Z+
 14e:	54 91       	lpm	r21, Z
 150:	12 96       	adiw	r26, 0x02	; 2
 152:	5c 93       	st	X, r21
 154:	4e 93       	st	-X, r20
 156:	11 97       	sbiw	r26, 0x01	; 1
 158:	f9 01       	movw	r30, r18
 15a:	24 91       	lpm	r18, Z
 15c:	e2 2f       	mov	r30, r18
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	e6 56       	subi	r30, 0x66	; 102
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	25 91       	lpm	r18, Z+
 16a:	34 91       	lpm	r19, Z
 16c:	14 96       	adiw	r26, 0x04	; 4
 16e:	3c 93       	st	X, r19
 170:	2e 93       	st	-X, r18
 172:	13 97       	sbiw	r26, 0x03	; 3
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	0e 94 76 02 	call	0x4ec	; 0x4ec <pinMode>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret

00000182 <_ZN6WS2812C1Eh>:
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
 188:	0e 94 91 00 	call	0x122	; 0x122 <_ZN6WS28126setPinEh>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	8e 87       	std	Y+14, r24	; 0x0e
 190:	1f 86       	std	Y+15, r1	; 0x0f
 192:	18 8a       	std	Y+16, r1	; 0x10
 194:	19 8a       	std	Y+17, r1	; 0x11
 196:	1a 8a       	std	Y+18, r1	; 0x12
 198:	fe 01       	movw	r30, r28
 19a:	35 96       	adiw	r30, 0x05	; 5
 19c:	89 e0       	ldi	r24, 0x09	; 9
 19e:	df 01       	movw	r26, r30
 1a0:	1d 92       	st	X+, r1
 1a2:	8a 95       	dec	r24
 1a4:	e9 f7       	brne	.-6      	; 0x1a0 <_ZN6WS2812C1Eh+0x1e>
 1a6:	1d 8a       	std	Y+21, r1	; 0x15
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	8b 8b       	std	Y+19, r24	; 0x13
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8c 8b       	std	Y+20, r24	; 0x14
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <_ZN6WS28128setPixelEhhhh>:
 1b6:	0f 93       	push	r16
 1b8:	fc 01       	movw	r30, r24
 1ba:	63 30       	cpi	r22, 0x03	; 3
 1bc:	b0 f4       	brcc	.+44     	; 0x1ea <_ZN6WS28128setPixelEhhhh+0x34>
 1be:	83 89       	ldd	r24, Z+19	; 0x13
 1c0:	df 01       	movw	r26, r30
 1c2:	a6 0f       	add	r26, r22
 1c4:	b1 1d       	adc	r27, r1
 1c6:	bd 01       	movw	r22, r26
 1c8:	a8 0f       	add	r26, r24
 1ca:	b1 1d       	adc	r27, r1
 1cc:	15 96       	adiw	r26, 0x05	; 5
 1ce:	4c 93       	st	X, r20
 1d0:	84 89       	ldd	r24, Z+20	; 0x14
 1d2:	db 01       	movw	r26, r22
 1d4:	a8 0f       	add	r26, r24
 1d6:	b1 1d       	adc	r27, r1
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	2c 93       	st	X, r18
 1dc:	85 89       	ldd	r24, Z+21	; 0x15
 1de:	fb 01       	movw	r30, r22
 1e0:	e8 0f       	add	r30, r24
 1e2:	f1 1d       	adc	r31, r1
 1e4:	05 83       	std	Z+5, r16	; 0x05
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <_ZN6WS28128setPixelEhhhh+0x36>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <_ZN6WS281213setBrightnessEh>:
 1f0:	fc 01       	movw	r30, r24
 1f2:	66 87       	std	Z+14, r22	; 0x0e
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret

000001f8 <_ZN6WS281210dimmPixelsEPhj>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
	for(uint16_t i = 0; i < DataLength; i = i + 3)
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	84 17       	cp	r24, r20
 204:	95 07       	cpc	r25, r21
 206:	c0 f5       	brcc	.+112    	; 0x278 <_ZN6WS281210dimmPixelsEPhj+0x80>
	{
		PixelsDimmed[WS2812_POS_ABS_RED(i)] = (Pixels[WS2812_POS_ABS_RED(i)] * Brightness) >> 8;
 208:	23 89       	ldd	r18, Z+19	; 0x13
 20a:	dc 01       	movw	r26, r24
 20c:	a2 0f       	add	r26, r18
 20e:	b1 1d       	adc	r27, r1
 210:	9d 01       	movw	r18, r26
 212:	df 01       	movw	r26, r30
 214:	a2 0f       	add	r26, r18
 216:	b3 1f       	adc	r27, r19
 218:	15 96       	adiw	r26, 0x05	; 5
 21a:	ac 91       	ld	r26, X
 21c:	b6 85       	ldd	r27, Z+14	; 0x0e
 21e:	eb 01       	movw	r28, r22
 220:	c2 0f       	add	r28, r18
 222:	d3 1f       	adc	r29, r19
 224:	ab 9f       	mul	r26, r27
 226:	d0 01       	movw	r26, r0
 228:	11 24       	eor	r1, r1
 22a:	b8 83       	st	Y, r27
		PixelsDimmed[WS2812_POS_ABS_GREEN(i)] = (Pixels[WS2812_POS_ABS_GREEN(i)] * Brightness) >> 8;
 22c:	24 89       	ldd	r18, Z+20	; 0x14
 22e:	dc 01       	movw	r26, r24
 230:	a2 0f       	add	r26, r18
 232:	b1 1d       	adc	r27, r1
 234:	9d 01       	movw	r18, r26
 236:	df 01       	movw	r26, r30
 238:	a2 0f       	add	r26, r18
 23a:	b3 1f       	adc	r27, r19
 23c:	15 96       	adiw	r26, 0x05	; 5
 23e:	ac 91       	ld	r26, X
 240:	b6 85       	ldd	r27, Z+14	; 0x0e
 242:	eb 01       	movw	r28, r22
 244:	c2 0f       	add	r28, r18
 246:	d3 1f       	adc	r29, r19
 248:	ab 9f       	mul	r26, r27
 24a:	d0 01       	movw	r26, r0
 24c:	11 24       	eor	r1, r1
 24e:	b8 83       	st	Y, r27
		PixelsDimmed[WS2812_POS_ABS_BLUE(i)] = (Pixels[WS2812_POS_ABS_BLUE(i)] * Brightness) >> 8;
 250:	25 89       	ldd	r18, Z+21	; 0x15
 252:	dc 01       	movw	r26, r24
 254:	a2 0f       	add	r26, r18
 256:	b1 1d       	adc	r27, r1
 258:	9d 01       	movw	r18, r26
 25a:	df 01       	movw	r26, r30
 25c:	a2 0f       	add	r26, r18
 25e:	b3 1f       	adc	r27, r19
 260:	15 96       	adiw	r26, 0x05	; 5
 262:	ac 91       	ld	r26, X
 264:	b6 85       	ldd	r27, Z+14	; 0x0e
 266:	eb 01       	movw	r28, r22
 268:	c2 0f       	add	r28, r18
 26a:	d3 1f       	adc	r29, r19
 26c:	ab 9f       	mul	r26, r27
 26e:	d0 01       	movw	r26, r0
 270:	11 24       	eor	r1, r1
 272:	b8 83       	st	Y, r27
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
	for(uint16_t i = 0; i < DataLength; i = i + 3)
 274:	03 96       	adiw	r24, 0x03	; 3
 276:	c5 cf       	rjmp	.-118    	; 0x202 <_ZN6WS281210dimmPixelsEPhj+0xa>
	{
		PixelsDimmed[WS2812_POS_ABS_RED(i)] = (Pixels[WS2812_POS_ABS_RED(i)] * Brightness) >> 8;
		PixelsDimmed[WS2812_POS_ABS_GREEN(i)] = (Pixels[WS2812_POS_ABS_GREEN(i)] * Brightness) >> 8;
		PixelsDimmed[WS2812_POS_ABS_BLUE(i)] = (Pixels[WS2812_POS_ABS_BLUE(i)] * Brightness) >> 8;
	}
} /* dimmPixels */
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <_ZN6WS28128sendDataEPhj>:
{
	uint8_t BitCounter;
	uint8_t PortMaskLow;
	uint8_t PortMaskHigh;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 27e:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 280:	f8 94       	cli
	{
		PortMaskLow = ~PinMask & *PortOutputRegister;
 282:	fc 01       	movw	r30, r24
 284:	20 81       	ld	r18, Z
 286:	a1 81       	ldd	r26, Z+1	; 0x01
 288:	b2 81       	ldd	r27, Z+2	; 0x02
 28a:	9c 91       	ld	r25, X
 28c:	82 2f       	mov	r24, r18
 28e:	80 95       	com	r24
 290:	98 23       	and	r25, r24
		PortMaskHigh = PinMask | *PortOutputRegister;
 292:	8c 91       	ld	r24, X
 294:	82 2b       	or	r24, r18
 296:	fb 01       	movw	r30, r22
 298:	46 0f       	add	r20, r22
 29a:	57 1f       	adc	r21, r23

		for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 29c:	e4 17       	cp	r30, r20
 29e:	f5 07       	cpc	r31, r21
 2a0:	81 f0       	breq	.+32     	; 0x2c2 <skipone549+0x8>
#endif

				"dec   %[BitCounter]				\n\t"    //  '1' [+4] '0' [+3]
				"brne  loop%=						\n\t"    //  '1' [+5] '0' [+4]
				: [BitCounter]		"=&d" (BitCounter)
				: [CurrentByte]		"r"   (Data[ByteCounter]),
 2a2:	21 91       	ld	r18, Z+
				  [Port]			"x"   (PortOutputRegister),
				  [PortMaskHigh]	"r"   (PortMaskHigh),
				  [PortMaskLow]		"r"   (PortMaskLow)
			);
 2a4:	68 e0       	ldi	r22, 0x08	; 8

000002a6 <loop549>:
 2a6:	8c 93       	st	X, r24
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <loop549+0x4>
 2aa:	27 ff       	sbrs	r18, 7
 2ac:	9c 93       	st	X, r25
 2ae:	22 0f       	add	r18, r18
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <loop549+0xc>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <loop549+0xe>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <loop549+0x10>
 2b6:	08 f4       	brcc	.+2      	; 0x2ba <skipone549>
 2b8:	9c 93       	st	X, r25

000002ba <skipone549>:
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <skipone549+0x2>
 2bc:	6a 95       	dec	r22
 2be:	99 f7       	brne	.-26     	; 0x2a6 <loop549>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		PortMaskLow = ~PinMask & *PortOutputRegister;
		PortMaskHigh = PinMask | *PortOutputRegister;

		for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 2c0:	ed cf       	rjmp	.-38     	; 0x29c <_ZN6WS28128sendDataEPhj+0x1e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2c2:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
 2c4:	08 95       	ret

000002c6 <_ZN6WS28124showEv>:
#if (WS2812_RESET_TIMER == STD_ON)
	stdReturnType WS2812::show()
#elif (WS2812_RESET_TIMER == STD_OFF)
	void WS2812::show()
#endif
{
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	29 97       	sbiw	r28, 0x09	; 9
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	8c 01       	movw	r16, r24
	byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
	if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
 2e8:	0e 94 16 02 	call	0x42c	; 0x42c <micros>
 2ec:	f8 01       	movw	r30, r16
 2ee:	c7 84       	ldd	r12, Z+15	; 0x0f
 2f0:	d0 88       	ldd	r13, Z+16	; 0x10
 2f2:	e1 88       	ldd	r14, Z+17	; 0x11
 2f4:	f2 88       	ldd	r15, Z+18	; 0x12
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	8c 19       	sub	r24, r12
 2fc:	9d 09       	sbc	r25, r13
 2fe:	ae 09       	sbc	r26, r14
 300:	bf 09       	sbc	r27, r15
 302:	c3 97       	sbiw	r24, 0x33	; 51
 304:	a1 05       	cpc	r26, r1
 306:	b1 05       	cpc	r27, r1
 308:	30 f4       	brcc	.+12     	; 0x316 <_ZN6WS28124showEv+0x50>
 30a:	cd 28       	or	r12, r13
 30c:	ce 28       	or	r12, r14
 30e:	cf 28       	or	r12, r15
 310:	11 f0       	breq	.+4      	; 0x316 <_ZN6WS28124showEv+0x50>
		}
#if (WS2812_RESET_TIMER == STD_ON)
		ResetTimer = micros();
		return E_OK;
	} else {
		return E_NOT_OK;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	22 c0       	rjmp	.+68     	; 0x35a <_ZN6WS28124showEv+0x94>
	byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
	if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
#endif
		if(Brightness != 255) {
 316:	f8 01       	movw	r30, r16
 318:	86 85       	ldd	r24, Z+14	; 0x0e
 31a:	8f 3f       	cpi	r24, 0xFF	; 255
 31c:	71 f0       	breq	.+28     	; 0x33a <_ZN6WS28124showEv+0x74>
			dimmPixels(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 31e:	49 e0       	ldi	r20, 0x09	; 9
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	be 01       	movw	r22, r28
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	c8 01       	movw	r24, r16
 32a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN6WS281210dimmPixelsEPhj>
			sendData(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 32e:	49 e0       	ldi	r20, 0x09	; 9
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	be 01       	movw	r22, r28
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	05 c0       	rjmp	.+10     	; 0x344 <_ZN6WS28124showEv+0x7e>
		} else {
			sendData(Pixels, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 33a:	49 e0       	ldi	r20, 0x09	; 9
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	b8 01       	movw	r22, r16
 340:	6b 5f       	subi	r22, 0xFB	; 251
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	c8 01       	movw	r24, r16
 346:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN6WS28128sendDataEPhj>
		}
#if (WS2812_RESET_TIMER == STD_ON)
		ResetTimer = micros();
 34a:	0e 94 16 02 	call	0x42c	; 0x42c <micros>
 34e:	f8 01       	movw	r30, r16
 350:	67 87       	std	Z+15, r22	; 0x0f
 352:	70 8b       	std	Z+16, r23	; 0x10
 354:	81 8b       	std	Z+17, r24	; 0x11
 356:	92 8b       	std	Z+18, r25	; 0x12
		return E_OK;
 358:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return E_NOT_OK;
	}
#endif
} /* show */
 35a:	29 96       	adiw	r28, 0x09	; 9
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	08 95       	ret

00000378 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 378:	08 95       	ret

0000037a <main>:

int main(void)
{
	init();
 37a:	0e 94 3b 02 	call	0x476	; 0x476 <init>

	initVariant();
 37e:	0e 94 bc 01 	call	0x378	; 0x378 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 382:	0e 94 73 00 	call	0xe6	; 0xe6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 38a:	0e 94 74 00 	call	0xe8	; 0xe8 <loop>
		if (serialEventRun) serialEventRun();
 38e:	20 97       	sbiw	r28, 0x00	; 0
 390:	e1 f3       	breq	.-8      	; 0x38a <main+0x10>
 392:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 396:	f9 cf       	rjmp	.-14     	; 0x38a <main+0x10>

00000398 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <timer0_millis>
 3b2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <timer0_millis+0x1>
 3b6:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <timer0_millis+0x2>
 3ba:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <timer0_millis+0x3>
 3be:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <timer0_fract>
 3c2:	23 e0       	ldi	r18, 0x03	; 3
 3c4:	23 0f       	add	r18, r19
 3c6:	2d 37       	cpi	r18, 0x7D	; 125
 3c8:	20 f4       	brcc	.+8      	; 0x3d2 <__vector_16+0x3a>
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	a1 1d       	adc	r26, r1
 3ce:	b1 1d       	adc	r27, r1
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <__vector_16+0x44>
 3d2:	26 e8       	ldi	r18, 0x86	; 134
 3d4:	23 0f       	add	r18, r19
 3d6:	02 96       	adiw	r24, 0x02	; 2
 3d8:	a1 1d       	adc	r26, r1
 3da:	b1 1d       	adc	r27, r1
 3dc:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <timer0_fract>
 3e0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <timer0_millis>
 3e4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <timer0_millis+0x1>
 3e8:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <timer0_millis+0x2>
 3ec:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <timer0_millis+0x3>
 3f0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer0_overflow_count>
 3f4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer0_overflow_count+0x1>
 3f8:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <timer0_overflow_count+0x2>
 3fc:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <timer0_overflow_count+0x3>
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	a1 1d       	adc	r26, r1
 404:	b1 1d       	adc	r27, r1
 406:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timer0_overflow_count>
 40a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <timer0_overflow_count+0x1>
 40e:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <timer0_overflow_count+0x2>
 412:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <timer0_overflow_count+0x3>
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <micros>:
 42c:	3f b7       	in	r19, 0x3f	; 63
 42e:	f8 94       	cli
 430:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer0_overflow_count>
 434:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer0_overflow_count+0x1>
 438:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <timer0_overflow_count+0x2>
 43c:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <timer0_overflow_count+0x3>
 440:	26 b5       	in	r18, 0x26	; 38
 442:	a8 9b       	sbis	0x15, 0	; 21
 444:	05 c0       	rjmp	.+10     	; 0x450 <micros+0x24>
 446:	2f 3f       	cpi	r18, 0xFF	; 255
 448:	19 f0       	breq	.+6      	; 0x450 <micros+0x24>
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	a1 1d       	adc	r26, r1
 44e:	b1 1d       	adc	r27, r1
 450:	3f bf       	out	0x3f, r19	; 63
 452:	ba 2f       	mov	r27, r26
 454:	a9 2f       	mov	r26, r25
 456:	98 2f       	mov	r25, r24
 458:	88 27       	eor	r24, r24
 45a:	82 0f       	add	r24, r18
 45c:	91 1d       	adc	r25, r1
 45e:	a1 1d       	adc	r26, r1
 460:	b1 1d       	adc	r27, r1
 462:	bc 01       	movw	r22, r24
 464:	cd 01       	movw	r24, r26
 466:	42 e0       	ldi	r20, 0x02	; 2
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	4a 95       	dec	r20
 472:	d1 f7       	brne	.-12     	; 0x468 <micros+0x3c>
 474:	08 95       	ret

00000476 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 476:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 478:	84 b5       	in	r24, 0x24	; 36
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 47e:	84 b5       	in	r24, 0x24	; 36
 480:	81 60       	ori	r24, 0x01	; 1
 482:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 484:	85 b5       	in	r24, 0x25	; 37
 486:	82 60       	ori	r24, 0x02	; 2
 488:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 48a:	85 b5       	in	r24, 0x25	; 37
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 490:	ee e6       	ldi	r30, 0x6E	; 110
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 49a:	e1 e8       	ldi	r30, 0x81	; 129
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 4a0:	80 81       	ld	r24, Z
 4a2:	82 60       	ori	r24, 0x02	; 2
 4a4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 4a6:	80 81       	ld	r24, Z
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 4ac:	e0 e8       	ldi	r30, 0x80	; 128
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 4b6:	e1 eb       	ldi	r30, 0xB1	; 177
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 4c0:	e0 eb       	ldi	r30, 0xB0	; 176
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 4ca:	ea e7       	ldi	r30, 0x7A	; 122
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	84 60       	ori	r24, 0x04	; 4
 4d2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 4d4:	80 81       	ld	r24, Z
 4d6:	82 60       	ori	r24, 0x02	; 2
 4d8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 4da:	80 81       	ld	r24, Z
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4e0:	80 81       	ld	r24, Z
 4e2:	80 68       	ori	r24, 0x80	; 128
 4e4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4e6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ea:	08 95       	ret

000004ec <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	e8 59       	subi	r30, 0x98	; 152
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 4fa:	fc 01       	movw	r30, r24
 4fc:	e4 58       	subi	r30, 0x84	; 132
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 502:	88 23       	and	r24, r24
 504:	61 f1       	breq	.+88     	; 0x55e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	fc 01       	movw	r30, r24
 50e:	e6 56       	subi	r30, 0x66	; 102
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	c5 91       	lpm	r28, Z+
 514:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 516:	fc 01       	movw	r30, r24
 518:	e0 57       	subi	r30, 0x70	; 112
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	a5 91       	lpm	r26, Z+
 51e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 520:	61 11       	cpse	r22, r1
 522:	09 c0       	rjmp	.+18     	; 0x536 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 524:	9f b7       	in	r25, 0x3f	; 63
                cli();
 526:	f8 94       	cli
		*reg &= ~bit;
 528:	88 81       	ld	r24, Y
 52a:	20 95       	com	r18
 52c:	82 23       	and	r24, r18
 52e:	88 83       	st	Y, r24
		*out &= ~bit;
 530:	ec 91       	ld	r30, X
 532:	2e 23       	and	r18, r30
 534:	0b c0       	rjmp	.+22     	; 0x54c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 536:	62 30       	cpi	r22, 0x02	; 2
 538:	61 f4       	brne	.+24     	; 0x552 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 53a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 53c:	f8 94       	cli
		*reg &= ~bit;
 53e:	88 81       	ld	r24, Y
 540:	32 2f       	mov	r19, r18
 542:	30 95       	com	r19
 544:	83 23       	and	r24, r19
 546:	88 83       	st	Y, r24
		*out |= bit;
 548:	ec 91       	ld	r30, X
 54a:	2e 2b       	or	r18, r30
 54c:	2c 93       	st	X, r18
		SREG = oldSREG;
 54e:	9f bf       	out	0x3f, r25	; 63
 550:	06 c0       	rjmp	.+12     	; 0x55e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 552:	8f b7       	in	r24, 0x3f	; 63
                cli();
 554:	f8 94       	cli
		*reg |= bit;
 556:	e8 81       	ld	r30, Y
 558:	2e 2b       	or	r18, r30
 55a:	28 83       	st	Y, r18
		SREG = oldSREG;
 55c:	8f bf       	out	0x3f, r24	; 63
	}
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <__tablejump2__>:
 564:	ee 0f       	add	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	05 90       	lpm	r0, Z+
 56a:	f4 91       	lpm	r31, Z
 56c:	e0 2d       	mov	r30, r0
 56e:	09 94       	ijmp

00000570 <__do_global_dtors>:
 570:	10 e0       	ldi	r17, 0x00	; 0
 572:	c3 e5       	ldi	r28, 0x53	; 83
 574:	d0 e0       	ldi	r29, 0x00	; 0
 576:	04 c0       	rjmp	.+8      	; 0x580 <__do_global_dtors+0x10>
 578:	fe 01       	movw	r30, r28
 57a:	0e 94 b2 02 	call	0x564	; 0x564 <__tablejump2__>
 57e:	21 96       	adiw	r28, 0x01	; 1
 580:	c4 35       	cpi	r28, 0x54	; 84
 582:	d1 07       	cpc	r29, r17
 584:	c9 f7       	brne	.-14     	; 0x578 <__do_global_dtors+0x8>
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
