/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       MsgCmdParser.h
 *      \brief      
 *
 *      \details    
 *                  
******************************************************************************************************************************************************/
#ifndef _MSG_CMD_PARSER_H_
#define _MSG_CMD_PARSER_H_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "StandardTypes.h"
#include "Arduino.h"
#include "Message.h"
#include "ErrorMessage.h"

/******************************************************************************************************************************************************
 *  G L O B A L   C O N S T A N T   M A C R O S
******************************************************************************************************************************************************/
/* MsgCmdParser configuration parameter */


/* MsgCmdParser parameter */


/******************************************************************************************************************************************************
 *  G L O B A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  C L A S S   M S G   C M D   P A R S E R
******************************************************************************************************************************************************/
class MsgCmdParser
{
/******************************************************************************************************************************************************
 *  P U B L I C   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/
  public:
    enum CommandType {
        COMMAND_NONE,
        //COMMAND_DISPLAY_MODE,
        COMMAND_DISPLAY_COLOR,
        COMMAND_DISPLAY_BRIGHTNESS,
        COMMAND_CLOCK_MODE,
        COMMAND_TIME,
        COMMAND_DATE
    };
  
/******************************************************************************************************************************************************
 *  P R I V A T E   D A T A   A N D   F U N C T I N O N S
******************************************************************************************************************************************************/
  private:
    static const char CommandParameterDelimiter{' '};
    const Message& IncomingMessage;
    ErrorMessage Error;
  
    //private functions
    void sendAnswer(CommandType Command) const {
        Serial.print(Command);
        Serial.println(CommandParameterDelimiter);
    }
    
    CommandType getCommand() const {
        return static_cast<CommandType>(atoi(IncomingMessage.getMessage()));
    }

    const char* getParameter() const {
        const char* message = IncomingMessage.getMessage();
        size_t valuePos = IncomingMessage.find(CommandParameterDelimiter);

        if(valuePos == Message::npos) { return nullptr; }
        else { return &message[valuePos]; }
    }
  
/******************************************************************************************************************************************************
 *  P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/
  public:
    MsgCmdParser(const Message&);
    ~MsgCmdParser();

    // get methods


    // set methods

    // methods
    void parse();

};

#endif

/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
