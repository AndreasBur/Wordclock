/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       AnimationClockDrop.cpp
 *      \brief      
 *
 *      \details    
 *                  
 *
******************************************************************************************************************************************************/
#define _ANIMATION_CLOCK_DROP_SOURCE_

/******************************************************************************************************************************************************
 * INCLUDES
******************************************************************************************************************************************************/
#include "AnimationClockDrop.h"


/******************************************************************************************************************************************************
 *  LOCAL CONSTANT MACROS
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  LOCAL FUNCTION MACROS
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  LOCAL DATA TYPES AND STRUCTURES
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  init()
******************************************************************************************************************************************************/
void AnimationClockDrop::init()
{
    AnimationClockCommon::init(STATE_IDLE);
    reset();
} /* init */


/******************************************************************************************************************************************************
  setTime()
******************************************************************************************************************************************************/
StdReturnType AnimationClockDrop::setTime(byte Hour, byte Minute)
{
    StdReturnType returnValue{E_NOT_OK};

    if(Clock::getInstance().getClockWords(Hour, Minute, ClockWordsTable) == E_OK && State == STATE_IDLE) {
        setNextWordIndex();
        if(setNextActivePixelIndex() == E_NOT_OK) { setStateToSetTime(); }
        else { State = STATE_CLEAR_TIME; }
    }
    return returnValue;
} /* setTime */


/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
void AnimationClockDrop::task()
{
    if(State == STATE_CLEAR_TIME) { clearTimeTask(); }
    else if(State == STATE_SET_TIME) { setTimeTask(); }
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  reset()
******************************************************************************************************************************************************/
void AnimationClockDrop::reset()
{
    Row = 0u;
    Column = 0u;
    ClockWordsTable.fill(DisplayWords::WORD_NONE);
    CurrentWordIndex = ClockWordsTable.size() - 1u;
} /* reset */


/******************************************************************************************************************************************************
  clearTimeTask()
******************************************************************************************************************************************************/
void AnimationClockDrop::clearTimeTask()
{
    // toggle current Pixel
    if(Row < DISPLAY_NUMBER_OF_ROWS && Column < DISPLAY_NUMBER_OF_COLUMNS) { Display::getInstance().togglePixelFast(Column, Row); }
    // increment row and check for out of bounds
    if(Row + 1u < DISPLAY_NUMBER_OF_ROWS) {
        // toggle Pixel in next row
        Row++;
        Display::getInstance().togglePixelFast(Column, Row);
    } else {
        // no more active pixels available
        if(setNextActivePixelIndex() == E_NOT_OK) { setStateToSetTime(); }
    }
} /* clearTimeTask */


/******************************************************************************************************************************************************
  setTimeTask()
******************************************************************************************************************************************************/
void AnimationClockDrop::setTimeTask()
{
    DisplayWord currentWord = Words.getDisplayWordFast(ClockWordsTable[CurrentWordIndex]);
    const byte MaxColumn = Words.getDisplayWordColumnFast(ClockWordsTable[CurrentWordIndex]) + currentWord.getLength() - 1u;

    if(setNextRow(currentWord.getRow()) == E_OK) {
        Display::getInstance().clearPixelFast(Column, Row - 1u);
    } else {
        if(setNextColumn(MaxColumn) == E_NOT_OK) {
            State = STATE_IDLE;
            reset();
        }
    }
    Display::getInstance().setPixelFast(Column, Row);
} /* setTimeTask */


/******************************************************************************************************************************************************
  getNextActivePixel()
******************************************************************************************************************************************************/
StdReturnType AnimationClockDrop::setNextActivePixelIndex()
{
    for(int16_t index = DISPLAY_NUMBER_OF_PIXELS - 1u; index >= 0; index--) {
        if(Display::getInstance().getPixelFast(index)) {
            Display::getInstance().indexToColumnAndRow(index, Column, Row);
            return E_OK;
        }
    }
    return E_NOT_OK;
}


/******************************************************************************************************************************************************
  setNextWordIndex()
******************************************************************************************************************************************************/
StdReturnType AnimationClockDrop::setNextWordIndex()
{
    for(int8_t index = CurrentWordIndex - 1u; index >= 0; index--) {
        if(ClockWordsTable[index] != DisplayWords::WORD_NONE) {
            CurrentWordIndex = index;
            return E_OK;
        }
    }
    return E_NOT_OK;
} /* setNextWordIndex */


/******************************************************************************************************************************************************
  setStateToSetTime()
******************************************************************************************************************************************************/
void AnimationClockDrop::setStateToSetTime()
{
    Row = 0u;
    Column = Words.getDisplayWordColumnFast(ClockWordsTable[CurrentWordIndex]);
    Display::getInstance().setPixelFast(Column, Row);
    State = STATE_SET_TIME;
} /* setStateToSetTime */


/******************************************************************************************************************************************************
  setNextRow()
******************************************************************************************************************************************************/
StdReturnType AnimationClockDrop::setNextRow(byte MaxRow)
{
    if(Row >= MaxRow) {
        return E_NOT_OK;
    } else {
        Row++;
        return E_OK;
    }
} /* setNextRow */


/******************************************************************************************************************************************************
  setNextColumn()
******************************************************************************************************************************************************/
StdReturnType AnimationClockDrop::setNextColumn(byte MaxColumn)
{
    if(Column >= MaxColumn) {
         if(setNextWordIndex() == E_OK) {
            Column = Words.getDisplayWordColumnFast(ClockWordsTable[CurrentWordIndex]);
            Row = 0u;
            return E_OK;
        } else {
            return E_NOT_OK;
        }
    } else {
        Column++;
        Row = 0u;
        return E_OK;
    }
} /* setNextColumn */


/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
 