/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       AnimationClockCube.cpp
 *      \brief      
 *
 *      \details    
 *                  
 *
******************************************************************************************************************************************************/
#define _TEMPLATE_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "AnimationClockCube.h"


/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S 
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  Constructor of AnimationClockCube
******************************************************************************************************************************************************/
/*! \brief          AnimationClockCube Constructor
 *  \details        Instantiation of the AnimationClockCube library
 *
 *  \return         -
******************************************************************************************************************************************************/
AnimationClockCube::AnimationClockCube()
{
    reset();
} /* AnimationClockCube */


/******************************************************************************************************************************************************
  Destructor of AnimationClockCube
******************************************************************************************************************************************************/
AnimationClockCube::~AnimationClockCube()
{

} /* ~AnimationClockCube */


/******************************************************************************************************************************************************
  init()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::init(Display* Display, Clock* Clock)
{
    AnimationClockCommon::init(Display, Clock, STATE_IDLE);
    reset();
} /* init */


/******************************************************************************************************************************************************
  setClock()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType AnimationClockCube::setClock(byte Hour, byte Minute)
{
    stdReturnType ReturnValue{E_NOT_OK};

    if(pClock->getClockWords(Hour, Minute, ClockWordsTable) == E_OK && State == STATE_IDLE) {
        ReturnValue = E_OK;
        setMaxBorder(Border);
        State = STATE_CLEAR_TIME;
    }
    return ReturnValue;
} /* setClock */


/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::task()
{
    if(State == STATE_CLEAR_TIME) { clearTimeTask(); }
    else if(State == STATE_SET_TIME) { setTimeTask(); }
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  reset()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::reset()
{
    Border.ColumnStart = 0;
    Border.ColumnEnd = 0;
    Border.RowStart = 0;
    Border.RowEnd = 0;
} /* reset */


/******************************************************************************************************************************************************
  clearTimeTask()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::clearTimeTask()
{
    BorderType BorderTmp = Border;

    if(increaseBorder(BorderTmp) == E_OK) { clearBorderPixels(BorderTmp); }
    setBorderPixels(Border);
    if(decreaseBorder(Border) == E_NOT_OK) State = STATE_SET_TIME;
} /* clearTimeTask */


/******************************************************************************************************************************************************
  setTimeTask()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::setTimeTask()
{
    
} /* setTimeTask */


/******************************************************************************************************************************************************
  writeBorderPixels()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::writeBorderPixels(bool Value, const BorderType& sBorder)
{
    for(byte Column = sBorder.ColumnStart; Column <= sBorder.ColumnEnd; Column++) { 
        // set border top
        pDisplay->writePixelFast(Column, sBorder.RowStart, Value);
        // set border bottom
        pDisplay->writePixelFast(Column, sBorder.RowEnd, Value);
    }
    for(byte Row = sBorder.RowStart; Row <= sBorder.RowEnd; Row++) {
        // set border left
        pDisplay->writePixelFast(sBorder.ColumnStart, Row, Value);
        // set border right
        pDisplay->writePixelFast(sBorder.ColumnEnd, Row, Value);
    }
} /* writeBorderPixels */


/******************************************************************************************************************************************************
  increaseBorder()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType AnimationClockCube::increaseBorder(BorderType& sBorder)
{
    stdReturnType ReturnValue = E_OK;

    if(sBorder.ColumnStart > 0) { sBorder.ColumnStart--; }
    else { ReturnValue = E_NOT_OK; }
    if(sBorder.ColumnEnd < DISPLAY_NUMBER_OF_COLUMNS) { sBorder.ColumnEnd++; }
    else { ReturnValue = E_NOT_OK; }
    if(sBorder.RowStart > 0) { sBorder.RowStart--; }
    else { ReturnValue = E_NOT_OK; }
    if(sBorder.RowEnd < DISPLAY_NUMBER_OF_ROWS) { sBorder.RowEnd++; }
    else { ReturnValue = E_NOT_OK; }
    
    return ReturnValue;
} /* increaseBorder */


/******************************************************************************************************************************************************
  decreaseBorder()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType AnimationClockCube::decreaseBorder(BorderType& sBorder)
{
    stdReturnType ReturnValue = E_OK;

    if(sBorder.ColumnStart < ANIMATION_CLOCK_CUBE_COLUMN_START_MAX_VALUE) { sBorder.ColumnStart++; }
    else { ReturnValue = E_NOT_OK; }
    if(sBorder.ColumnEnd > ANIMATION_CLOCK_CUBE_COLUMN_END_MIN_VALUE) {sBorder. ColumnEnd--; }
    else { ReturnValue = E_NOT_OK; }
    if(sBorder.RowStart < ANIMATION_CLOCK_CUBE_ROW_START_MAX_VALUE) { sBorder.RowStart++; }
    else { ReturnValue = E_NOT_OK; }
    if(sBorder.RowEnd > ANIMATION_CLOCK_CUBE_ROW_END_MIN_VALUE) { sBorder.RowEnd--; }
    else { ReturnValue = E_NOT_OK; }

    return ReturnValue;
} /* decreaseBorder */


/******************************************************************************************************************************************************
  setMaxBorder()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::setMaxBorder(BorderType& sBorder)
{
    sBorder.ColumnStart = 0;
    sBorder.ColumnEnd = DISPLAY_NUMBER_OF_COLUMNS - 1;
    sBorder.RowStart = 0;
    sBorder.RowEnd = DISPLAY_NUMBER_OF_ROWS - 1;
} /* setMaxBorder */


/******************************************************************************************************************************************************
  setMinBorder()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationClockCube::setMinBorder(BorderType& sBorder)
{
    sBorder.ColumnStart = ANIMATION_CLOCK_CUBE_COLUMN_START_MAX_VALUE;
    sBorder.ColumnEnd = ANIMATION_CLOCK_CUBE_COLUMN_END_MIN_VALUE;
    sBorder.RowStart = ANIMATION_CLOCK_CUBE_ROW_START_MAX_VALUE;
    sBorder.RowEnd = ANIMATION_CLOCK_CUBE_ROW_END_MIN_VALUE;
} /* setMinBorder */


/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
 