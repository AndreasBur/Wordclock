/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       AnimationSqueeze.cpp
 *      \brief
 *
 *      \details
 *
 *
******************************************************************************************************************************************************/
#define _ANIMATION_CLOCK_SQUEEZE_SOURCE_

/******************************************************************************************************************************************************
 * INCLUDES
******************************************************************************************************************************************************/
#include "AnimationSqueeze.h"


/******************************************************************************************************************************************************
 *  LOCAL CONSTANT MACROS
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  LOCAL FUNCTION MACROS
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  LOCAL DATA TYPES AND STRUCTURES
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  init()
******************************************************************************************************************************************************/
void AnimationSqueeze::init()
{
    AnimationCommon::init(STATE_IDLE);
    reset();
} /* init */


/******************************************************************************************************************************************************
  setTime()
******************************************************************************************************************************************************/
StdReturnType AnimationSqueeze::setTime(byte Hour, byte Minute)
{
    StdReturnType ReturnValue{E_NOT_OK};

    if(Clock::getInstance().getClockWords(Hour, Minute, ClockWordsTable) == E_OK && State == STATE_IDLE) {
        ReturnValue = E_OK;
        State = STATE_CLEAR_TIME;
    }
    return ReturnValue;
} /* setTime */


/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
void AnimationSqueeze::task()
{
    if(State == STATE_CLEAR_TIME) {
        clearTimeTask();
        if(Display::getInstance().isCleared()) {
            setMaxWordLength();
            State = STATE_SET_TIME;
        }
    } else if(State == STATE_SET_TIME) {
        setTimeTask();
        if(CurrentLength > MaxWordLength) { State = STATE_IDLE; }
    }
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  reset()
******************************************************************************************************************************************************/
void AnimationSqueeze::reset()
{
    ClockWordsTable.fill(DisplayWords::WORD_NONE);
    MaxWordLength = 0u;
    CurrentLength = 1u;
} /* reset */

/******************************************************************************************************************************************************
  clearTimeTask()
******************************************************************************************************************************************************/
void AnimationSqueeze::clearTimeTask()
{
    for(byte pixelIndex = 0u; pixelIndex < DISPLAY_NUMBER_OF_PIXELS; pixelIndex++)
    {
        pixelIndex = getNextSetPixel(pixelIndex);
        Display::getInstance().clearPixel(pixelIndex);
        pixelIndex++;
        pixelIndex = getNextClearedPixel(pixelIndex);
    }
} /* clearTimeTask */

/******************************************************************************************************************************************************
  setTimeTask()
******************************************************************************************************************************************************/
void AnimationSqueeze::setTimeTask()
{
    Clock::getInstance().setTime(ClockWordsTable, CurrentLength);
    CurrentLength++;
} /* setTimeTask */

/******************************************************************************************************************************************************
  getNextClearedPixel()
******************************************************************************************************************************************************/
byte AnimationSqueeze::getNextClearedPixel(byte Index)
{
    for(byte i = Index; i < DISPLAY_NUMBER_OF_PIXELS; i++) {
        if(!Display::getInstance().getPixelFast(i)) {
            return i;
        }
    }
    return Index;
} /* getNextClearedPixel */

/******************************************************************************************************************************************************
  getNextSetPixel()
******************************************************************************************************************************************************/
byte AnimationSqueeze::getNextSetPixel(byte Index)
{
    for(byte i = Index; i < DISPLAY_NUMBER_OF_PIXELS; i++) {
        if(Display::getInstance().getPixelFast(i)) {
            return i;
        }
    }
    return Index;
} /* getNextSetPixel */

/******************************************************************************************************************************************************
  getMaxWordLength()
******************************************************************************************************************************************************/
void AnimationSqueeze::setMaxWordLength()
{
    for(byte index = 0u; index < ClockWordsTable.size(); index++)
    {
        byte CurrentWordLength = Words.getDisplayWordLengthFast(ClockWordsTable[index]);
        if(CurrentWordLength > MaxWordLength) {
            MaxWordLength = CurrentWordLength;
        }
    }
} /* getMaxWordLength */

/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
