/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       ClockWords.cpp
 *      \brief      
 *
 *      \details    
 *                  
 *
******************************************************************************************************************************************************/
#define _CLOCKWORDS_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "ClockWords.h"


/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S 
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  Constructor of ClockWords
******************************************************************************************************************************************************/
ClockWords::ClockWords()
{
    ShowItIs = false;
    HourWords.fill(DisplayWords::WORD_NONE);
    MinuteWords.fill(DisplayWords::WORD_NONE);
} /* ClockWords */


/******************************************************************************************************************************************************
  Constructor of ClockWords
******************************************************************************************************************************************************/
ClockWords::ClockWords(bool sShowItIs, HourWordsType sHourWords, MinutesWordsType sMinuteWords)
{
    ShowItIs = sShowItIs;
    HourWords = sHourWords;
    MinuteWords = sMinuteWords;
}


/******************************************************************************************************************************************************
  Destructor of ClockWords
******************************************************************************************************************************************************/
ClockWords::~ClockWords()
{

}

/******************************************************************************************************************************************************
  Operator ==
******************************************************************************************************************************************************/
bool ClockWords::operator==(const ClockWords& sClockWords)
{
    if(ShowItIs    == sClockWords.getShowItIs()    &&
       HourWords   == sClockWords.getHourWords()   &&
       MinuteWords == sClockWords.getMinuteWords() )
    {
        return true;
    } else {
        return false;
    }
}

/******************************************************************************************************************************************************
  Operator !=
******************************************************************************************************************************************************/
bool ClockWords::operator!=(const ClockWords& sClockWords)
{
    if(operator==(sClockWords)) { return false; }
    else { return true; }
}

/******************************************************************************************************************************************************
  getWordsList()
******************************************************************************************************************************************************/
ClockWords::WordsListType ClockWords::getWordsList() const
{
    /* ----- Local Variables ---------------------------------------------- */
    WordsListType clockWords;
    byte clockWordsIndex{0};

    /* ----- Implementation ----------------------------------------------- */  
    if(ShowItIs) {
        clockWords[clockWordsIndex++] = DisplayWords::WORD_ES;
        clockWords[clockWordsIndex++] = DisplayWords::WORD_IST;
    }
    for(uint8_t Index = 0; Index < CLOCKWORDS_MAX_NUMBER_OF_MINUTE_WORDS; Index++) {
        if(MinuteWords[Index] != DisplayWords::WORD_NONE) {
            clockWords[clockWordsIndex++] = MinuteWords[Index];
        }
    }
    for(uint8_t Index = 0; Index < CLOCKWORDS_MAX_NUMBER_OF_HOUR_WORDS; Index++) {
        if(HourWords[Index] != DisplayWords::WORD_NONE) {
            clockWords[clockWordsIndex++] = HourWords[Index];
        }
    }
    for(uint8_t Index = clockWordsIndex; Index < CLOCKWORDS_MAX_NUMBER_OF_WORDS; Index++) {
        clockWords[Index] = DisplayWords::WORD_NONE;
    }
    return clockWords;
}


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
 