/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       Scheduler.cpp
 *      \brief
 *
 *      \details
 *
 *
******************************************************************************************************************************************************/
#define _SCHEDULER_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "Scheduler.h"
#include "Animation.h"
#include "Illuminance.h"
#include "Communication.h"

/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
void Scheduler::task()
{
    TaskCycleCounter++;
    triggerTasks();
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  isCycleHit()
******************************************************************************************************************************************************/
bool Scheduler::isCycleHit(byte Cycle) {
    if(Cycle == 0u) { return false; }
    if(TaskCycleCounter % Cycle) { return false; }
    else { return true; }
} /* isCycleHit */


/******************************************************************************************************************************************************
  triggerTasks()
******************************************************************************************************************************************************/
void Scheduler::triggerTasks()
{
    if(isCycleHit(Illuminance::getInstance().getTaskCycle())) { Illuminance::getInstance().task(); }
    if(isCycleHit(Animation::getInstance().getTaskCycle())) { Animation::getInstance().task(true); }
    if(isCycleHit(Communication::getInstance().getTaskCycle())) { Communication::getInstance().task(); }
} /* triggerTasks */

/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
