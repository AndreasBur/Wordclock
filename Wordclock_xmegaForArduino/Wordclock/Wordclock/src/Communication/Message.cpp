/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       Message.cpp
 *      \brief      
 *
 *      \details    
 *                  
 *
******************************************************************************************************************************************************/
#define _MESSAGE_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "Message.h"


/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S 
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  Constructor of Message
******************************************************************************************************************************************************/
/*! \brief          Message Constructor
 *  \details        Instantiation of the Message library
 *
 *  \return         -
******************************************************************************************************************************************************/
Message::Message()
{
    clear();
} /* Message */


/******************************************************************************************************************************************************
  Destructor of Message
******************************************************************************************************************************************************/
Message::~Message()
{

} /* ~Message */

StdReturnType Message::addChar(char Char)
{
    byte messageLength = strlen(Buffer);
    // check for free space in Message buffer
    if(messageLength < (MESSAGE_LENGTH - 1u))
    {
        // save new char
        Buffer[messageLength] = Char;
        Buffer[messageLength + 1] = '\0';
        return E_OK;
    } else {
        return E_NOT_OK;
    }
}


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
 