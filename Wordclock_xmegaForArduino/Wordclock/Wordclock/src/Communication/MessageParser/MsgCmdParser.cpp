/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       MsgCmdParser.cpp
 *      \brief      
 *
 *      \details    
 *                  
 *
******************************************************************************************************************************************************/
#define _MSG_CMD_PARSER_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "MsgCmdParser.h"


/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S 
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  Constructor of MsgCmdParser
******************************************************************************************************************************************************/
/*! \brief          MsgCmdParser Constructor
 *  \details        Instantiation of the MsgCmdParser library
 *
 *  \return         -
******************************************************************************************************************************************************/
MsgCmdParser::MsgCmdParser(const Message& sMessage) : IncomingMessage(sMessage) 
{

} /* MsgCmdParser */


/******************************************************************************************************************************************************
  Destructor of MsgCmdParser
******************************************************************************************************************************************************/
MsgCmdParser::~MsgCmdParser()
{

} /* ~MsgCmdParser */

void MsgCmdParser::parse()
{
	CommandsType command = getCommand();
	const char* parameter = getParameter();
	
	switch(command) {
		case COMMAND_DISPLAY_COLOR : {
			MsgCmdDisplayColorParser CmdDisplayColorParser(parameter);
		    CmdDisplayColorParser.parse();
			sendAnswer(command);
			break; }
		case COMMAND_DISPLAY_MODE :
			sendAnswer(command);
			break;
		default:
			Error.send(ErrorMessage::ERROR_WRONG_COMMAND);
			break;
	}

}


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
 