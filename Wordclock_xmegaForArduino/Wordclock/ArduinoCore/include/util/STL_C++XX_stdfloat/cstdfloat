///////////////////////////////////////////////////////////////////////////////
// Copyright Christopher Kormanyos 2014.
// Copyright John Maddock 2014.
// Copyright Paul Bristow 2014.
// Distributed under the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)
//

// <cstdfloat> implements floating-point typedefs having specified widths,
// as described in N3626 (proposed for C++14).
// See: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3626.pdf

#ifndef CSTDFLOAT_2014_01_09_
  #define CSTDFLOAT_2014_01_09_

  #include <stdfloat.h>
  #include <limits>

  // Here, we define floating-point typedefs having specified widths
  // within the namespace std.

  // In addition, a clear assessment of IEEE-754 comformance is
  // carried out using compile-time assertion.

  namespace std
  {
    #if(STDFLOAT_HAS_FLOAT16_NATIVE_TYPE == 1)
      using ::float16_t;
      using ::float_fast16_t;
      using ::float_least16_t;

      static_assert(   (std::numeric_limits<float16_t>::is_iec559    == true)
                    && (std::numeric_limits<float16_t>::radix        ==    2)
                    && (std::numeric_limits<float16_t>::digits       ==   11)
                    && (std::numeric_limits<float16_t>::max_exponent ==   16),
                    "The 16-bit floating-point type in <cstdfloat> is not IEEE-754 conformant.");
    #endif

    #if(STDFLOAT_HAS_FLOAT32_NATIVE_TYPE == 1)
      using ::float32_t;
      using ::float_fast32_t;
      using ::float_least32_t;

      static_assert(   (std::numeric_limits<float32_t>::is_iec559    == true)
                    && (std::numeric_limits<float32_t>::radix        ==    2)
                    && (std::numeric_limits<float32_t>::digits       ==   24)
                    && (std::numeric_limits<float32_t>::max_exponent ==  128),
                    "The 32-bit floating-point type in <cstdfloat> is not IEEE-754 conformant.");
    #endif

    #if(STDFLOAT_HAS_FLOAT64_NATIVE_TYPE == 1)
      using ::float64_t;
      using ::float_fast64_t;
      using ::float_least64_t;

      static_assert(   (std::numeric_limits<float64_t>::is_iec559    == true)
                    && (std::numeric_limits<float64_t>::radix        ==    2)
                    && (std::numeric_limits<float64_t>::digits       ==   53)
                    && (std::numeric_limits<float64_t>::max_exponent == 1024),
                    "The 64-bit floating-point type in <cstdfloat> is not IEEE-754 conformant.");
    #endif

    #if(STDFLOAT_HAS_FLOAT80_NATIVE_TYPE == 1)
      using ::float80_t;
      using ::float_fast80_t;
      using ::float_least80_t;

      static_assert(   (std::numeric_limits<float80_t>::is_iec559    ==  true)
                    && (std::numeric_limits<float80_t>::radix        ==     2)
                    && (std::numeric_limits<float80_t>::digits       ==    64)
                    && (std::numeric_limits<float80_t>::max_exponent == 16384),
                    "The 80-bit floating-point type in <cstdfloat> is not IEEE-754 conformant.");
    #endif

    #if(STDFLOAT_HAS_FLOAT128_NATIVE_TYPE == 1)
      using ::float128_t;
      using ::float_fast128_t;
      using ::float_least128_t;

      static_assert(   (std::numeric_limits<float128_t>::is_iec559    ==  true)
                    && (std::numeric_limits<float128_t>::radix        ==     2)
                    && (std::numeric_limits<float128_t>::digits       ==   113)
                    && (std::numeric_limits<float128_t>::max_exponent == 16384),
                    "The 128-bit floating-point type in <cstdfloat> is not IEEE-754 conformant.");
    #endif

    #if(   (STDFLOAT_HAS_FLOAT16_NATIVE_TYPE  == 1) \
        || (STDFLOAT_HAS_FLOAT32_NATIVE_TYPE  == 1) \
        || (STDFLOAT_HAS_FLOAT64_NATIVE_TYPE  == 1) \
        || (STDFLOAT_HAS_FLOAT80_NATIVE_TYPE  == 1) \
        || (STDFLOAT_HAS_FLOAT128_NATIVE_TYPE == 1))
      using ::floatmax_t;
    #else
      #error The maximum available floating-point width for <cstdfloat> is undefined.
    #endif
  }

  #undef STDFLOAT_HAS_FLOAT16_NATIVE_TYPE
  #undef STDFLOAT_HAS_FLOAT32_NATIVE_TYPE
  #undef STDFLOAT_HAS_FLOAT64_NATIVE_TYPE
  #undef STDFLOAT_HAS_FLOAT80_NATIVE_TYPE
  #undef STDFLOAT_HAS_FLOAT128_NATIVE_TYPE

#endif // CSTDFLOAT_2014_01_09_
