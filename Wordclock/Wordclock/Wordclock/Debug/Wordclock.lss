
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b64  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  00800100  00800100  00000bd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000785f  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d9  00000000  00000000  0000879f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc1  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ac  00000000  00000000  0000b63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000254d  00000000  00000000  0000bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004392  00000000  00000000  0000e535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  000128c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__dtors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_16>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000068 <_ZN5Clock17ClockMinutesTableE>:
  68:	00 00 00 00 00 01 00 03 0a 00 01 00 04 0a 00 01     ................
  78:	00 08 0a 00 01 01 04 0b 0c 01 01 03 0b 0c 01 01     ................
  88:	0c 00 00 01 01 03 0a 0c 01 01 04 0a 0c 01 01 08     ................
  98:	0b 00 01 01 04 0b 00 01 01 03 0b 00 00 00 00 00     ................
  a8:	00 01 00 03 0a 00 01 00 04 0a 00 01 01 08 00 00     ................
  b8:	01 01 04 0b 0c 01 01 03 0b 0c 01 01 0c 00 00 01     ................
  c8:	01 03 0a 0c 01 01 04 0a 0c 01 01 09 00 00 01 01     ................
  d8:	04 0b 00 01 01 03 0b 00 00 00 00 00 00 01 00 03     ................
  e8:	0a 00 01 00 04 0a 00 01 00 08 0a 00 01 00 05 0a     ................
  f8:	00 01 01 03 0b 0c 01 01 0c 00 00 01 01 03 0a 0c     ................
 108:	01 01 05 0b 00 01 01 08 0b 00 01 01 04 0b 00 01     ................
 118:	01 03 0b 00 00 00 00 00 00 01 00 03 0a 00 01 00     ................
 128:	04 0a 00 01 01 08 00 00 01 00 05 0a 00 01 01 03     ................
 138:	0b 0c 01 01 0c 00 00 01 01 03 0a 0c 01 01 05 0b     ................
 148:	00 01 01 09 00 00 01 01 04 0b 00 01 01 03 0b 00     ................

00000158 <_ZN5Clock15ClockHoursTableE>:
 158:	0d 1a 0f 1a 0e 1a 12 1a 16 1a 13 1a 19 1a 11 1a     ................
 168:	17 1a 15 1a 18 1a 14 1a 0d 00 10 00 0e 00 12 00     ................
 178:	16 00 13 00 19 00 11 00 17 00 15 00 18 00 14 00     ................

00000188 <_ZN7Display21WordIlluminationTableE>:
 188:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
 198:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
 1a8:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
 1b8:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
 1c8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
 1d8:	03                                                  .

000001d9 <digital_pin_to_bit_mask_PGM>:
 1d9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 1e9:	04 08 10 20                                         ... 

000001ed <digital_pin_to_port_PGM>:
 1ed:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
 1fd:	03 03 03 03                                         ....

00000201 <port_to_output_PGM>:
 201:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000020b <port_to_mode_PGM>:
 20b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000216 <__ctors_start>:
 216:	3b 01       	movw	r6, r22

00000218 <__ctors_end>:
 218:	49 01       	movw	r8, r18

0000021a <__dtors_end>:
 21a:	11 24       	eor	r1, r1
 21c:	1f be       	out	0x3f, r1	; 63
 21e:	cf ef       	ldi	r28, 0xFF	; 255
 220:	d8 e0       	ldi	r29, 0x08	; 8
 222:	de bf       	out	0x3e, r29	; 62
 224:	cd bf       	out	0x3d, r28	; 61

00000226 <__do_clear_bss>:
 226:	22 e0       	ldi	r18, 0x02	; 2
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a5 36       	cpi	r26, 0x65	; 101
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>

00000236 <__do_global_ctors>:
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	cc e0       	ldi	r28, 0x0C	; 12
 23a:	d1 e0       	ldi	r29, 0x01	; 1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__do_global_ctors+0x10>
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	fe 01       	movw	r30, r28
 242:	0e 94 96 05 	call	0xb2c	; 0xb2c <__tablejump2__>
 246:	cb 30       	cpi	r28, 0x0B	; 11
 248:	d1 07       	cpc	r29, r17
 24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
 24c:	0e 94 95 04 	call	0x92a	; 0x92a <main>
 250:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__do_global_dtors>

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000258 <setup>:
//DisplayCharacter WcDisplayCharacter;
//Animation wcAnimation;
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
 258:	08 95       	ret

0000025a <loop>:
  
}

void loop() {
  // put your main code here, to run repeatedly:
  wcClock.setClock(17,30);
 25a:	4e e1       	ldi	r20, 0x1E	; 30
 25c:	61 e1       	ldi	r22, 0x11	; 17
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Clock8setClockEhh>
    void setPixelRowFast(byte, DisplayPixelRowType);
    void setPixelColumnFast(byte, DisplayPixelColumnType);

    // methods
    void init();
    void show() { Pixels.show(); }
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN6WS28124showEv>
  WordClockDisplay.show();
  WordClockDisplay.clearAllWords();
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0c 94 17 03 	jmp	0x62e	; 0x62e <_ZN7Display13clearAllWordsEv>

00000276 <_GLOBAL__sub_I_flag>:
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 276:	24 e1       	ldi	r18, 0x14	; 20
 278:	44 e1       	ldi	r20, 0x14	; 20
 27a:	64 e1       	ldi	r22, 0x14	; 20
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN7DisplayC1Ehhh>
Clock wcClock(&WordClockDisplay, CLOCK_MODE_WESSI);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_ZN5ClockC1EP7Display14ClockModesType>

00000292 <_GLOBAL__sub_D_flag>:
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN5ClockD1Ev>
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0c 94 80 02 	jmp	0x500	; 0x500 <_ZN7DisplayD1Ev>

000002a2 <_ZN5ClockC1EP7Display14ClockModesType>:
        return true;
    } else {
        return false;
    }

} /* compareClockWords */
 2a2:	61 15       	cp	r22, r1
 2a4:	71 05       	cpc	r23, r1
 2a6:	19 f0       	breq	.+6      	; 0x2ae <_ZN5ClockC1EP7Display14ClockModesType+0xc>
 2a8:	fc 01       	movw	r30, r24
 2aa:	71 83       	std	Z+1, r23	; 0x01
 2ac:	60 83       	st	Z, r22
 2ae:	fc 01       	movw	r30, r24
 2b0:	42 83       	std	Z+2, r20	; 0x02
 2b2:	08 95       	ret

000002b4 <_ZN5ClockD1Ev>:
 2b4:	08 95       	ret

000002b6 <_ZN5Clock13getClockWordsEhhP14ClockWordsType>:
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	2a 97       	sbiw	r28, 0x0a	; 10
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	fc 01       	movw	r30, r24
 2d4:	f6 2e       	mov	r15, r22
 2d6:	89 01       	movw	r16, r18
 2d8:	27 e1       	ldi	r18, 0x17	; 23
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	26 17       	cp	r18, r22
 2de:	08 f4       	brcc	.+2      	; 0x2e2 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x2c>
 2e0:	51 c0       	rjmp	.+162    	; 0x384 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0xce>
 2e2:	4c 33       	cpi	r20, 0x3C	; 60
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x32>
 2e6:	4e c0       	rjmp	.+156    	; 0x384 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0xce>
 2e8:	d8 01       	movw	r26, r16
 2ea:	8c 93       	st	X, r24
 2ec:	95 e0       	ldi	r25, 0x05	; 5
 2ee:	e9 2e       	mov	r14, r25
 2f0:	84 2f       	mov	r24, r20
 2f2:	6e 2d       	mov	r22, r14
 2f4:	0e 94 8a 05 	call	0xb14	; 0xb14 <__udivmodqi4>
 2f8:	28 2f       	mov	r18, r24
 2fa:	92 81       	ldd	r25, Z+2	; 0x02
 2fc:	bc e3       	ldi	r27, 0x3C	; 60
 2fe:	9b 9f       	mul	r25, r27
 300:	c0 01       	movw	r24, r0
 302:	11 24       	eor	r1, r1
 304:	e2 9e       	mul	r14, r18
 306:	80 0d       	add	r24, r0
 308:	91 1d       	adc	r25, r1
 30a:	11 24       	eor	r1, r1
 30c:	bc 01       	movw	r22, r24
 30e:	68 59       	subi	r22, 0x98	; 152
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	45 e0       	ldi	r20, 0x05	; 5
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	ce 01       	movw	r24, r28
 318:	06 96       	adiw	r24, 0x06	; 6
 31a:	0e 94 9c 05 	call	0xb38	; 0xb38 <memcpy_P>
 31e:	fe 01       	movw	r30, r28
 320:	36 96       	adiw	r30, 0x06	; 6
 322:	de 01       	movw	r26, r28
 324:	11 96       	adiw	r26, 0x01	; 1
 326:	01 90       	ld	r0, Z+
 328:	0d 92       	st	X+, r0
 32a:	ea 94       	dec	r14
 32c:	e1 f7       	brne	.-8      	; 0x326 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x70>
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	3c 81       	ldd	r19, Y+4	; 0x04
 334:	2d 81       	ldd	r18, Y+5	; 0x05
 336:	4b 81       	ldd	r20, Y+3	; 0x03
 338:	f8 01       	movw	r30, r16
 33a:	43 83       	std	Z+3, r20	; 0x03
 33c:	34 83       	std	Z+4, r19	; 0x04
 33e:	25 83       	std	Z+5, r18	; 0x05
 340:	fb e0       	ldi	r31, 0x0B	; 11
 342:	ff 15       	cp	r31, r15
 344:	10 f4       	brcc	.+4      	; 0x34a <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x94>
 346:	24 ef       	ldi	r18, 0xF4	; 244
 348:	f2 0e       	add	r15, r18
 34a:	9f 0d       	add	r25, r15
 34c:	9c 30       	cpi	r25, 0x0C	; 12
 34e:	08 f0       	brcs	.+2      	; 0x352 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x9c>
 350:	9c 50       	subi	r25, 0x0C	; 12
 352:	3c e0       	ldi	r19, 0x0C	; 12
 354:	83 9f       	mul	r24, r19
 356:	b0 01       	movw	r22, r0
 358:	11 24       	eor	r1, r1
 35a:	69 0f       	add	r22, r25
 35c:	71 1d       	adc	r23, r1
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	68 5a       	subi	r22, 0xA8	; 168
 364:	7e 4f       	sbci	r23, 0xFE	; 254
 366:	42 e0       	ldi	r20, 0x02	; 2
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	ce 01       	movw	r24, r28
 36c:	06 96       	adiw	r24, 0x06	; 6
 36e:	0e 94 9c 05 	call	0xb38	; 0xb38 <memcpy_P>
 372:	9e 81       	ldd	r25, Y+6	; 0x06
 374:	8f 81       	ldd	r24, Y+7	; 0x07
 376:	d8 01       	movw	r26, r16
 378:	11 96       	adiw	r26, 0x01	; 1
 37a:	9c 93       	st	X, r25
 37c:	11 97       	sbiw	r26, 0x01	; 1
 37e:	12 96       	adiw	r26, 0x02	; 2
 380:	8c 93       	st	X, r24
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	2a 96       	adiw	r28, 0x0a	; 10
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	08 95       	ret

0000039e <_ZN5Clock8setClockEhh>:
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Clock::setClock(byte Hour, byte Minute)
{
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <_ZN5Clock8setClockEhh+0x14>
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <_ZN5Clock8setClockEhh+0x16>
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <_ZN5Clock8setClockEhh+0x18>
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	6c 01       	movw	r12, r24
    stdReturnType ReturnValue = E_NOT_OK;
    ClockWordsType ClockWords;

    /* ----- Implementation ----------------------------------------------- */
    ReturnValue = E_OK;
    if(getClockWords(Hour, Minute, &ClockWords) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3bc:	9e 01       	movw	r18, r28
 3be:	2f 5f       	subi	r18, 0xFF	; 255
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_ZN5Clock13getClockWordsEhhP14ClockWordsType>
 3c6:	11 e0       	ldi	r17, 0x01	; 1
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	09 f0       	breq	.+2      	; 0x3ce <_ZN5Clock8setClockEhh+0x30>
 3cc:	10 e0       	ldi	r17, 0x00	; 0

    if(ClockWords.ShowItIs) {
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	88 23       	and	r24, r24
 3d2:	a1 f0       	breq	.+40     	; 0x3fc <_ZN5Clock8setClockEhh+0x5e>
        if(pDisplay->setWord(DISPLAY_WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	f6 01       	movw	r30, r12
 3da:	80 81       	ld	r24, Z
 3dc:	91 81       	ldd	r25, Z+1	; 0x01
 3de:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display7setWordE15DisplayWordTypeh>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <_ZN5Clock8setClockEhh+0x4a>
 3e6:	11 e0       	ldi	r17, 0x01	; 1
        if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	f6 01       	movw	r30, r12
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display7setWordE15DisplayWordTypeh>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	09 f4       	brne	.+2      	; 0x3fc <_ZN5Clock8setClockEhh+0x5e>
 3fa:	11 e0       	ldi	r17, 0x01	; 1
 3fc:	5e 01       	movw	r10, r28
 3fe:	f2 e0       	ldi	r31, 0x02	; 2
 400:	af 0e       	add	r10, r31
 402:	b1 1c       	adc	r11, r1
 404:	7e 01       	movw	r14, r28
 406:	84 e0       	ldi	r24, 0x04	; 4
 408:	e8 0e       	add	r14, r24
 40a:	f1 1c       	adc	r15, r1
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
 40c:	f5 01       	movw	r30, r10
 40e:	61 91       	ld	r22, Z+
 410:	5f 01       	movw	r10, r30
 412:	66 23       	and	r22, r22
 414:	61 f0       	breq	.+24     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	f6 01       	movw	r30, r12
 41a:	80 81       	ld	r24, Z
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display7setWordE15DisplayWordTypeh>
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	09 f4       	brne	.+2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 426:	11 e0       	ldi	r17, 0x01	; 1
    if(ClockWords.ShowItIs) {
        if(pDisplay->setWord(DISPLAY_WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
        if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
 428:	ae 14       	cp	r10, r14
 42a:	bf 04       	cpc	r11, r15
 42c:	79 f7       	brne	.-34     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 42e:	5e 01       	movw	r10, r28
 430:	f7 e0       	ldi	r31, 0x07	; 7
 432:	af 0e       	add	r10, r31
 434:	b1 1c       	adc	r11, r1
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != DISPLAY_WORD_NONE; Index++) {
 436:	f7 01       	movw	r30, r14
 438:	61 91       	ld	r22, Z+
 43a:	7f 01       	movw	r14, r30
 43c:	66 23       	and	r22, r22
 43e:	61 f0       	breq	.+24     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
        if(pDisplay->setWord(ClockWords.MinuteWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	f6 01       	movw	r30, r12
 444:	80 81       	ld	r24, Z
 446:	91 81       	ldd	r25, Z+1	; 0x01
 448:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display7setWordE15DisplayWordTypeh>
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	09 f4       	brne	.+2      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 450:	11 e0       	ldi	r17, 0x01	; 1

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != DISPLAY_WORD_NONE; Index++) {
 452:	ea 14       	cp	r14, r10
 454:	fb 04       	cpc	r15, r11
 456:	79 f7       	brne	.-34     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
        if(pDisplay->setWord(ClockWords.MinuteWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }
    return ReturnValue;
} /* show */
 458:	81 2f       	mov	r24, r17
 45a:	26 96       	adiw	r28, 0x06	; 6
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	df 90       	pop	r13
 472:	cf 90       	pop	r12
 474:	bf 90       	pop	r11
 476:	af 90       	pop	r10
 478:	08 95       	ret

0000047a <_ZN7Display23getWordIlluminationFastE15DisplayWordType.isra.1>:
void Display::setPixelFast(byte Index)
{
    byte Row = Index / DISPLAY_NUMBER_OF_COLUMNS;
    byte Column = Index % DISPLAY_NUMBER_OF_COLUMNS;

    setPixelFast(Column,  Row);
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	00 d0       	rcall	.+0      	; 0x480 <_ZN7Display23getWordIlluminationFastE15DisplayWordType.isra.1+0x6>
 480:	1f 92       	push	r1
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	bc 01       	movw	r22, r24
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	86 0f       	add	r24, r22
 490:	97 1f       	adc	r25, r23
 492:	bc 01       	movw	r22, r24
 494:	68 57       	subi	r22, 0x78	; 120
 496:	7e 4f       	sbci	r23, 0xFE	; 254
 498:	43 e0       	ldi	r20, 0x03	; 3
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	ce 01       	movw	r24, r28
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	0e 94 9c 05 	call	0xb38	; 0xb38 <memcpy_P>
 4a4:	69 81       	ldd	r22, Y+1	; 0x01
 4a6:	7a 81       	ldd	r23, Y+2	; 0x02
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <_ZN7DisplayC1Ehhh>:
 4b6:	ef 92       	push	r14
 4b8:	ff 92       	push	r15
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <_ZN7DisplayC1Ehhh+0xc>
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	7c 01       	movw	r14, r24
 4c8:	16 2f       	mov	r17, r22
 4ca:	6a e0       	ldi	r22, 0x0A	; 10
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	2a 83       	std	Y+2, r18	; 0x02
 4d0:	49 83       	std	Y+1, r20	; 0x01
 4d2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZN6WS2812C1Eh>
 4d6:	f7 01       	movw	r30, r14
 4d8:	ea 5a       	subi	r30, 0xAA	; 170
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	10 83       	st	Z, r17
 4de:	31 96       	adiw	r30, 0x01	; 1
 4e0:	49 81       	ldd	r20, Y+1	; 0x01
 4e2:	40 83       	st	Z, r20
 4e4:	31 96       	adiw	r30, 0x01	; 1
 4e6:	2a 81       	ldd	r18, Y+2	; 0x02
 4e8:	20 83       	st	Z, r18
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	f7 01       	movw	r30, r14
 4ee:	80 83       	st	Z, r24
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	1f 91       	pop	r17
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	08 95       	ret

00000500 <_ZN7DisplayD1Ev>:
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_ZN6WS2812D1Ev>

00000506 <_ZN7Display21transformToSerpentineEhh>:
 506:	40 fd       	sbrc	r20, 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <_ZN7Display21transformToSerpentineEhh+0x8>
 50a:	86 2f       	mov	r24, r22
 50c:	02 c0       	rjmp	.+4      	; 0x512 <_ZN7Display21transformToSerpentineEhh+0xc>
 50e:	8a e0       	ldi	r24, 0x0A	; 10
 510:	86 1b       	sub	r24, r22
 512:	9b e0       	ldi	r25, 0x0B	; 11
 514:	49 9f       	mul	r20, r25
 516:	80 0d       	add	r24, r0
 518:	11 24       	eor	r1, r1
 51a:	08 95       	ret

0000051c <_ZN7Display8setPixelEhh>:
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	ec 01       	movw	r28, r24
 522:	0e 94 83 02 	call	0x506	; 0x506 <_ZN7Display21transformToSerpentineEhh>
 526:	fe 01       	movw	r30, r28
 528:	ea 5a       	subi	r30, 0xAA	; 170
 52a:	fe 4f       	sbci	r31, 0xFE	; 254
 52c:	20 81       	ld	r18, Z
 52e:	31 81       	ldd	r19, Z+1	; 0x01
 530:	42 81       	ldd	r20, Z+2	; 0x02
 532:	68 2f       	mov	r22, r24
 534:	ce 01       	movw	r24, r28
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <_ZN6WS28128setPixelEh15WS2812PixelType>

00000540 <_ZN7Display7setWordE15DisplayWordTypeh>:
 540:	df 92       	push	r13
 542:	ef 92       	push	r14
 544:	ff 92       	push	r15
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	00 d0       	rcall	.+0      	; 0x550 <_ZN7Display7setWordE15DisplayWordTypeh+0x10>
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	7c 01       	movw	r14, r24
 556:	14 2f       	mov	r17, r20
 558:	6b 31       	cpi	r22, 0x1B	; 27
 55a:	d0 f4       	brcc	.+52     	; 0x590 <_ZN7Display7setWordE15DisplayWordTypeh+0x50>
 55c:	86 2f       	mov	r24, r22
 55e:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN7Display23getWordIlluminationFastE15DisplayWordType.isra.1>
 562:	06 2f       	mov	r16, r22
 564:	11 11       	cpse	r17, r1
 566:	01 c0       	rjmp	.+2      	; 0x56a <_ZN7Display7setWordE15DisplayWordTypeh+0x2a>
 568:	18 2f       	mov	r17, r24
 56a:	d1 2c       	mov	r13, r1
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	d1 16       	cp	r13, r17
 570:	81 f0       	breq	.+32     	; 0x592 <_ZN7Display7setWordE15DisplayWordTypeh+0x52>
 572:	40 2f       	mov	r20, r16
 574:	6d 2d       	mov	r22, r13
 576:	67 0f       	add	r22, r23
 578:	c7 01       	movw	r24, r14
 57a:	29 83       	std	Y+1, r18	; 0x01
 57c:	7a 83       	std	Y+2, r23	; 0x02
 57e:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN7Display8setPixelEhh>
 582:	29 81       	ldd	r18, Y+1	; 0x01
 584:	7a 81       	ldd	r23, Y+2	; 0x02
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	09 f4       	brne	.+2      	; 0x58c <_ZN7Display7setWordE15DisplayWordTypeh+0x4c>
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	d3 94       	inc	r13
 58e:	ef cf       	rjmp	.-34     	; 0x56e <_ZN7Display7setWordE15DisplayWordTypeh+0x2e>
 590:	21 e0       	ldi	r18, 0x01	; 1
 592:	82 2f       	mov	r24, r18
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	ff 90       	pop	r15
 5a2:	ef 90       	pop	r14
 5a4:	df 90       	pop	r13
 5a6:	08 95       	ret

000005a8 <_ZN7Display10clearPixelEhh>:
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearPixel(byte Column, byte Row)
{
 5a8:	0f 93       	push	r16
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
    /* if led stripe is snake or serpentine then odd row: count from right to left */
    return Pixels.setPixel(transformToSerpentine(Column,  Row), 0, 0, 0);
 5b0:	0e 94 83 02 	call	0x506	; 0x506 <_ZN7Display21transformToSerpentineEhh>
 5b4:	00 e0       	ldi	r16, 0x00	; 0
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	68 2f       	mov	r22, r24
 5bc:	ce 01       	movw	r24, r28
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN6WS28128setPixelEhhhh>
#else
    return Pixels.setPixel((Row * DISPLAY_NUMBER_OF_COLUMNS) + Column, 0, 0, 0);
#endif
} /* clearPixel */
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	0f 91       	pop	r16
 5ca:	08 95       	ret

000005cc <_ZN7Display9clearWordE15DisplayWordType>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearWord(DisplayWordType Word)
{
 5cc:	df 92       	push	r13
 5ce:	ef 92       	push	r14
 5d0:	ff 92       	push	r15
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	00 d0       	rcall	.+0      	; 0x5dc <_ZN7Display9clearWordE15DisplayWordType+0x10>
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
    stdReturnType ReturnValue = E_NOT_OK;
    DisplayWordIlluminationType WordIllu;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
 5e0:	6b 31       	cpi	r22, 0x1B	; 27
 5e2:	c8 f4       	brcc	.+50     	; 0x616 <_ZN7Display9clearWordE15DisplayWordType+0x4a>
 5e4:	8c 01       	movw	r16, r24
        ReturnValue = E_OK;
        WordIllu = getWordIlluminationFast(Word);
 5e6:	86 2f       	mov	r24, r22
 5e8:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN7Display23getWordIlluminationFastE15DisplayWordType.isra.1>
 5ec:	e6 2e       	mov	r14, r22
 5ee:	f8 2e       	mov	r15, r24

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 5f0:	d1 2c       	mov	r13, r1
{
    stdReturnType ReturnValue = E_NOT_OK;
    DisplayWordIlluminationType WordIllu;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
        ReturnValue = E_OK;
 5f2:	20 e0       	ldi	r18, 0x00	; 0
        WordIllu = getWordIlluminationFast(Word);

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 5f4:	df 14       	cp	r13, r15
 5f6:	80 f4       	brcc	.+32     	; 0x618 <_ZN7Display9clearWordE15DisplayWordType+0x4c>
            if(clearPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
 5f8:	4e 2d       	mov	r20, r14
 5fa:	6d 2d       	mov	r22, r13
 5fc:	67 0f       	add	r22, r23
 5fe:	c8 01       	movw	r24, r16
 600:	29 83       	std	Y+1, r18	; 0x01
 602:	7a 83       	std	Y+2, r23	; 0x02
 604:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN7Display10clearPixelEhh>
 608:	29 81       	ldd	r18, Y+1	; 0x01
 60a:	7a 81       	ldd	r23, Y+2	; 0x02
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	09 f4       	brne	.+2      	; 0x612 <_ZN7Display9clearWordE15DisplayWordType+0x46>
 610:	21 e0       	ldi	r18, 0x01	; 1

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
        ReturnValue = E_OK;
        WordIllu = getWordIlluminationFast(Word);

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 612:	d3 94       	inc	r13
 614:	ef cf       	rjmp	.-34     	; 0x5f4 <_ZN7Display9clearWordE15DisplayWordType+0x28>
            if(clearPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
        }
    } else {
        ReturnValue = E_NOT_OK;
 616:	21 e0       	ldi	r18, 0x01	; 1
    }
    return ReturnValue;
} /* clearWord */
 618:	82 2f       	mov	r24, r18
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	ef 90       	pop	r14
 62a:	df 90       	pop	r13
 62c:	08 95       	ret

0000062e <_ZN7Display13clearAllWordsEv>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearAllWords()
{
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	8c 01       	movw	r16, r24
    stdReturnType ReturnValue = E_OK;

    for(byte i = DISPLAY_WORD_ES; i < DISPLAY_WORD_NUMBER_OF_WORDS; i++) if(clearWord((DisplayWordType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 638:	c1 e0       	ldi	r28, 0x01	; 1
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearAllWords()
{
    stdReturnType ReturnValue = E_OK;
 63a:	d0 e0       	ldi	r29, 0x00	; 0

    for(byte i = DISPLAY_WORD_ES; i < DISPLAY_WORD_NUMBER_OF_WORDS; i++) if(clearWord((DisplayWordType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 63c:	6c 2f       	mov	r22, r28
 63e:	c8 01       	movw	r24, r16
 640:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN7Display9clearWordE15DisplayWordType>
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	09 f4       	brne	.+2      	; 0x64a <_ZN7Display13clearAllWordsEv+0x1c>
 648:	d1 e0       	ldi	r29, 0x01	; 1
 64a:	cf 5f       	subi	r28, 0xFF	; 255
 64c:	cb 31       	cpi	r28, 0x1B	; 27
 64e:	b1 f7       	brne	.-20     	; 0x63c <_ZN7Display13clearAllWordsEv+0xe>
    return ReturnValue;
} /* clearAllWords */
 650:	8d 2f       	mov	r24, r29
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	08 95       	ret

0000065c <_ZN6WS2812D1Ev>:
        OffsetBlue = 2;
    }
    if(ColorOrder == WS2812_COLOR_ORDER_RGB) {
        OffsetRed = 0;
        OffsetGreen = 1;
        OffsetBlue = 2;
 65c:	08 95       	ret

0000065e <_ZN6WS28126setPinEh>:
 65e:	dc 01       	movw	r26, r24
 660:	64 31       	cpi	r22, 0x14	; 20
 662:	e0 f4       	brcc	.+56     	; 0x69c <_ZN6WS28126setPinEh+0x3e>
 664:	86 2f       	mov	r24, r22
 666:	26 2f       	mov	r18, r22
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	f9 01       	movw	r30, r18
 66c:	e7 52       	subi	r30, 0x27	; 39
 66e:	fe 4f       	sbci	r31, 0xFE	; 254
 670:	e4 91       	lpm	r30, Z
 672:	ec 93       	st	X, r30
 674:	f9 01       	movw	r30, r18
 676:	e3 51       	subi	r30, 0x13	; 19
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	e4 91       	lpm	r30, Z
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	ef 5f       	subi	r30, 0xFF	; 255
 684:	fd 4f       	sbci	r31, 0xFD	; 253
 686:	25 91       	lpm	r18, Z+
 688:	34 91       	lpm	r19, Z
 68a:	12 96       	adiw	r26, 0x02	; 2
 68c:	3c 93       	st	X, r19
 68e:	2e 93       	st	-X, r18
 690:	11 97       	sbiw	r26, 0x01	; 1
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	0e 94 4e 05 	call	0xa9c	; 0xa9c <pinMode>
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	08 95       	ret
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret

000006a0 <_ZN6WS2812C1Eh>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	ec 01       	movw	r28, r24
 6a6:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN6WS28126setPinEh>
 6aa:	fe 01       	movw	r30, r28
 6ac:	e3 5b       	subi	r30, 0xB3	; 179
 6ae:	fe 4f       	sbci	r31, 0xFE	; 254
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	80 83       	st	Z, r24
 6b4:	31 96       	adiw	r30, 0x01	; 1
 6b6:	10 82       	st	Z, r1
 6b8:	11 82       	std	Z+1, r1	; 0x01
 6ba:	12 82       	std	Z+2, r1	; 0x02
 6bc:	13 82       	std	Z+3, r1	; 0x03
 6be:	eb 54       	subi	r30, 0x4B	; 75
 6c0:	f1 40       	sbci	r31, 0x01	; 1
 6c2:	8a e4       	ldi	r24, 0x4A	; 74
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	df 01       	movw	r26, r30
 6c8:	9c 01       	movw	r18, r24
 6ca:	1d 92       	st	X+, r1
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	30 40       	sbci	r19, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <_ZN6WS2812C1Eh+0x2a>
 6d2:	ef 5a       	subi	r30, 0xAF	; 175
 6d4:	fe 4f       	sbci	r31, 0xFE	; 254
 6d6:	10 82       	st	Z, r1
 6d8:	32 97       	sbiw	r30, 0x02	; 2
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 83       	st	Z, r24
 6de:	cd 5a       	subi	r28, 0xAD	; 173
 6e0:	de 4f       	sbci	r29, 0xFE	; 254
 6e2:	82 e0       	ldi	r24, 0x02	; 2
 6e4:	88 83       	st	Y, r24
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <_ZN6WS28128setPixelEh15WS2812PixelType>:
 6ec:	6e 36       	cpi	r22, 0x6E	; 110
 6ee:	e8 f4       	brcc	.+58     	; 0x72a <_ZN6WS28128setPixelEh15WS2812PixelType+0x3e>
 6f0:	fc 01       	movw	r30, r24
 6f2:	ee 5a       	subi	r30, 0xAE	; 174
 6f4:	fe 4f       	sbci	r31, 0xFE	; 254
 6f6:	50 81       	ld	r21, Z
 6f8:	fc 01       	movw	r30, r24
 6fa:	e6 0f       	add	r30, r22
 6fc:	f1 1d       	adc	r31, r1
 6fe:	bf 01       	movw	r22, r30
 700:	e5 0f       	add	r30, r21
 702:	f1 1d       	adc	r31, r1
 704:	23 83       	std	Z+3, r18	; 0x03
 706:	fc 01       	movw	r30, r24
 708:	ed 5a       	subi	r30, 0xAD	; 173
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	20 81       	ld	r18, Z
 70e:	fb 01       	movw	r30, r22
 710:	e2 0f       	add	r30, r18
 712:	f1 1d       	adc	r31, r1
 714:	33 83       	std	Z+3, r19	; 0x03
 716:	fc 01       	movw	r30, r24
 718:	ec 5a       	subi	r30, 0xAC	; 172
 71a:	fe 4f       	sbci	r31, 0xFE	; 254
 71c:	80 81       	ld	r24, Z
 71e:	fb 01       	movw	r30, r22
 720:	e8 0f       	add	r30, r24
 722:	f1 1d       	adc	r31, r1
 724:	43 83       	std	Z+3, r20	; 0x03
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	08 95       	ret
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	08 95       	ret

0000072e <_ZN6WS28128setPixelEhhhh>:
 72e:	0f 93       	push	r16
 730:	6e 36       	cpi	r22, 0x6E	; 110
 732:	e8 f4       	brcc	.+58     	; 0x76e <_ZN6WS28128setPixelEhhhh+0x40>
 734:	fc 01       	movw	r30, r24
 736:	ee 5a       	subi	r30, 0xAE	; 174
 738:	fe 4f       	sbci	r31, 0xFE	; 254
 73a:	30 81       	ld	r19, Z
 73c:	fc 01       	movw	r30, r24
 73e:	e6 0f       	add	r30, r22
 740:	f1 1d       	adc	r31, r1
 742:	bf 01       	movw	r22, r30
 744:	e3 0f       	add	r30, r19
 746:	f1 1d       	adc	r31, r1
 748:	43 83       	std	Z+3, r20	; 0x03
 74a:	fc 01       	movw	r30, r24
 74c:	ed 5a       	subi	r30, 0xAD	; 173
 74e:	fe 4f       	sbci	r31, 0xFE	; 254
 750:	30 81       	ld	r19, Z
 752:	fb 01       	movw	r30, r22
 754:	e3 0f       	add	r30, r19
 756:	f1 1d       	adc	r31, r1
 758:	23 83       	std	Z+3, r18	; 0x03
 75a:	fc 01       	movw	r30, r24
 75c:	ec 5a       	subi	r30, 0xAC	; 172
 75e:	fe 4f       	sbci	r31, 0xFE	; 254
 760:	80 81       	ld	r24, Z
 762:	fb 01       	movw	r30, r22
 764:	e8 0f       	add	r30, r24
 766:	f1 1d       	adc	r31, r1
 768:	03 83       	std	Z+3, r16	; 0x03
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	01 c0       	rjmp	.+2      	; 0x770 <_ZN6WS28128setPixelEhhhh+0x42>
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	0f 91       	pop	r16
 772:	08 95       	ret

00000774 <_ZN6WS28128sendDataEPKhj>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void  WS2812::sendData(const byte* Data, uint16_t DataLength)
{
 774:	fc 01       	movw	r30, r24
    uint8_t BitCounter;
    uint8_t PortMaskLow;
    uint8_t PortMaskHigh;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 776:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 778:	f8 94       	cli
    {
        PortMaskLow = ~PinMask & *PortOutputRegister;
 77a:	90 81       	ld	r25, Z
 77c:	a1 81       	ldd	r26, Z+1	; 0x01
 77e:	b2 81       	ldd	r27, Z+2	; 0x02
 780:	3c 91       	ld	r19, X
 782:	89 2f       	mov	r24, r25
 784:	80 95       	com	r24
 786:	83 23       	and	r24, r19
        PortMaskHigh = PinMask | *PortOutputRegister;
 788:	3c 91       	ld	r19, X
 78a:	93 2b       	or	r25, r19
 78c:	fb 01       	movw	r30, r22
 78e:	46 0f       	add	r20, r22
 790:	57 1f       	adc	r21, r23

        for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 792:	e4 17       	cp	r30, r20
 794:	f5 07       	cpc	r31, r21
 796:	81 f0       	breq	.+32     	; 0x7b8 <skipone834+0x8>
                : [BitCounter]      "=&d" (BitCounter)
                : [CurrentByte]     "r"   (Data[ByteCounter]),
                  [Port]            "x"   (PortOutputRegister),
                  [PortMaskHigh]    "r"   (PortMaskHigh),
                  [PortMaskLow]     "r"   (PortMaskLow)
            );
 798:	31 91       	ld	r19, Z+
 79a:	68 e0       	ldi	r22, 0x08	; 8

0000079c <loop834>:
 79c:	9c 93       	st	X, r25
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <loop834+0x4>
 7a0:	37 ff       	sbrs	r19, 7
 7a2:	8c 93       	st	X, r24
 7a4:	33 0f       	add	r19, r19
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <loop834+0xc>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <loop834+0xe>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <loop834+0x10>
 7ac:	08 f4       	brcc	.+2      	; 0x7b0 <skipone834>
 7ae:	8c 93       	st	X, r24

000007b0 <skipone834>:
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <skipone834+0x2>
 7b2:	6a 95       	dec	r22
 7b4:	99 f7       	brne	.-26     	; 0x79c <loop834>
 7b6:	ed cf       	rjmp	.-38     	; 0x792 <_ZN6WS28128sendDataEPKhj+0x1e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7b8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 7ba:	08 95       	ret

000007bc <_ZN6WS28124showEv.part.4>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
#if (WS2812_RESET_TIMER == STD_ON)
stdReturnType WS2812::show()
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	ca 54       	subi	r28, 0x4A	; 74
 7d2:	d1 40       	sbci	r29, 0x01	; 1
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	8c 01       	movw	r16, r24
    byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
    if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
#endif
        if(Brightness != 255) {
 7e0:	fc 01       	movw	r30, r24
 7e2:	e3 5b       	subi	r30, 0xB3	; 179
 7e4:	fe 4f       	sbci	r31, 0xFE	; 254
 7e6:	40 81       	ld	r20, Z
 7e8:	4f 3f       	cpi	r20, 0xFF	; 255
 7ea:	09 f4       	brne	.+2      	; 0x7ee <_ZN6WS28124showEv.part.4+0x32>
 7ec:	52 c0       	rjmp	.+164    	; 0x892 <_ZN6WS28124showEv.part.4+0xd6>
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
    for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
    {
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_RED(i)], Pixels[WS2812_POS_ABS_RED(i)]);
 7ee:	35 96       	adiw	r30, 0x05	; 5
 7f0:	a0 81       	ld	r26, Z
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 7f4:	31 96       	adiw	r30, 0x01	; 1
 7f6:	e0 81       	ld	r30, Z
 7f8:	ce 2e       	mov	r12, r30
 7fa:	d1 2c       	mov	r13, r1
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 7fc:	8c 5a       	subi	r24, 0xAC	; 172
 7fe:	9e 4f       	sbci	r25, 0xFE	; 254
 800:	fc 01       	movw	r30, r24
 802:	60 81       	ld	r22, Z
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	9c 01       	movw	r18, r24
 80c:	2a 0f       	add	r18, r26
 80e:	3b 1f       	adc	r19, r27
 810:	78 01       	movw	r14, r16
 812:	e2 0e       	add	r14, r18
 814:	f3 1e       	adc	r15, r19
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
    for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
    {
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_RED(i)], Pixels[WS2812_POS_ABS_RED(i)]);
 816:	f7 01       	movw	r30, r14
 818:	e3 80       	ldd	r14, Z+3	; 0x03
 81a:	e1 e0       	ldi	r30, 0x01	; 1
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	ec 0f       	add	r30, r28
 820:	fd 1f       	adc	r31, r29
 822:	2e 0f       	add	r18, r30
 824:	3f 1f       	adc	r19, r31
    // functions
    void sendData(const byte*, uint16_t);
    void dimmPixels(byte*, uint16_t);
    void dimmPixel(WS2812PixelType*, WS2812PixelType);
    void dimmPixel(WS2812PixelType*, byte, byte, byte);
    void dimmColor(byte* ColorDimmed, byte Color) { *ColorDimmed = (Color * Brightness) >> 8; }
 826:	e4 9e       	mul	r14, r20
 828:	70 01       	movw	r14, r0
 82a:	11 24       	eor	r1, r1
 82c:	f9 01       	movw	r30, r18
 82e:	f0 82       	st	Z, r15
 830:	9c 01       	movw	r18, r24
 832:	2c 0d       	add	r18, r12
 834:	3d 1d       	adc	r19, r13
 836:	78 01       	movw	r14, r16
 838:	e2 0e       	add	r14, r18
 83a:	f3 1e       	adc	r15, r19
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 83c:	f7 01       	movw	r30, r14
 83e:	e3 80       	ldd	r14, Z+3	; 0x03
 840:	e1 e0       	ldi	r30, 0x01	; 1
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	ec 0f       	add	r30, r28
 846:	fd 1f       	adc	r31, r29
 848:	2e 0f       	add	r18, r30
 84a:	3f 1f       	adc	r19, r31
 84c:	e4 9e       	mul	r14, r20
 84e:	70 01       	movw	r14, r0
 850:	11 24       	eor	r1, r1
 852:	f9 01       	movw	r30, r18
 854:	f0 82       	st	Z, r15
 856:	9c 01       	movw	r18, r24
 858:	26 0f       	add	r18, r22
 85a:	37 1f       	adc	r19, r23
 85c:	78 01       	movw	r14, r16
 85e:	e2 0e       	add	r14, r18
 860:	f3 1e       	adc	r15, r19
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 862:	f7 01       	movw	r30, r14
 864:	e3 80       	ldd	r14, Z+3	; 0x03
 866:	e1 e0       	ldi	r30, 0x01	; 1
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	ec 0f       	add	r30, r28
 86c:	fd 1f       	adc	r31, r29
 86e:	2e 0f       	add	r18, r30
 870:	3f 1f       	adc	r19, r31
 872:	e4 9e       	mul	r14, r20
 874:	70 01       	movw	r14, r0
 876:	11 24       	eor	r1, r1
 878:	f9 01       	movw	r30, r18
 87a:	f0 82       	st	Z, r15
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
    for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
 87c:	03 96       	adiw	r24, 0x03	; 3
 87e:	8a 34       	cpi	r24, 0x4A	; 74
 880:	f1 e0       	ldi	r31, 0x01	; 1
 882:	9f 07       	cpc	r25, r31
 884:	11 f6       	brne	.-124    	; 0x80a <_ZN6WS28124showEv.part.4+0x4e>
#if (WS2812_RESET_TIMER == STD_ON)
    if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
#endif
        if(Brightness != 255) {
            dimmPixels(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
            sendData(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 886:	4a e4       	ldi	r20, 0x4A	; 74
 888:	51 e0       	ldi	r21, 0x01	; 1
 88a:	be 01       	movw	r22, r28
 88c:	6f 5f       	subi	r22, 0xFF	; 255
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	05 c0       	rjmp	.+10     	; 0x89c <_ZN6WS28124showEv.part.4+0xe0>
        } else {
            sendData(Pixels, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 892:	4a e4       	ldi	r20, 0x4A	; 74
 894:	51 e0       	ldi	r21, 0x01	; 1
 896:	bc 01       	movw	r22, r24
 898:	6d 5f       	subi	r22, 0xFD	; 253
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	c8 01       	movw	r24, r16
 89e:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN6WS28128sendDataEPKhj>
        }
#if (WS2812_RESET_TIMER == STD_ON)
        ResetTimer = micros();
 8a2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <micros>
 8a6:	f8 01       	movw	r30, r16
 8a8:	e2 5b       	subi	r30, 0xB2	; 178
 8aa:	fe 4f       	sbci	r31, 0xFE	; 254
 8ac:	60 83       	st	Z, r22
 8ae:	71 83       	std	Z+1, r23	; 0x01
 8b0:	82 83       	std	Z+2, r24	; 0x02
 8b2:	93 83       	std	Z+3, r25	; 0x03
        return E_OK;
    } else {
        return E_NOT_OK;
    }
#endif
} /* show */
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	c6 5b       	subi	r28, 0xB6	; 182
 8b8:	de 4f       	sbci	r29, 0xFE	; 254
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	f8 94       	cli
 8be:	de bf       	out	0x3e, r29	; 62
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	cd bf       	out	0x3d, r28	; 61
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	08 95       	ret

000008d6 <_ZN6WS28124showEv>:
#if (WS2812_RESET_TIMER == STD_ON)
stdReturnType WS2812::show()
#elif (WS2812_RESET_TIMER == STD_OFF)
void WS2812::show()
#endif
{
 8d6:	0f 93       	push	r16
 8d8:	1f 93       	push	r17
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	ec 01       	movw	r28, r24
    byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
    if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
 8e0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <micros>
 8e4:	fe 01       	movw	r30, r28
 8e6:	e2 5b       	subi	r30, 0xB2	; 178
 8e8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ea:	00 81       	ld	r16, Z
 8ec:	11 81       	ldd	r17, Z+1	; 0x01
 8ee:	22 81       	ldd	r18, Z+2	; 0x02
 8f0:	33 81       	ldd	r19, Z+3	; 0x03
 8f2:	dc 01       	movw	r26, r24
 8f4:	cb 01       	movw	r24, r22
 8f6:	80 1b       	sub	r24, r16
 8f8:	91 0b       	sbc	r25, r17
 8fa:	a2 0b       	sbc	r26, r18
 8fc:	b3 0b       	sbc	r27, r19
 8fe:	c3 97       	sbiw	r24, 0x33	; 51
 900:	a1 05       	cpc	r26, r1
 902:	b1 05       	cpc	r27, r1
 904:	20 f4       	brcc	.+8      	; 0x90e <__stack+0xf>
 906:	01 2b       	or	r16, r17
 908:	02 2b       	or	r16, r18
 90a:	03 2b       	or	r16, r19
 90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0x1d>
 90e:	ce 01       	movw	r24, r28
        return E_OK;
    } else {
        return E_NOT_OK;
    }
#endif
} /* show */
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_ZN6WS28124showEv.part.4>
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	1f 91       	pop	r17
 924:	0f 91       	pop	r16
 926:	08 95       	ret

00000928 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 928:	08 95       	ret

0000092a <main>:

int main(void)
{
	init();
 92a:	0e 94 13 05 	call	0xa26	; 0xa26 <init>

	initVariant();
 92e:	0e 94 94 04 	call	0x928	; 0x928 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 932:	0e 94 2c 01 	call	0x258	; 0x258 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 936:	c0 e0       	ldi	r28, 0x00	; 0
 938:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 93a:	0e 94 2d 01 	call	0x25a	; 0x25a <loop>
		if (serialEventRun) serialEventRun();
 93e:	20 97       	sbiw	r28, 0x00	; 0
 940:	e1 f3       	breq	.-8      	; 0x93a <main+0x10>
 942:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 946:	f9 cf       	rjmp	.-14     	; 0x93a <main+0x10>

00000948 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 948:	1f 92       	push	r1
 94a:	0f 92       	push	r0
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	0f 92       	push	r0
 950:	11 24       	eor	r1, r1
 952:	2f 93       	push	r18
 954:	3f 93       	push	r19
 956:	8f 93       	push	r24
 958:	9f 93       	push	r25
 95a:	af 93       	push	r26
 95c:	bf 93       	push	r27
 95e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis>
 962:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x1>
 966:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <timer0_millis+0x2>
 96a:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <timer0_millis+0x3>
 96e:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <timer0_fract>
 972:	23 e0       	ldi	r18, 0x03	; 3
 974:	23 0f       	add	r18, r19
 976:	2d 37       	cpi	r18, 0x7D	; 125
 978:	20 f4       	brcc	.+8      	; 0x982 <__vector_16+0x3a>
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	a1 1d       	adc	r26, r1
 97e:	b1 1d       	adc	r27, r1
 980:	05 c0       	rjmp	.+10     	; 0x98c <__vector_16+0x44>
 982:	26 e8       	ldi	r18, 0x86	; 134
 984:	23 0f       	add	r18, r19
 986:	02 96       	adiw	r24, 0x02	; 2
 988:	a1 1d       	adc	r26, r1
 98a:	b1 1d       	adc	r27, r1
 98c:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <timer0_fract>
 990:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timer0_millis>
 994:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <timer0_millis+0x1>
 998:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <timer0_millis+0x2>
 99c:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <timer0_millis+0x3>
 9a0:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 9a4:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 9a8:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 9ac:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	a1 1d       	adc	r26, r1
 9b4:	b1 1d       	adc	r27, r1
 9b6:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer0_overflow_count>
 9ba:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer0_overflow_count+0x1>
 9be:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer0_overflow_count+0x2>
 9c2:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer0_overflow_count+0x3>
 9c6:	bf 91       	pop	r27
 9c8:	af 91       	pop	r26
 9ca:	9f 91       	pop	r25
 9cc:	8f 91       	pop	r24
 9ce:	3f 91       	pop	r19
 9d0:	2f 91       	pop	r18
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

000009dc <micros>:
 9dc:	3f b7       	in	r19, 0x3f	; 63
 9de:	f8 94       	cli
 9e0:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 9e4:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 9e8:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 9ec:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 9f0:	26 b5       	in	r18, 0x26	; 38
 9f2:	a8 9b       	sbis	0x15, 0	; 21
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <micros+0x24>
 9f6:	2f 3f       	cpi	r18, 0xFF	; 255
 9f8:	19 f0       	breq	.+6      	; 0xa00 <micros+0x24>
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	a1 1d       	adc	r26, r1
 9fe:	b1 1d       	adc	r27, r1
 a00:	3f bf       	out	0x3f, r19	; 63
 a02:	ba 2f       	mov	r27, r26
 a04:	a9 2f       	mov	r26, r25
 a06:	98 2f       	mov	r25, r24
 a08:	88 27       	eor	r24, r24
 a0a:	82 0f       	add	r24, r18
 a0c:	91 1d       	adc	r25, r1
 a0e:	a1 1d       	adc	r26, r1
 a10:	b1 1d       	adc	r27, r1
 a12:	bc 01       	movw	r22, r24
 a14:	cd 01       	movw	r24, r26
 a16:	42 e0       	ldi	r20, 0x02	; 2
 a18:	66 0f       	add	r22, r22
 a1a:	77 1f       	adc	r23, r23
 a1c:	88 1f       	adc	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	4a 95       	dec	r20
 a22:	d1 f7       	brne	.-12     	; 0xa18 <micros+0x3c>
 a24:	08 95       	ret

00000a26 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 a26:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 a28:	84 b5       	in	r24, 0x24	; 36
 a2a:	82 60       	ori	r24, 0x02	; 2
 a2c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 a2e:	84 b5       	in	r24, 0x24	; 36
 a30:	81 60       	ori	r24, 0x01	; 1
 a32:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 a34:	85 b5       	in	r24, 0x25	; 37
 a36:	82 60       	ori	r24, 0x02	; 2
 a38:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 a3a:	85 b5       	in	r24, 0x25	; 37
 a3c:	81 60       	ori	r24, 0x01	; 1
 a3e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 a40:	ee e6       	ldi	r30, 0x6E	; 110
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	80 81       	ld	r24, Z
 a46:	81 60       	ori	r24, 0x01	; 1
 a48:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 a4a:	e1 e8       	ldi	r30, 0x81	; 129
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 a50:	80 81       	ld	r24, Z
 a52:	82 60       	ori	r24, 0x02	; 2
 a54:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 a56:	80 81       	ld	r24, Z
 a58:	81 60       	ori	r24, 0x01	; 1
 a5a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 a5c:	e0 e8       	ldi	r30, 0x80	; 128
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	81 60       	ori	r24, 0x01	; 1
 a64:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 a66:	e1 eb       	ldi	r30, 0xB1	; 177
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	80 81       	ld	r24, Z
 a6c:	84 60       	ori	r24, 0x04	; 4
 a6e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 a70:	e0 eb       	ldi	r30, 0xB0	; 176
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 81       	ld	r24, Z
 a76:	81 60       	ori	r24, 0x01	; 1
 a78:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 a7a:	ea e7       	ldi	r30, 0x7A	; 122
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	80 81       	ld	r24, Z
 a80:	84 60       	ori	r24, 0x04	; 4
 a82:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a84:	80 81       	ld	r24, Z
 a86:	82 60       	ori	r24, 0x02	; 2
 a88:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a8a:	80 81       	ld	r24, Z
 a8c:	81 60       	ori	r24, 0x01	; 1
 a8e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a90:	80 81       	ld	r24, Z
 a92:	80 68       	ori	r24, 0x80	; 128
 a94:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a96:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a9a:	08 95       	ret

00000a9c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	fc 01       	movw	r30, r24
 aa4:	e7 52       	subi	r30, 0x27	; 39
 aa6:	fe 4f       	sbci	r31, 0xFE	; 254
 aa8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 aaa:	fc 01       	movw	r30, r24
 aac:	e3 51       	subi	r30, 0x13	; 19
 aae:	fe 4f       	sbci	r31, 0xFE	; 254
 ab0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 ab2:	88 23       	and	r24, r24
 ab4:	61 f1       	breq	.+88     	; 0xb0e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	fc 01       	movw	r30, r24
 abe:	e5 5f       	subi	r30, 0xF5	; 245
 ac0:	fd 4f       	sbci	r31, 0xFD	; 253
 ac2:	c5 91       	lpm	r28, Z+
 ac4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 ac6:	fc 01       	movw	r30, r24
 ac8:	ef 5f       	subi	r30, 0xFF	; 255
 aca:	fd 4f       	sbci	r31, 0xFD	; 253
 acc:	a5 91       	lpm	r26, Z+
 ace:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 ad0:	61 11       	cpse	r22, r1
 ad2:	09 c0       	rjmp	.+18     	; 0xae6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 ad4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ad6:	f8 94       	cli
		*reg &= ~bit;
 ad8:	88 81       	ld	r24, Y
 ada:	20 95       	com	r18
 adc:	82 23       	and	r24, r18
 ade:	88 83       	st	Y, r24
		*out &= ~bit;
 ae0:	ec 91       	ld	r30, X
 ae2:	2e 23       	and	r18, r30
 ae4:	0b c0       	rjmp	.+22     	; 0xafc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 ae6:	62 30       	cpi	r22, 0x02	; 2
 ae8:	61 f4       	brne	.+24     	; 0xb02 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 aea:	9f b7       	in	r25, 0x3f	; 63
                cli();
 aec:	f8 94       	cli
		*reg &= ~bit;
 aee:	38 81       	ld	r19, Y
 af0:	82 2f       	mov	r24, r18
 af2:	80 95       	com	r24
 af4:	83 23       	and	r24, r19
 af6:	88 83       	st	Y, r24
		*out |= bit;
 af8:	ec 91       	ld	r30, X
 afa:	2e 2b       	or	r18, r30
 afc:	2c 93       	st	X, r18
		SREG = oldSREG;
 afe:	9f bf       	out	0x3f, r25	; 63
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 b02:	8f b7       	in	r24, 0x3f	; 63
                cli();
 b04:	f8 94       	cli
		*reg |= bit;
 b06:	e8 81       	ld	r30, Y
 b08:	2e 2b       	or	r18, r30
 b0a:	28 83       	st	Y, r18
		SREG = oldSREG;
 b0c:	8f bf       	out	0x3f, r24	; 63
	}
}
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	08 95       	ret

00000b14 <__udivmodqi4>:
 b14:	99 1b       	sub	r25, r25
 b16:	79 e0       	ldi	r23, 0x09	; 9
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <__udivmodqi4_ep>

00000b1a <__udivmodqi4_loop>:
 b1a:	99 1f       	adc	r25, r25
 b1c:	96 17       	cp	r25, r22
 b1e:	08 f0       	brcs	.+2      	; 0xb22 <__udivmodqi4_ep>
 b20:	96 1b       	sub	r25, r22

00000b22 <__udivmodqi4_ep>:
 b22:	88 1f       	adc	r24, r24
 b24:	7a 95       	dec	r23
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__udivmodqi4_loop>
 b28:	80 95       	com	r24
 b2a:	08 95       	ret

00000b2c <__tablejump2__>:
 b2c:	ee 0f       	add	r30, r30
 b2e:	ff 1f       	adc	r31, r31
 b30:	05 90       	lpm	r0, Z+
 b32:	f4 91       	lpm	r31, Z
 b34:	e0 2d       	mov	r30, r0
 b36:	09 94       	ijmp

00000b38 <memcpy_P>:
 b38:	fb 01       	movw	r30, r22
 b3a:	dc 01       	movw	r26, r24
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <memcpy_P+0xa>
 b3e:	05 90       	lpm	r0, Z+
 b40:	0d 92       	st	X+, r0
 b42:	41 50       	subi	r20, 0x01	; 1
 b44:	50 40       	sbci	r21, 0x00	; 0
 b46:	d8 f7       	brcc	.-10     	; 0xb3e <memcpy_P+0x6>
 b48:	08 95       	ret

00000b4a <__do_global_dtors>:
 b4a:	11 e0       	ldi	r17, 0x01	; 1
 b4c:	cc e0       	ldi	r28, 0x0C	; 12
 b4e:	d1 e0       	ldi	r29, 0x01	; 1
 b50:	04 c0       	rjmp	.+8      	; 0xb5a <__do_global_dtors+0x10>
 b52:	fe 01       	movw	r30, r28
 b54:	0e 94 96 05 	call	0xb2c	; 0xb2c <__tablejump2__>
 b58:	21 96       	adiw	r28, 0x01	; 1
 b5a:	cd 30       	cpi	r28, 0x0D	; 13
 b5c:	d1 07       	cpc	r29, r17
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__do_global_dtors+0x8>
 b60:	f8 94       	cli

00000b62 <__stop_program>:
 b62:	ff cf       	rjmp	.-2      	; 0xb62 <__stop_program>
