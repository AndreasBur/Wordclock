
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000163  00800100  00800100  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003856  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d66  00000000  00000000  00004006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107a  00000000  00000000  00004d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00005de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018ac  00000000  00000000  00006200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac6  00000000  00000000  00007aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00009572  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__dtors_end>
   4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
   8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
   c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  40:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_16>
  44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

00000068 <_ZN7Display21WordIlluminationTableE>:
  68:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
  78:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
  88:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
  98:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
  a8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
  b8:	03                                                  .

000000b9 <digital_pin_to_bit_mask_PGM>:
  b9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  c9:	04 08 10 20                                         ... 

000000cd <digital_pin_to_port_PGM>:
  cd:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  dd:	03 03 03 03                                         ....

000000e1 <port_to_output_PGM>:
  e1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000eb <port_to_mode_PGM>:
  eb:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000f6 <__ctors_start>:
  f6:	a7 00       	.word	0x00a7	; ????

000000f8 <__ctors_end>:
  f8:	ab 00       	.word	0x00ab	; ????

000000fa <__dtors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d8 e0       	ldi	r29, 0x08	; 8
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a3 36       	cpi	r26, 0x63	; 99
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>

00000116 <__do_global_ctors>:
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	cc e7       	ldi	r28, 0x7C	; 124
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	04 c0       	rjmp	.+8      	; 0x126 <__do_global_ctors+0x10>
 11e:	21 97       	sbiw	r28, 0x01	; 1
 120:	fe 01       	movw	r30, r28
 122:	0e 94 67 02 	call	0x4ce	; 0x4ce <__tablejump2__>
 126:	cb 37       	cpi	r28, 0x7B	; 123
 128:	d1 07       	cpc	r29, r17
 12a:	c9 f7       	brne	.-14     	; 0x11e <__do_global_ctors+0x8>
 12c:	0e 94 8b 01 	call	0x316	; 0x316 <main>
 130:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__do_global_dtors>

00000134 <__bad_interrupt>:
 134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <setup>:

void setup() {
  // put your setup code here, to run once:
  //WordClockDisplay.setChar(2, 0, 10, 20, 30);
  //WcDisplayCharacter.getChar(1,1, &Char);
  WordClockDisplay.setCharacter(DISPLAY_CHARACTER_A_1);
 138:	61 e1       	ldi	r22, 0x11	; 17
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7Display12setCharacterE21DisplayCharactersType>
  WordClockDisplay.setWord(DISPLAY_WORD_DREIVIERTEL);
 142:	69 e0       	ldi	r22, 0x09	; 9
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_ZN7Display7setWordE16DisplayWordsType>

0000014c <loop>:
 
}

void loop() {
 14c:	08 95       	ret

0000014e <_GLOBAL__sub_I_WordClockDisplay>:
ï»¿/*Begining of Auto generated code by Atmel studio */
#include <Arduino.h>
#include "Display.h"
/*End of auto generated code by Atmel studio */

Display WordClockDisplay;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0c 94 af 00 	jmp	0x15e	; 0x15e <_ZN7DisplayC1Ev>

00000156 <_GLOBAL__sub_D_WordClockDisplay>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0c 94 b2 00 	jmp	0x164	; 0x164 <_ZN7DisplayD1Ev>

0000015e <_ZN7DisplayC1Ev>:
        *Character =  pgm_read_byte_near(&DisplayCharacters[Row][Column]);
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* getChar */
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	0c 94 43 01 	jmp	0x286	; 0x286 <_ZN6WS2812C1Eh>

00000164 <_ZN7DisplayD1Ev>:
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <_ZN6WS2812D1Ev>

00000168 <_ZN7Display21transformToSerpentineEhh>:
******************************************************************************************************************************************************/
byte Display::transformToSerpentine(byte Row, byte Column)
{
    byte Index;

    if(isBitCleared(Row, 0)) Index = (Row * DISPLAY_NUMBER_OF_COLUMNS) + Column;
 168:	60 fd       	sbrc	r22, 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <_ZN7Display21transformToSerpentineEhh+0x8>
 16c:	84 2f       	mov	r24, r20
 16e:	02 c0       	rjmp	.+4      	; 0x174 <_ZN7Display21transformToSerpentineEhh+0xc>
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	84 1b       	sub	r24, r20
    else Index = (Row * DISPLAY_NUMBER_OF_COLUMNS) + (DISPLAY_NUMBER_OF_COLUMNS - Column - 1);
 174:	9b e0       	ldi	r25, 0x0B	; 11
 176:	69 9f       	mul	r22, r25
 178:	80 0d       	add	r24, r0
 17a:	11 24       	eor	r1, r1
    
    return Index;
} /* transformToSerpentine */
 17c:	08 95       	ret

0000017e <_ZN7Display6setLedEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setLed(byte Row, byte Column)
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
    if(Row < DISPLAY_NUMBER_OF_ROWS && Column < DISPLAY_NUMBER_OF_COLUMNS) {
 182:	6a 30       	cpi	r22, 0x0A	; 10
 184:	88 f4       	brcc	.+34     	; 0x1a8 <_ZN7Display6setLedEhh+0x2a>
 186:	4b 30       	cpi	r20, 0x0B	; 11
 188:	78 f4       	brcc	.+30     	; 0x1a8 <_ZN7Display6setLedEhh+0x2a>
 18a:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
        /* if led stripe is snake or serpentine the odd row: count from right to left */
        Pixels.setPixel(transformToSerpentine(Row, Column), DisplayColor);
 18c:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN7Display21transformToSerpentineEhh>
 190:	fe 01       	movw	r30, r28
 192:	e9 5a       	subi	r30, 0xA9	; 169
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	20 81       	ld	r18, Z
 198:	31 81       	ldd	r19, Z+1	; 0x01
 19a:	42 81       	ldd	r20, Z+2	; 0x02
 19c:	68 2f       	mov	r22, r24
 19e:	ce 01       	movw	r24, r28
 1a0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN6WS28128setPixelEh15WS2812PixelType>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <_ZN7Display6setLedEhh+0x2c>
#else
        Pixels.setPixel((Row * DISPLAY_NUMBER_OF_COLUMNS) + Column, DisplayColor);
#endif
        return E_OK;
    } else {
        return E_NOT_OK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* setLed */
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <_ZN7Display7setWordE16DisplayWordsType>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void Display::setWord(DisplayWordsType Word)
{
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	8c 01       	movw	r16, r24
    byte Row = (byte) pgm_read_byte(&WordIlluminationTable[Word].Row);
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	fb 01       	movw	r30, r22
 1c2:	ee 0f       	add	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	6e 0f       	add	r22, r30
 1c8:	7f 1f       	adc	r23, r31
 1ca:	fb 01       	movw	r30, r22
 1cc:	e8 59       	subi	r30, 0x98	; 152
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	f4 90       	lpm	r15, Z
    byte Column = (byte) pgm_read_byte(&WordIlluminationTable[Word].Column);
 1d2:	fb 01       	movw	r30, r22
 1d4:	e7 59       	subi	r30, 0x97	; 151
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	e4 90       	lpm	r14, Z
    byte Length = (byte) pgm_read_byte(&WordIlluminationTable[Word].Length);
 1da:	fb 01       	movw	r30, r22
 1dc:	e6 59       	subi	r30, 0x96	; 150
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	c4 91       	lpm	r28, Z

	for(byte Index = 0; Index < Length; Index++)  setLed(Row + Index, Column);
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	dc 17       	cp	r29, r28
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <_ZN7Display7setWordE16DisplayWordsType+0x48>
 1e8:	6d 2f       	mov	r22, r29
 1ea:	6f 0d       	add	r22, r15
 1ec:	4e 2d       	mov	r20, r14
 1ee:	c8 01       	movw	r24, r16
 1f0:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN7Display6setLedEhh>
 1f4:	df 5f       	subi	r29, 0xFF	; 255
 1f6:	f6 cf       	rjmp	.-20     	; 0x1e4 <_ZN7Display7setWordE16DisplayWordsType+0x34>
} /* setWord */
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	08 95       	ret

00000206 <_ZN7Display6setLedEh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setLed(byte Index)
{
 206:	9c 01       	movw	r18, r24
 208:	86 2f       	mov	r24, r22
    byte Row = Index / DISPLAY_NUMBER_OF_COLUMNS;
    byte Column = Index % DISPLAY_NUMBER_OF_COLUMNS;
 20a:	6b e0       	ldi	r22, 0x0B	; 11
 20c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__udivmodqi4>

    return setLed(Row, Column);
 210:	49 2f       	mov	r20, r25
 212:	68 2f       	mov	r22, r24
 214:	c9 01       	movw	r24, r18
 216:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_ZN7Display6setLedEhh>

0000021a <_ZN7Display12setCharacterE21DisplayCharactersType>:
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void Display::setCharacter(DisplayCharactersType Character)
{
	if(Character < DISPLAY_CHARACTER_NUMBER_OF_CHARACTERS) setLed(Character);
 21a:	6e 36       	cpi	r22, 0x6E	; 110
 21c:	10 f4       	brcc	.+4      	; 0x222 <_ZN7Display12setCharacterE21DisplayCharactersType+0x8>
 21e:	0c 94 03 01 	jmp	0x206	; 0x206 <_ZN7Display6setLedEh>
 222:	08 95       	ret

00000224 <_ZN6WS2812D1Ev>:
		}
		return E_OK;
	} else {
		return E_NOT_OK;
	}
} /* getPixel */
 224:	08 95       	ret

00000226 <_ZN6WS28126setPinEh>:
 226:	dc 01       	movw	r26, r24
 228:	64 31       	cpi	r22, 0x14	; 20
 22a:	58 f5       	brcc	.+86     	; 0x282 <_ZN6WS28126setPinEh+0x5c>
 22c:	86 2f       	mov	r24, r22
 22e:	26 2f       	mov	r18, r22
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	f9 01       	movw	r30, r18
 234:	e7 54       	subi	r30, 0x47	; 71
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	e4 91       	lpm	r30, Z
 23a:	ec 93       	st	X, r30
 23c:	23 53       	subi	r18, 0x33	; 51
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
 240:	f9 01       	movw	r30, r18
 242:	94 91       	lpm	r25, Z
 244:	e9 2f       	mov	r30, r25
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	ef 51       	subi	r30, 0x1F	; 31
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	45 91       	lpm	r20, Z+
 252:	54 91       	lpm	r21, Z
 254:	12 96       	adiw	r26, 0x02	; 2
 256:	5c 93       	st	X, r21
 258:	4e 93       	st	-X, r20
 25a:	11 97       	sbiw	r26, 0x01	; 1
 25c:	f9 01       	movw	r30, r18
 25e:	24 91       	lpm	r18, Z
 260:	e2 2f       	mov	r30, r18
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	e5 51       	subi	r30, 0x15	; 21
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	25 91       	lpm	r18, Z+
 26e:	34 91       	lpm	r19, Z
 270:	14 96       	adiw	r26, 0x04	; 4
 272:	3c 93       	st	X, r19
 274:	2e 93       	st	-X, r18
 276:	13 97       	sbiw	r26, 0x03	; 3
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	0e 94 1f 02 	call	0x43e	; 0x43e <pinMode>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	08 95       	ret

00000286 <_ZN6WS2812C1Eh>:
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
 28c:	0e 94 13 01 	call	0x226	; 0x226 <_ZN6WS28126setPinEh>
 290:	fe 01       	movw	r30, r28
 292:	e1 5b       	subi	r30, 0xB1	; 177
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	80 83       	st	Z, r24
 29a:	31 96       	adiw	r30, 0x01	; 1
 29c:	10 82       	st	Z, r1
 29e:	11 82       	std	Z+1, r1	; 0x01
 2a0:	12 82       	std	Z+2, r1	; 0x02
 2a2:	13 82       	std	Z+3, r1	; 0x03
 2a4:	eb 54       	subi	r30, 0x4B	; 75
 2a6:	f1 40       	sbci	r31, 0x01	; 1
 2a8:	8a e4       	ldi	r24, 0x4A	; 74
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	df 01       	movw	r26, r30
 2ae:	9c 01       	movw	r18, r24
 2b0:	1d 92       	st	X+, r1
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	30 40       	sbci	r19, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <_ZN6WS2812C1Eh+0x2a>
 2b8:	ef 5a       	subi	r30, 0xAF	; 175
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	10 82       	st	Z, r1
 2be:	32 97       	sbiw	r30, 0x02	; 2
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 83       	st	Z, r24
 2c4:	cb 5a       	subi	r28, 0xAB	; 171
 2c6:	de 4f       	sbci	r29, 0xFE	; 254
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	88 83       	st	Y, r24
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <_ZN6WS28128setPixelEh15WS2812PixelType>:
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
stdReturnType WS2812::setPixel(byte Index, WS2812PixelType Pixel)
{
	if(Index < WS2812_NUMBER_OF_LEDS) {
 2d2:	6e 36       	cpi	r22, 0x6E	; 110
 2d4:	e8 f4       	brcc	.+58     	; 0x310 <_ZN6WS28128setPixelEh15WS2812PixelType+0x3e>
		Pixels[WS2812_POS_ABS_RED(Index)] = Pixel.Red;
 2d6:	fc 01       	movw	r30, r24
 2d8:	ec 5a       	subi	r30, 0xAC	; 172
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	50 81       	ld	r21, Z
 2de:	fc 01       	movw	r30, r24
 2e0:	e6 0f       	add	r30, r22
 2e2:	f1 1d       	adc	r31, r1
 2e4:	bf 01       	movw	r22, r30
 2e6:	e5 0f       	add	r30, r21
 2e8:	f1 1d       	adc	r31, r1
 2ea:	25 83       	std	Z+5, r18	; 0x05
		Pixels[WS2812_POS_ABS_GREEN(Index)] = Pixel.Green;
 2ec:	fc 01       	movw	r30, r24
 2ee:	eb 5a       	subi	r30, 0xAB	; 171
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	20 81       	ld	r18, Z
 2f4:	fb 01       	movw	r30, r22
 2f6:	e2 0f       	add	r30, r18
 2f8:	f1 1d       	adc	r31, r1
 2fa:	35 83       	std	Z+5, r19	; 0x05
		Pixels[WS2812_POS_ABS_BLUE(Index)] = Pixel.Blue;
 2fc:	fc 01       	movw	r30, r24
 2fe:	ea 5a       	subi	r30, 0xAA	; 170
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	80 81       	ld	r24, Z
 304:	fb 01       	movw	r30, r22
 306:	e8 0f       	add	r30, r24
 308:	f1 1d       	adc	r31, r1
 30a:	45 83       	std	Z+5, r20	; 0x05
		return E_OK;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
	} else {
		return E_NOT_OK;
 310:	81 e0       	ldi	r24, 0x01	; 1
	}
} /* setPixel */
 312:	08 95       	ret

00000314 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 314:	08 95       	ret

00000316 <main>:

int main(void)
{
	init();
 316:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init>

	initVariant();
 31a:	0e 94 8a 01 	call	0x314	; 0x314 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 31e:	0e 94 9c 00 	call	0x138	; 0x138 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 326:	0e 94 a6 00 	call	0x14c	; 0x14c <loop>
		if (serialEventRun) serialEventRun();
 32a:	20 97       	sbiw	r28, 0x00	; 0
 32c:	e1 f3       	breq	.-8      	; 0x326 <main+0x10>
 32e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 332:	f9 cf       	rjmp	.-14     	; 0x326 <main+0x10>

00000334 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <timer0_millis>
 34e:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <timer0_millis+0x1>
 352:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <timer0_millis+0x2>
 356:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <timer0_millis+0x3>
 35a:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <timer0_fract>
 35e:	23 e0       	ldi	r18, 0x03	; 3
 360:	23 0f       	add	r18, r19
 362:	2d 37       	cpi	r18, 0x7D	; 125
 364:	20 f4       	brcc	.+8      	; 0x36e <__vector_16+0x3a>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
 36c:	05 c0       	rjmp	.+10     	; 0x378 <__vector_16+0x44>
 36e:	26 e8       	ldi	r18, 0x86	; 134
 370:	23 0f       	add	r18, r19
 372:	02 96       	adiw	r24, 0x02	; 2
 374:	a1 1d       	adc	r26, r1
 376:	b1 1d       	adc	r27, r1
 378:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <timer0_fract>
 37c:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <timer0_millis>
 380:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <timer0_millis+0x1>
 384:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <timer0_millis+0x2>
 388:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <timer0_millis+0x3>
 38c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <timer0_overflow_count>
 390:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <timer0_overflow_count+0x1>
 394:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <timer0_overflow_count+0x2>
 398:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <timer0_overflow_count+0x3>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	a1 1d       	adc	r26, r1
 3a0:	b1 1d       	adc	r27, r1
 3a2:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <timer0_overflow_count>
 3a6:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <timer0_overflow_count+0x1>
 3aa:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <timer0_overflow_count+0x2>
 3ae:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <timer0_overflow_count+0x3>
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3c8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3ca:	84 b5       	in	r24, 0x24	; 36
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3d0:	84 b5       	in	r24, 0x24	; 36
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3d6:	85 b5       	in	r24, 0x25	; 37
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3dc:	85 b5       	in	r24, 0x25	; 37
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3e2:	ee e6       	ldi	r30, 0x6E	; 110
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3ec:	e1 e8       	ldi	r30, 0x81	; 129
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3f2:	80 81       	ld	r24, Z
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3f8:	80 81       	ld	r24, Z
 3fa:	81 60       	ori	r24, 0x01	; 1
 3fc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3fe:	e0 e8       	ldi	r30, 0x80	; 128
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	81 60       	ori	r24, 0x01	; 1
 406:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 408:	e1 eb       	ldi	r30, 0xB1	; 177
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	84 60       	ori	r24, 0x04	; 4
 410:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 412:	e0 eb       	ldi	r30, 0xB0	; 176
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 41c:	ea e7       	ldi	r30, 0x7A	; 122
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	84 60       	ori	r24, 0x04	; 4
 424:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 426:	80 81       	ld	r24, Z
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 42c:	80 81       	ld	r24, Z
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 432:	80 81       	ld	r24, Z
 434:	80 68       	ori	r24, 0x80	; 128
 436:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 438:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 43c:	08 95       	ret

0000043e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	e7 54       	subi	r30, 0x47	; 71
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 44c:	fc 01       	movw	r30, r24
 44e:	e3 53       	subi	r30, 0x33	; 51
 450:	ff 4f       	sbci	r31, 0xFF	; 255
 452:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 454:	88 23       	and	r24, r24
 456:	61 f1       	breq	.+88     	; 0x4b0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	fc 01       	movw	r30, r24
 460:	e5 51       	subi	r30, 0x15	; 21
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	c5 91       	lpm	r28, Z+
 466:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 468:	fc 01       	movw	r30, r24
 46a:	ef 51       	subi	r30, 0x1F	; 31
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	a5 91       	lpm	r26, Z+
 470:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 472:	61 11       	cpse	r22, r1
 474:	09 c0       	rjmp	.+18     	; 0x488 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 476:	9f b7       	in	r25, 0x3f	; 63
                cli();
 478:	f8 94       	cli
		*reg &= ~bit;
 47a:	88 81       	ld	r24, Y
 47c:	20 95       	com	r18
 47e:	82 23       	and	r24, r18
 480:	88 83       	st	Y, r24
		*out &= ~bit;
 482:	ec 91       	ld	r30, X
 484:	2e 23       	and	r18, r30
 486:	0b c0       	rjmp	.+22     	; 0x49e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 488:	62 30       	cpi	r22, 0x02	; 2
 48a:	61 f4       	brne	.+24     	; 0x4a4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 48c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 48e:	f8 94       	cli
		*reg &= ~bit;
 490:	38 81       	ld	r19, Y
 492:	82 2f       	mov	r24, r18
 494:	80 95       	com	r24
 496:	83 23       	and	r24, r19
 498:	88 83       	st	Y, r24
		*out |= bit;
 49a:	ec 91       	ld	r30, X
 49c:	2e 2b       	or	r18, r30
 49e:	2c 93       	st	X, r18
		SREG = oldSREG;
 4a0:	9f bf       	out	0x3f, r25	; 63
 4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 4a4:	8f b7       	in	r24, 0x3f	; 63
                cli();
 4a6:	f8 94       	cli
		*reg |= bit;
 4a8:	e8 81       	ld	r30, Y
 4aa:	2e 2b       	or	r18, r30
 4ac:	28 83       	st	Y, r18
		SREG = oldSREG;
 4ae:	8f bf       	out	0x3f, r24	; 63
	}
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <__udivmodqi4>:
 4b6:	99 1b       	sub	r25, r25
 4b8:	79 e0       	ldi	r23, 0x09	; 9
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__udivmodqi4_ep>

000004bc <__udivmodqi4_loop>:
 4bc:	99 1f       	adc	r25, r25
 4be:	96 17       	cp	r25, r22
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <__udivmodqi4_ep>
 4c2:	96 1b       	sub	r25, r22

000004c4 <__udivmodqi4_ep>:
 4c4:	88 1f       	adc	r24, r24
 4c6:	7a 95       	dec	r23
 4c8:	c9 f7       	brne	.-14     	; 0x4bc <__udivmodqi4_loop>
 4ca:	80 95       	com	r24
 4cc:	08 95       	ret

000004ce <__tablejump2__>:
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	05 90       	lpm	r0, Z+
 4d4:	f4 91       	lpm	r31, Z
 4d6:	e0 2d       	mov	r30, r0
 4d8:	09 94       	ijmp

000004da <__do_global_dtors>:
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	cc e7       	ldi	r28, 0x7C	; 124
 4de:	d0 e0       	ldi	r29, 0x00	; 0
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <__do_global_dtors+0x10>
 4e2:	fe 01       	movw	r30, r28
 4e4:	0e 94 67 02 	call	0x4ce	; 0x4ce <__tablejump2__>
 4e8:	21 96       	adiw	r28, 0x01	; 1
 4ea:	cd 37       	cpi	r28, 0x7D	; 125
 4ec:	d1 07       	cpc	r29, r17
 4ee:	c9 f7       	brne	.-14     	; 0x4e2 <__do_global_dtors+0x8>
 4f0:	f8 94       	cli

000004f2 <__stop_program>:
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <__stop_program>
