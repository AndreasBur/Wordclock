
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000910  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000168  00800100  00800100  00000984  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004686  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001228  00000000  00000000  0000526a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cf  00000000  00000000  00006492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00007864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001100  00000000  00000000  00007cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a0a  00000000  00000000  00008db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__dtors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_16>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000068 <_ZN12DisplayClock17ClockMinutesTableE>:
  68:	00 00 00 00 00 01 00 03 0a 00 01 00 04 0a 00 01     ................
  78:	00 08 0a 00 01 01 04 0b 0c 01 01 03 0b 0c 01 01     ................
  88:	0c 00 00 01 01 03 0a 0c 01 01 04 0a 0c 01 01 08     ................
  98:	0b 00 01 01 04 0b 00 01 01 03 0b 00 00 00 00 00     ................
  a8:	00 01 00 03 0a 00 01 00 04 0a 00 01 01 08 00 00     ................
  b8:	01 01 04 0b 0c 01 01 03 0b 0c 01 01 0c 00 00 01     ................
  c8:	01 03 0a 0c 01 01 04 0a 0c 01 01 09 00 00 01 01     ................
  d8:	04 0b 00 01 01 03 0b 00 00 00 00 00 00 01 00 03     ................
  e8:	0a 00 01 00 04 0a 00 01 00 08 0a 00 01 00 05 0a     ................
  f8:	00 01 01 03 0b 0c 01 01 0c 00 00 01 01 03 0a 0c     ................
 108:	01 01 05 0b 00 01 01 08 0b 00 01 01 04 0b 00 01     ................
 118:	01 03 0b 00 00 00 00 00 00 01 00 03 0a 00 01 00     ................
 128:	04 0a 00 01 01 08 00 00 01 00 05 0a 00 01 01 03     ................
 138:	0b 0c 01 01 0c 00 00 01 01 03 0a 0c 01 01 05 0b     ................
 148:	00 01 01 09 00 00 01 01 04 0b 00 01 01 03 0b 00     ................

00000158 <_ZN12DisplayClock15ClockHoursTableE>:
 158:	0d 1a 0f 1a 0e 1a 12 1a 16 1a 13 1a 19 1a 11 1a     ................
 168:	17 1a 15 1a 18 1a 14 1a 0d 00 10 00 0e 00 12 00     ................
 178:	16 00 13 00 19 00 11 00 17 00 15 00 18 00 14 00     ................

00000188 <_ZN11DisplayWord21WordIlluminationTableE>:
 188:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
 198:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
 1a8:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
 1b8:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
 1c8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
 1d8:	03                                                  .

000001d9 <digital_pin_to_bit_mask_PGM>:
 1d9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 1e9:	04 08 10 20                                         ... 

000001ed <digital_pin_to_port_PGM>:
 1ed:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
 1fd:	03 03 03 03                                         ....

00000201 <port_to_output_PGM>:
 201:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000020b <port_to_mode_PGM>:
 20b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000216 <__ctors_start>:
 216:	41 01       	movw	r8, r2

00000218 <__ctors_end>:
 218:	45 01       	movw	r8, r10

0000021a <__dtors_end>:
 21a:	11 24       	eor	r1, r1
 21c:	1f be       	out	0x3f, r1	; 63
 21e:	cf ef       	ldi	r28, 0xFF	; 255
 220:	d8 e0       	ldi	r29, 0x08	; 8
 222:	de bf       	out	0x3e, r29	; 62
 224:	cd bf       	out	0x3d, r28	; 61

00000226 <__do_clear_bss>:
 226:	22 e0       	ldi	r18, 0x02	; 2
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a8 36       	cpi	r26, 0x68	; 104
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>

00000236 <__do_global_ctors>:
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	cc e0       	ldi	r28, 0x0C	; 12
 23a:	d1 e0       	ldi	r29, 0x01	; 1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__do_global_ctors+0x10>
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	fe 01       	movw	r30, r28
 242:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__tablejump2__>
 246:	cb 30       	cpi	r28, 0x0B	; 11
 248:	d1 07       	cpc	r29, r17
 24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
 24c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <main>
 250:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__do_global_dtors>

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000258 <setup>:
int I = 0;

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
 258:	08 95       	ret

0000025a <loop>:
 
}

void loop() {
  // put your main code here, to run repeatedly:
   WcDisplayClock.showClock(10,I);
 25a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 25e:	6a e0       	ldi	r22, 0x0A	; 10
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN12DisplayClock9showClockEhh>
   I++;
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 26c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 276:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	// set methods

	// methods
	void init();
	void show() { WS2812Display.show(); }
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0c 94 b8 02 	jmp	0x570	; 0x570 <_ZN6WS28124showEv>

00000282 <_GLOBAL__sub_I_Char>:

//Display WordClockDisplay;
//DisplayCharacter WcDisplayCharacter;

char Char;
Display WcDisplay;
 282:	85 e0       	ldi	r24, 0x05	; 5
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0c 94 49 01 	jmp	0x292	; 0x292 <_ZN7DisplayC1Ev>

0000028a <_GLOBAL__sub_D_Char>:
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0c 94 4c 01 	jmp	0x298	; 0x298 <_ZN7DisplayD1Ev>

00000292 <_ZN7DisplayC1Ev>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void Display::init()
{
 292:	6a e0       	ldi	r22, 0x0A	; 10
 294:	0c 94 4d 02 	jmp	0x49a	; 0x49a <_ZN6WS2812C1Eh>

00000298 <_ZN7DisplayD1Ev>:
 298:	0c 94 1c 02 	jmp	0x438	; 0x438 <_ZN6WS2812D1Ev>

0000029c <_ZN7Display21transformToSerpentineEhh>:
******************************************************************************************************************************************************/
byte Display::transformToSerpentine(byte Row, byte Column)
{
    byte Index;

    if(isBitCleared(Row, 0)) Index = (Row * DISPLAY_NUMBER_OF_COLUMNS) + Column;
 29c:	60 fd       	sbrc	r22, 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN7Display21transformToSerpentineEhh+0x8>
 2a0:	84 2f       	mov	r24, r20
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <_ZN7Display21transformToSerpentineEhh+0xc>
    else Index = (Row * DISPLAY_NUMBER_OF_COLUMNS) + (DISPLAY_NUMBER_OF_COLUMNS - Column - 1);
 2a4:	8a e0       	ldi	r24, 0x0A	; 10
 2a6:	84 1b       	sub	r24, r20
 2a8:	9b e0       	ldi	r25, 0x0B	; 11
 2aa:	69 9f       	mul	r22, r25
 2ac:	80 0d       	add	r24, r0
 2ae:	11 24       	eor	r1, r1
    
    return Index;
} /* transformToSerpentine */
 2b0:	08 95       	ret

000002b2 <_ZN7Display6setLedEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setLed(byte Row, byte Column)
{
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
    if(Row < DISPLAY_NUMBER_OF_ROWS && Column < DISPLAY_NUMBER_OF_COLUMNS) {
 2b6:	6a 30       	cpi	r22, 0x0A	; 10
 2b8:	88 f4       	brcc	.+34     	; 0x2dc <_ZN7Display6setLedEhh+0x2a>
 2ba:	4b 30       	cpi	r20, 0x0B	; 11
 2bc:	78 f4       	brcc	.+30     	; 0x2dc <_ZN7Display6setLedEhh+0x2a>
 2be:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
        /* if led stripe is snake or serpentine the odd row: count from right to left */
        WS2812Display.setPixel(transformToSerpentine(Row, Column), DisplayColor);
 2c0:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN7Display21transformToSerpentineEhh>
 2c4:	fe 01       	movw	r30, r28
 2c6:	e9 5a       	subi	r30, 0xA9	; 169
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	20 81       	ld	r18, Z
 2cc:	31 81       	ldd	r19, Z+1	; 0x01
 2ce:	42 81       	ldd	r20, Z+2	; 0x02
 2d0:	68 2f       	mov	r22, r24
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN6WS28128setPixelEh15WS2812PixelType>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	01 c0       	rjmp	.+2      	; 0x2de <_ZN7Display6setLedEhh+0x2c>
#else
        WS2812Display.setPixel((Row * DISPLAY_NUMBER_OF_COLUMNS) + Column, DisplayColor);
#endif
        return E_OK;
    } else {
        return E_NOT_OK;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* setChar */
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <_ZN12DisplayClock9showClockEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType DisplayClock::showClock(byte Hour, byte Minute)
{
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	27 97       	sbiw	r28, 0x07	; 7
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	8c 01       	movw	r16, r24
 306:	e6 2e       	mov	r14, r22
 308:	f4 2e       	mov	r15, r20
	//DisplayWordWordsType Words[DISPLAY_WORD_NUMBER_OF_WORDS];
	//const DisplayClockMinutesType* pMinutesTableEntry = (DisplayClockMinutesType*) pgm_read_word(&ClockMinutesTable[ClockMode][Minute / 5]);
	DisplayClockMinutesType MinutesTableEntry;
	DisplayWordWordsType HoursTableEntry[DISPLAY_CLOCK_MAX_NUMBER_OF_HOUR_WORDS];

	memcpy_P(&MinutesTableEntry, &ClockMinutesTable[ClockMode][Minute / DISPLAY_CLOCK_MINUTE_STEP_IN_MINUTES], sizeof(DisplayClockMinutesType));
 30a:	25 e0       	ldi	r18, 0x05	; 5
 30c:	84 2f       	mov	r24, r20
 30e:	62 2f       	mov	r22, r18
 310:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__udivmodqi4>
 314:	f8 01       	movw	r30, r16
 316:	60 81       	ld	r22, Z
 318:	fc e3       	ldi	r31, 0x3C	; 60
 31a:	6f 9f       	mul	r22, r31
 31c:	b0 01       	movw	r22, r0
 31e:	11 24       	eor	r1, r1
 320:	28 9f       	mul	r18, r24
 322:	60 0d       	add	r22, r0
 324:	71 1d       	adc	r23, r1
 326:	11 24       	eor	r1, r1
 328:	68 59       	subi	r22, 0x98	; 152
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	45 e0       	ldi	r20, 0x05	; 5
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	0e 94 72 04 	call	0x8e4	; 0x8e4 <memcpy_P>
	memcpy_P(&HoursTableEntry, &ClockHoursTable[MinutesTableEntry.HourMode][Hour], DISPLAY_CLOCK_MAX_NUMBER_OF_HOUR_WORDS);
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	6e 2d       	mov	r22, r14
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	9c e0       	ldi	r25, 0x0C	; 12
 340:	89 9f       	mul	r24, r25
 342:	60 0d       	add	r22, r0
 344:	71 1d       	adc	r23, r1
 346:	11 24       	eor	r1, r1
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	68 5a       	subi	r22, 0xA8	; 168
 34e:	7e 4f       	sbci	r23, 0xFE	; 254
 350:	6e 01       	movw	r12, r28
 352:	e6 e0       	ldi	r30, 0x06	; 6
 354:	ce 0e       	add	r12, r30
 356:	d1 1c       	adc	r13, r1
 358:	42 e0       	ldi	r20, 0x02	; 2
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	c6 01       	movw	r24, r12
 35e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <memcpy_P>
	//const DisplayWordWordsType HoursTableEntry;


	/* ----- Implementation ----------------------------------------------- */
	if(Hour < 24 && Minute < 60) {
 362:	f7 e1       	ldi	r31, 0x17	; 23
 364:	fe 15       	cp	r31, r14
 366:	58 f1       	brcs	.+86     	; 0x3be <_ZN12DisplayClock9showClockEhh+0xda>
 368:	8b e3       	ldi	r24, 0x3B	; 59
 36a:	8f 15       	cp	r24, r15
 36c:	40 f1       	brcs	.+80     	; 0x3be <_ZN12DisplayClock9showClockEhh+0xda>
		/*  */
		if (DISPLAY_CLOCK_SHOW_IT_IS_PERMANENTLY == STD_ON || Minute <= 4 || (Minute >= 30 && Minute <= 34)) {
			WcDisplayWord.setWord(DISPLAY_WORD_ES);
 36e:	0f 5f       	subi	r16, 0xFF	; 255
 370:	1f 4f       	sbci	r17, 0xFF	; 255
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	c8 01       	movw	r24, r16
 376:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN11DisplayWord7setWordE20DisplayWordWordsType>
			WcDisplayWord.setWord(DISPLAY_WORD_IST);
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	c8 01       	movw	r24, r16
 37e:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN11DisplayWord7setWordE20DisplayWordWordsType>
 382:	7e 01       	movw	r14, r28
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	e9 0e       	add	r14, r25
 388:	f1 1c       	adc	r15, r1
		}

		for(byte Index = 0; Index < DISPLAY_CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
 38a:	f7 01       	movw	r30, r14
 38c:	61 91       	ld	r22, Z+
 38e:	7f 01       	movw	r14, r30
 390:	61 11       	cpse	r22, r1
 392:	0e c0       	rjmp	.+28     	; 0x3b0 <_ZN12DisplayClock9showClockEhh+0xcc>
		
		if(Hour >= DISPLAY_CLOCK_NUMBER_OF_HOURS) Hour -= DISPLAY_CLOCK_NUMBER_OF_HOURS;
		Hour += MinutesTableEntry.HourOffset;                             // correct the hour offset from the minutes
		if(Hour >= DISPLAY_CLOCK_NUMBER_OF_HOURS) Hour -= DISPLAY_CLOCK_NUMBER_OF_HOURS;

		for(byte Index = 0; Index < DISPLAY_CLOCK_MAX_NUMBER_OF_HOUR_WORDS && HoursTableEntry[Index] != DISPLAY_WORD_NONE; Index++) {
 394:	6e 81       	ldd	r22, Y+6	; 0x06
 396:	66 23       	and	r22, r22
 398:	49 f0       	breq	.+18     	; 0x3ac <_ZN12DisplayClock9showClockEhh+0xc8>
			WcDisplayWord.setWord(HoursTableEntry[Index]);
 39a:	c8 01       	movw	r24, r16
 39c:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN11DisplayWord7setWordE20DisplayWordWordsType>
		
		if(Hour >= DISPLAY_CLOCK_NUMBER_OF_HOURS) Hour -= DISPLAY_CLOCK_NUMBER_OF_HOURS;
		Hour += MinutesTableEntry.HourOffset;                             // correct the hour offset from the minutes
		if(Hour >= DISPLAY_CLOCK_NUMBER_OF_HOURS) Hour -= DISPLAY_CLOCK_NUMBER_OF_HOURS;

		for(byte Index = 0; Index < DISPLAY_CLOCK_MAX_NUMBER_OF_HOUR_WORDS && HoursTableEntry[Index] != DISPLAY_WORD_NONE; Index++) {
 3a0:	6f 81       	ldd	r22, Y+7	; 0x07
 3a2:	66 23       	and	r22, r22
 3a4:	19 f0       	breq	.+6      	; 0x3ac <_ZN12DisplayClock9showClockEhh+0xc8>
			WcDisplayWord.setWord(HoursTableEntry[Index]);
 3a6:	c8 01       	movw	r24, r16
 3a8:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN11DisplayWord7setWordE20DisplayWordWordsType>
		}

		return E_OK;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <_ZN12DisplayClock9showClockEhh+0xdc>
			WcDisplayWord.setWord(DISPLAY_WORD_ES);
			WcDisplayWord.setWord(DISPLAY_WORD_IST);
		}

		for(byte Index = 0; Index < DISPLAY_CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
			WcDisplayWord.setWord(MinutesTableEntry.Words[Index]);
 3b0:	c8 01       	movw	r24, r16
 3b2:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN11DisplayWord7setWordE20DisplayWordWordsType>
		if (DISPLAY_CLOCK_SHOW_IT_IS_PERMANENTLY == STD_ON || Minute <= 4 || (Minute >= 30 && Minute <= 34)) {
			WcDisplayWord.setWord(DISPLAY_WORD_ES);
			WcDisplayWord.setWord(DISPLAY_WORD_IST);
		}

		for(byte Index = 0; Index < DISPLAY_CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
 3b6:	ce 14       	cp	r12, r14
 3b8:	df 04       	cpc	r13, r15
 3ba:	39 f7       	brne	.-50     	; 0x38a <_ZN12DisplayClock9showClockEhh+0xa6>
 3bc:	eb cf       	rjmp	.-42     	; 0x394 <_ZN12DisplayClock9showClockEhh+0xb0>
			WcDisplayWord.setWord(HoursTableEntry[Index]);
		}

		return E_OK;
	} else {
		return E_NOT_OK;
 3be:	81 e0       	ldi	r24, 0x01	; 1
	}
} /* show */
 3c0:	27 96       	adiw	r28, 0x07	; 7
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	df 90       	pop	r13
 3da:	cf 90       	pop	r12
 3dc:	08 95       	ret

000003de <_ZN11DisplayWord7setWordE20DisplayWordWordsType>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void DisplayWord::setWord(DisplayWordWordsType Word)
{
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	8c 01       	movw	r16, r24
    byte Row = (byte) pgm_read_byte(&WordIlluminationTable[Word].Row);
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	fb 01       	movw	r30, r22
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	6e 0f       	add	r22, r30
 3f6:	7f 1f       	adc	r23, r31
 3f8:	fb 01       	movw	r30, r22
 3fa:	e8 57       	subi	r30, 0x78	; 120
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	e4 90       	lpm	r14, Z
    byte Column = (byte) pgm_read_byte(&WordIlluminationTable[Word].Column);
 400:	fb 01       	movw	r30, r22
 402:	e7 57       	subi	r30, 0x77	; 119
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	f4 90       	lpm	r15, Z
    byte Length = (byte) pgm_read_byte(&WordIlluminationTable[Word].Length);
 408:	fb 01       	movw	r30, r22
 40a:	e6 57       	subi	r30, 0x76	; 118
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	c4 91       	lpm	r28, Z

	for(byte Index = 0; Index < Length; Index++)  pDisplay->setLed(Row + Index, Column);
 410:	d0 e0       	ldi	r29, 0x00	; 0
 412:	dc 17       	cp	r29, r28
 414:	51 f0       	breq	.+20     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 416:	6d 2f       	mov	r22, r29
 418:	6e 0d       	add	r22, r14
 41a:	4f 2d       	mov	r20, r15
 41c:	f8 01       	movw	r30, r16
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN7Display6setLedEhh>
 426:	df 5f       	subi	r29, 0xFF	; 255
 428:	f4 cf       	rjmp	.-24     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
} /* setWord */
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	08 95       	ret

00000438 <_ZN6WS2812D1Ev>:
		OffsetBlue = 2;
	}
	if(ColorOrder == WS2812_COLOR_ORDER_RGB) {
		OffsetRed = 0;
		OffsetGreen = 1;
		OffsetBlue = 2;
 438:	08 95       	ret

0000043a <_ZN6WS28126setPinEh>:
 43a:	dc 01       	movw	r26, r24
 43c:	64 31       	cpi	r22, 0x14	; 20
 43e:	58 f5       	brcc	.+86     	; 0x496 <_ZN6WS28126setPinEh+0x5c>
 440:	86 2f       	mov	r24, r22
 442:	26 2f       	mov	r18, r22
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	f9 01       	movw	r30, r18
 448:	e7 52       	subi	r30, 0x27	; 39
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	e4 91       	lpm	r30, Z
 44e:	ec 93       	st	X, r30
 450:	23 51       	subi	r18, 0x13	; 19
 452:	3e 4f       	sbci	r19, 0xFE	; 254
 454:	f9 01       	movw	r30, r18
 456:	94 91       	lpm	r25, Z
 458:	e9 2f       	mov	r30, r25
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	ef 5f       	subi	r30, 0xFF	; 255
 462:	fd 4f       	sbci	r31, 0xFD	; 253
 464:	45 91       	lpm	r20, Z+
 466:	54 91       	lpm	r21, Z
 468:	12 96       	adiw	r26, 0x02	; 2
 46a:	5c 93       	st	X, r21
 46c:	4e 93       	st	-X, r20
 46e:	11 97       	sbiw	r26, 0x01	; 1
 470:	f9 01       	movw	r30, r18
 472:	24 91       	lpm	r18, Z
 474:	e2 2f       	mov	r30, r18
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	ee 0f       	add	r30, r30
 47a:	ff 1f       	adc	r31, r31
 47c:	e5 5f       	subi	r30, 0xF5	; 245
 47e:	fd 4f       	sbci	r31, 0xFD	; 253
 480:	25 91       	lpm	r18, Z+
 482:	34 91       	lpm	r19, Z
 484:	14 96       	adiw	r26, 0x04	; 4
 486:	3c 93       	st	X, r19
 488:	2e 93       	st	-X, r18
 48a:	13 97       	sbiw	r26, 0x03	; 3
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	0e 94 24 04 	call	0x848	; 0x848 <pinMode>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret

0000049a <_ZN6WS2812C1Eh>:
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	ec 01       	movw	r28, r24
 4a0:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN6WS28126setPinEh>
 4a4:	fe 01       	movw	r30, r28
 4a6:	e1 5b       	subi	r30, 0xB1	; 177
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	80 83       	st	Z, r24
 4ae:	31 96       	adiw	r30, 0x01	; 1
 4b0:	10 82       	st	Z, r1
 4b2:	11 82       	std	Z+1, r1	; 0x01
 4b4:	12 82       	std	Z+2, r1	; 0x02
 4b6:	13 82       	std	Z+3, r1	; 0x03
 4b8:	eb 54       	subi	r30, 0x4B	; 75
 4ba:	f1 40       	sbci	r31, 0x01	; 1
 4bc:	8a e4       	ldi	r24, 0x4A	; 74
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	df 01       	movw	r26, r30
 4c2:	9c 01       	movw	r18, r24
 4c4:	1d 92       	st	X+, r1
 4c6:	21 50       	subi	r18, 0x01	; 1
 4c8:	30 40       	sbci	r19, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <_ZN6WS2812C1Eh+0x2a>
 4cc:	ef 5a       	subi	r30, 0xAF	; 175
 4ce:	fe 4f       	sbci	r31, 0xFE	; 254
 4d0:	10 82       	st	Z, r1
 4d2:	32 97       	sbiw	r30, 0x02	; 2
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 83       	st	Z, r24
 4d8:	cb 5a       	subi	r28, 0xAB	; 171
 4da:	de 4f       	sbci	r29, 0xFE	; 254
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	88 83       	st	Y, r24
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <_ZN6WS28128setPixelEh15WS2812PixelType>:
 4e6:	6e 36       	cpi	r22, 0x6E	; 110
 4e8:	e8 f4       	brcc	.+58     	; 0x524 <_ZN6WS28128setPixelEh15WS2812PixelType+0x3e>
 4ea:	fc 01       	movw	r30, r24
 4ec:	ec 5a       	subi	r30, 0xAC	; 172
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	50 81       	ld	r21, Z
 4f2:	fc 01       	movw	r30, r24
 4f4:	e6 0f       	add	r30, r22
 4f6:	f1 1d       	adc	r31, r1
 4f8:	bf 01       	movw	r22, r30
 4fa:	e5 0f       	add	r30, r21
 4fc:	f1 1d       	adc	r31, r1
 4fe:	25 83       	std	Z+5, r18	; 0x05
 500:	fc 01       	movw	r30, r24
 502:	eb 5a       	subi	r30, 0xAB	; 171
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	20 81       	ld	r18, Z
 508:	fb 01       	movw	r30, r22
 50a:	e2 0f       	add	r30, r18
 50c:	f1 1d       	adc	r31, r1
 50e:	35 83       	std	Z+5, r19	; 0x05
 510:	fc 01       	movw	r30, r24
 512:	ea 5a       	subi	r30, 0xAA	; 170
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	80 81       	ld	r24, Z
 518:	fb 01       	movw	r30, r22
 51a:	e8 0f       	add	r30, r24
 51c:	f1 1d       	adc	r31, r1
 51e:	45 83       	std	Z+5, r20	; 0x05
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	08 95       	ret
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	08 95       	ret

00000528 <_ZN6WS28128sendDataEPhj>:
{
	uint8_t BitCounter;
	uint8_t PortMaskLow;
	uint8_t PortMaskHigh;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 528:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 52a:	f8 94       	cli
	{
		PortMaskLow = ~PinMask & *PortOutputRegister;
 52c:	fc 01       	movw	r30, r24
 52e:	20 81       	ld	r18, Z
 530:	a1 81       	ldd	r26, Z+1	; 0x01
 532:	b2 81       	ldd	r27, Z+2	; 0x02
 534:	9c 91       	ld	r25, X
 536:	82 2f       	mov	r24, r18
 538:	80 95       	com	r24
 53a:	98 23       	and	r25, r24
		PortMaskHigh = PinMask | *PortOutputRegister;
 53c:	8c 91       	ld	r24, X
 53e:	82 2b       	or	r24, r18
 540:	fb 01       	movw	r30, r22
 542:	46 0f       	add	r20, r22
 544:	57 1f       	adc	r21, r23

		for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 546:	e4 17       	cp	r30, r20
 548:	f5 07       	cpc	r31, r21
 54a:	81 f0       	breq	.+32     	; 0x56c <skipone694+0x8>
#endif

				"dec   %[BitCounter]				\n\t"    //  '1' [+4] '0' [+3]
				"brne  loop%=						\n\t"    //  '1' [+5] '0' [+4]
				: [BitCounter]		"=&d" (BitCounter)
				: [CurrentByte]		"r"   (Data[ByteCounter]),
 54c:	21 91       	ld	r18, Z+
				  [Port]			"x"   (PortOutputRegister),
				  [PortMaskHigh]	"r"   (PortMaskHigh),
				  [PortMaskLow]		"r"   (PortMaskLow)
			);
 54e:	68 e0       	ldi	r22, 0x08	; 8

00000550 <loop694>:
 550:	8c 93       	st	X, r24
 552:	00 c0       	rjmp	.+0      	; 0x554 <loop694+0x4>
 554:	27 ff       	sbrs	r18, 7
 556:	9c 93       	st	X, r25
 558:	22 0f       	add	r18, r18
 55a:	00 c0       	rjmp	.+0      	; 0x55c <loop694+0xc>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <loop694+0xe>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <loop694+0x10>
 560:	08 f4       	brcc	.+2      	; 0x564 <skipone694>
 562:	9c 93       	st	X, r25

00000564 <skipone694>:
 564:	00 c0       	rjmp	.+0      	; 0x566 <skipone694+0x2>
 566:	6a 95       	dec	r22
 568:	99 f7       	brne	.-26     	; 0x550 <loop694>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		PortMaskLow = ~PinMask & *PortOutputRegister;
		PortMaskHigh = PinMask | *PortOutputRegister;

		for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 56a:	ed cf       	rjmp	.-38     	; 0x546 <_ZN6WS28128sendDataEPhj+0x1e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 56c:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
 56e:	08 95       	ret

00000570 <_ZN6WS28124showEv>:
#if (WS2812_RESET_TIMER == STD_ON)
stdReturnType WS2812::show()
#elif (WS2812_RESET_TIMER == STD_OFF)
void WS2812::show()
#endif
{
 570:	6f 92       	push	r6
 572:	7f 92       	push	r7
 574:	9f 92       	push	r9
 576:	af 92       	push	r10
 578:	bf 92       	push	r11
 57a:	cf 92       	push	r12
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
 58e:	ca 54       	subi	r28, 0x4A	; 74
 590:	d1 40       	sbci	r29, 0x01	; 1
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	de bf       	out	0x3e, r29	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	cd bf       	out	0x3d, r28	; 61
 59c:	8c 01       	movw	r16, r24
	byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
	if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
 59e:	0e 94 c4 03 	call	0x788	; 0x788 <micros>
 5a2:	58 01       	movw	r10, r16
 5a4:	20 eb       	ldi	r18, 0xB0	; 176
 5a6:	a2 1a       	sub	r10, r18
 5a8:	2e ef       	ldi	r18, 0xFE	; 254
 5aa:	b2 0a       	sbc	r11, r18
 5ac:	d5 01       	movw	r26, r10
 5ae:	cd 90       	ld	r12, X+
 5b0:	dd 90       	ld	r13, X+
 5b2:	ed 90       	ld	r14, X+
 5b4:	fc 90       	ld	r15, X
 5b6:	dc 01       	movw	r26, r24
 5b8:	cb 01       	movw	r24, r22
 5ba:	8c 19       	sub	r24, r12
 5bc:	9d 09       	sbc	r25, r13
 5be:	ae 09       	sbc	r26, r14
 5c0:	bf 09       	sbc	r27, r15
 5c2:	c3 97       	sbiw	r24, 0x33	; 51
 5c4:	a1 05       	cpc	r26, r1
 5c6:	b1 05       	cpc	r27, r1
 5c8:	30 f4       	brcc	.+12     	; 0x5d6 <_ZN6WS28124showEv+0x66>
 5ca:	cd 28       	or	r12, r13
 5cc:	ce 28       	or	r12, r14
 5ce:	cf 28       	or	r12, r15
 5d0:	11 f0       	breq	.+4      	; 0x5d6 <_ZN6WS28124showEv+0x66>
		}
#if (WS2812_RESET_TIMER == STD_ON)
		ResetTimer = micros();
		return E_OK;
	} else {
		return E_NOT_OK;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	6a c0       	rjmp	.+212    	; 0x6aa <_ZN6WS28124showEv+0x13a>
	byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
	if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
#endif
		if(Brightness != 255) {
 5d6:	f8 01       	movw	r30, r16
 5d8:	e1 5b       	subi	r30, 0xB1	; 177
 5da:	fe 4f       	sbci	r31, 0xFE	; 254
 5dc:	90 80       	ld	r9, Z
 5de:	ff ef       	ldi	r31, 0xFF	; 255
 5e0:	9f 12       	cpse	r9, r31
 5e2:	11 c0       	rjmp	.+34     	; 0x606 <_ZN6WS28124showEv+0x96>
			dimmPixels(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
			sendData(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
		} else {
			sendData(Pixels, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 5e4:	b8 01       	movw	r22, r16
 5e6:	6b 5f       	subi	r22, 0xFB	; 251
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	4a e4       	ldi	r20, 0x4A	; 74
 5ec:	51 e0       	ldi	r21, 0x01	; 1
 5ee:	c8 01       	movw	r24, r16
 5f0:	0e 94 94 02 	call	0x528	; 0x528 <_ZN6WS28128sendDataEPhj>
		}
#if (WS2812_RESET_TIMER == STD_ON)
		ResetTimer = micros();
 5f4:	0e 94 c4 03 	call	0x788	; 0x788 <micros>
 5f8:	f5 01       	movw	r30, r10
 5fa:	60 83       	st	Z, r22
 5fc:	71 83       	std	Z+1, r23	; 0x01
 5fe:	82 83       	std	Z+2, r24	; 0x02
 600:	93 83       	std	Z+3, r25	; 0x03
		return E_OK;
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	52 c0       	rjmp	.+164    	; 0x6aa <_ZN6WS28124showEv+0x13a>
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
	for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
	{
		dimmColor(&PixelsDimmed[WS2812_POS_ABS_RED(i)], Pixels[WS2812_POS_ABS_RED(i)]);
 606:	f8 01       	movw	r30, r16
 608:	ec 5a       	subi	r30, 0xAC	; 172
 60a:	fe 4f       	sbci	r31, 0xFE	; 254
 60c:	20 81       	ld	r18, Z
 60e:	30 e0       	ldi	r19, 0x00	; 0
		dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 610:	31 96       	adiw	r30, 0x01	; 1
 612:	60 81       	ld	r22, Z
 614:	70 e0       	ldi	r23, 0x00	; 0
		dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 616:	31 96       	adiw	r30, 0x01	; 1
 618:	40 81       	ld	r20, Z
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	f9 01       	movw	r30, r18
 61e:	35 96       	adiw	r30, 0x05	; 5
 620:	e0 0f       	add	r30, r16
 622:	f1 1f       	adc	r31, r17
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
	for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
	{
		dimmColor(&PixelsDimmed[WS2812_POS_ABS_RED(i)], Pixels[WS2812_POS_ABS_RED(i)]);
 628:	e0 80       	ld	r14, Z
	// functions
	void sendData(byte*, uint16_t);
	void dimmPixels(byte*, uint16_t);
	void dimmPixel(WS2812PixelType*, WS2812PixelType);
	void dimmPixel(WS2812PixelType*, byte, byte, byte);
	void dimmColor(byte* ColorDimmed, byte Color) { *ColorDimmed = (Color * Brightness) >> 8; }
 62a:	d9 01       	movw	r26, r18
 62c:	a8 0f       	add	r26, r24
 62e:	b9 1f       	adc	r27, r25
 630:	cc 24       	eor	r12, r12
 632:	c3 94       	inc	r12
 634:	d1 2c       	mov	r13, r1
 636:	cc 0e       	add	r12, r28
 638:	dd 1e       	adc	r13, r29
 63a:	ac 0d       	add	r26, r12
 63c:	bd 1d       	adc	r27, r13
 63e:	e9 9c       	mul	r14, r9
 640:	70 01       	movw	r14, r0
 642:	11 24       	eor	r1, r1
 644:	fc 92       	st	X, r15
 646:	3f 01       	movw	r6, r30
 648:	62 1a       	sub	r6, r18
 64a:	73 0a       	sbc	r7, r19
		dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 64c:	73 01       	movw	r14, r6
 64e:	e6 0e       	add	r14, r22
 650:	f7 1e       	adc	r15, r23
 652:	d7 01       	movw	r26, r14
 654:	cc 90       	ld	r12, X
 656:	7b 01       	movw	r14, r22
 658:	e8 0e       	add	r14, r24
 65a:	f9 1e       	adc	r15, r25
 65c:	a1 e0       	ldi	r26, 0x01	; 1
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	ac 0f       	add	r26, r28
 662:	bd 1f       	adc	r27, r29
 664:	ea 0e       	add	r14, r26
 666:	fb 1e       	adc	r15, r27
 668:	9c 9c       	mul	r9, r12
 66a:	60 01       	movw	r12, r0
 66c:	11 24       	eor	r1, r1
 66e:	d7 01       	movw	r26, r14
 670:	dc 92       	st	X, r13
		dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 672:	d3 01       	movw	r26, r6
 674:	a4 0f       	add	r26, r20
 676:	b5 1f       	adc	r27, r21
 678:	ec 90       	ld	r14, X
 67a:	da 01       	movw	r26, r20
 67c:	a8 0f       	add	r26, r24
 67e:	b9 1f       	adc	r27, r25
 680:	cc 24       	eor	r12, r12
 682:	c3 94       	inc	r12
 684:	d1 2c       	mov	r13, r1
 686:	cc 0e       	add	r12, r28
 688:	dd 1e       	adc	r13, r29
 68a:	ac 0d       	add	r26, r12
 68c:	bd 1d       	adc	r27, r13
 68e:	9e 9c       	mul	r9, r14
 690:	70 01       	movw	r14, r0
 692:	11 24       	eor	r1, r1
 694:	fc 92       	st	X, r15
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
	for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
 696:	03 96       	adiw	r24, 0x03	; 3
 698:	33 96       	adiw	r30, 0x03	; 3
 69a:	8a 34       	cpi	r24, 0x4A	; 74
 69c:	a1 e0       	ldi	r26, 0x01	; 1
 69e:	9a 07       	cpc	r25, r26
 6a0:	19 f6       	brne	.-122    	; 0x628 <_ZN6WS28124showEv+0xb8>
#if (WS2812_RESET_TIMER == STD_ON)
	if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
#endif
		if(Brightness != 255) {
			dimmPixels(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
			sendData(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 6a2:	4a e4       	ldi	r20, 0x4A	; 74
 6a4:	51 e0       	ldi	r21, 0x01	; 1
 6a6:	b6 01       	movw	r22, r12
 6a8:	a2 cf       	rjmp	.-188    	; 0x5ee <_ZN6WS28124showEv+0x7e>
		return E_OK;
	} else {
		return E_NOT_OK;
	}
#endif
} /* show */
 6aa:	c6 5b       	subi	r28, 0xB6	; 182
 6ac:	de 4f       	sbci	r29, 0xFE	; 254
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	0f 91       	pop	r16
 6c0:	ff 90       	pop	r15
 6c2:	ef 90       	pop	r14
 6c4:	df 90       	pop	r13
 6c6:	cf 90       	pop	r12
 6c8:	bf 90       	pop	r11
 6ca:	af 90       	pop	r10
 6cc:	9f 90       	pop	r9
 6ce:	7f 90       	pop	r7
 6d0:	6f 90       	pop	r6
 6d2:	08 95       	ret

000006d4 <initVariant>:
 6d4:	08 95       	ret

000006d6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6d6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <init>

	initVariant();
 6da:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6de:	0e 94 2c 01 	call	0x258	; 0x258 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6e2:	c0 e0       	ldi	r28, 0x00	; 0
 6e4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 6e6:	0e 94 2d 01 	call	0x25a	; 0x25a <loop>
		if (serialEventRun) serialEventRun();
 6ea:	20 97       	sbiw	r28, 0x00	; 0
 6ec:	e1 f3       	breq	.-8      	; 0x6e6 <main+0x10>
 6ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 6f2:	f9 cf       	rjmp	.-14     	; 0x6e6 <main+0x10>

000006f4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	2f 93       	push	r18
 700:	3f 93       	push	r19
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <timer0_millis>
 70e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <timer0_millis+0x1>
 712:	a0 91 62 02 	lds	r26, 0x0262	; 0x800262 <timer0_millis+0x2>
 716:	b0 91 63 02 	lds	r27, 0x0263	; 0x800263 <timer0_millis+0x3>
 71a:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <timer0_fract>
 71e:	23 e0       	ldi	r18, 0x03	; 3
 720:	23 0f       	add	r18, r19
 722:	2d 37       	cpi	r18, 0x7D	; 125
 724:	20 f4       	brcc	.+8      	; 0x72e <__vector_16+0x3a>
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	a1 1d       	adc	r26, r1
 72a:	b1 1d       	adc	r27, r1
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__vector_16+0x44>
 72e:	26 e8       	ldi	r18, 0x86	; 134
 730:	23 0f       	add	r18, r19
 732:	02 96       	adiw	r24, 0x02	; 2
 734:	a1 1d       	adc	r26, r1
 736:	b1 1d       	adc	r27, r1
 738:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <timer0_fract>
 73c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <timer0_millis>
 740:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <timer0_millis+0x1>
 744:	a0 93 62 02 	sts	0x0262, r26	; 0x800262 <timer0_millis+0x2>
 748:	b0 93 63 02 	sts	0x0263, r27	; 0x800263 <timer0_millis+0x3>
 74c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer0_overflow_count>
 750:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer0_overflow_count+0x1>
 754:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <timer0_overflow_count+0x2>
 758:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <timer0_overflow_count+0x3>
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	a1 1d       	adc	r26, r1
 760:	b1 1d       	adc	r27, r1
 762:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <timer0_overflow_count>
 766:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <timer0_overflow_count+0x1>
 76a:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <timer0_overflow_count+0x2>
 76e:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <timer0_overflow_count+0x3>
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	3f 91       	pop	r19
 77c:	2f 91       	pop	r18
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	0f 90       	pop	r0
 784:	1f 90       	pop	r1
 786:	18 95       	reti

00000788 <micros>:
 788:	3f b7       	in	r19, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer0_overflow_count>
 790:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer0_overflow_count+0x1>
 794:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <timer0_overflow_count+0x2>
 798:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <timer0_overflow_count+0x3>
 79c:	26 b5       	in	r18, 0x26	; 38
 79e:	a8 9b       	sbis	0x15, 0	; 21
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <micros+0x24>
 7a2:	2f 3f       	cpi	r18, 0xFF	; 255
 7a4:	19 f0       	breq	.+6      	; 0x7ac <micros+0x24>
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	a1 1d       	adc	r26, r1
 7aa:	b1 1d       	adc	r27, r1
 7ac:	3f bf       	out	0x3f, r19	; 63
 7ae:	ba 2f       	mov	r27, r26
 7b0:	a9 2f       	mov	r26, r25
 7b2:	98 2f       	mov	r25, r24
 7b4:	88 27       	eor	r24, r24
 7b6:	82 0f       	add	r24, r18
 7b8:	91 1d       	adc	r25, r1
 7ba:	a1 1d       	adc	r26, r1
 7bc:	b1 1d       	adc	r27, r1
 7be:	bc 01       	movw	r22, r24
 7c0:	cd 01       	movw	r24, r26
 7c2:	42 e0       	ldi	r20, 0x02	; 2
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	4a 95       	dec	r20
 7ce:	d1 f7       	brne	.-12     	; 0x7c4 <micros+0x3c>
 7d0:	08 95       	ret

000007d2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7d2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7d4:	84 b5       	in	r24, 0x24	; 36
 7d6:	82 60       	ori	r24, 0x02	; 2
 7d8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7da:	84 b5       	in	r24, 0x24	; 36
 7dc:	81 60       	ori	r24, 0x01	; 1
 7de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7e0:	85 b5       	in	r24, 0x25	; 37
 7e2:	82 60       	ori	r24, 0x02	; 2
 7e4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 7e6:	85 b5       	in	r24, 0x25	; 37
 7e8:	81 60       	ori	r24, 0x01	; 1
 7ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 7ec:	ee e6       	ldi	r30, 0x6E	; 110
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	81 60       	ori	r24, 0x01	; 1
 7f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 7f6:	e1 e8       	ldi	r30, 0x81	; 129
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 7fc:	80 81       	ld	r24, Z
 7fe:	82 60       	ori	r24, 0x02	; 2
 800:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 802:	80 81       	ld	r24, Z
 804:	81 60       	ori	r24, 0x01	; 1
 806:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 808:	e0 e8       	ldi	r30, 0x80	; 128
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 812:	e1 eb       	ldi	r30, 0xB1	; 177
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	84 60       	ori	r24, 0x04	; 4
 81a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 81c:	e0 eb       	ldi	r30, 0xB0	; 176
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	81 60       	ori	r24, 0x01	; 1
 824:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 826:	ea e7       	ldi	r30, 0x7A	; 122
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	84 60       	ori	r24, 0x04	; 4
 82e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 830:	80 81       	ld	r24, Z
 832:	82 60       	ori	r24, 0x02	; 2
 834:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 836:	80 81       	ld	r24, Z
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 83c:	80 81       	ld	r24, Z
 83e:	80 68       	ori	r24, 0x80	; 128
 840:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 842:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 846:	08 95       	ret

00000848 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	fc 01       	movw	r30, r24
 850:	e7 52       	subi	r30, 0x27	; 39
 852:	fe 4f       	sbci	r31, 0xFE	; 254
 854:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 856:	fc 01       	movw	r30, r24
 858:	e3 51       	subi	r30, 0x13	; 19
 85a:	fe 4f       	sbci	r31, 0xFE	; 254
 85c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 85e:	88 23       	and	r24, r24
 860:	61 f1       	breq	.+88     	; 0x8ba <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	fc 01       	movw	r30, r24
 86a:	e5 5f       	subi	r30, 0xF5	; 245
 86c:	fd 4f       	sbci	r31, 0xFD	; 253
 86e:	c5 91       	lpm	r28, Z+
 870:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 872:	fc 01       	movw	r30, r24
 874:	ef 5f       	subi	r30, 0xFF	; 255
 876:	fd 4f       	sbci	r31, 0xFD	; 253
 878:	a5 91       	lpm	r26, Z+
 87a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 87c:	61 11       	cpse	r22, r1
 87e:	09 c0       	rjmp	.+18     	; 0x892 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 880:	9f b7       	in	r25, 0x3f	; 63
                cli();
 882:	f8 94       	cli
		*reg &= ~bit;
 884:	88 81       	ld	r24, Y
 886:	20 95       	com	r18
 888:	82 23       	and	r24, r18
 88a:	88 83       	st	Y, r24
		*out &= ~bit;
 88c:	ec 91       	ld	r30, X
 88e:	2e 23       	and	r18, r30
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 892:	62 30       	cpi	r22, 0x02	; 2
 894:	61 f4       	brne	.+24     	; 0x8ae <pinMode+0x66>
		uint8_t oldSREG = SREG;
 896:	9f b7       	in	r25, 0x3f	; 63
                cli();
 898:	f8 94       	cli
		*reg &= ~bit;
 89a:	88 81       	ld	r24, Y
 89c:	32 2f       	mov	r19, r18
 89e:	30 95       	com	r19
 8a0:	83 23       	and	r24, r19
 8a2:	88 83       	st	Y, r24
		*out |= bit;
 8a4:	ec 91       	ld	r30, X
 8a6:	2e 2b       	or	r18, r30
 8a8:	2c 93       	st	X, r18
		SREG = oldSREG;
 8aa:	9f bf       	out	0x3f, r25	; 63
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 8ae:	8f b7       	in	r24, 0x3f	; 63
                cli();
 8b0:	f8 94       	cli
		*reg |= bit;
 8b2:	e8 81       	ld	r30, Y
 8b4:	2e 2b       	or	r18, r30
 8b6:	28 83       	st	Y, r18
		SREG = oldSREG;
 8b8:	8f bf       	out	0x3f, r24	; 63
	}
}
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	08 95       	ret

000008c0 <__udivmodqi4>:
 8c0:	99 1b       	sub	r25, r25
 8c2:	79 e0       	ldi	r23, 0x09	; 9
 8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__udivmodqi4_ep>

000008c6 <__udivmodqi4_loop>:
 8c6:	99 1f       	adc	r25, r25
 8c8:	96 17       	cp	r25, r22
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <__udivmodqi4_ep>
 8cc:	96 1b       	sub	r25, r22

000008ce <__udivmodqi4_ep>:
 8ce:	88 1f       	adc	r24, r24
 8d0:	7a 95       	dec	r23
 8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__udivmodqi4_loop>
 8d4:	80 95       	com	r24
 8d6:	08 95       	ret

000008d8 <__tablejump2__>:
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	05 90       	lpm	r0, Z+
 8de:	f4 91       	lpm	r31, Z
 8e0:	e0 2d       	mov	r30, r0
 8e2:	09 94       	ijmp

000008e4 <memcpy_P>:
 8e4:	fb 01       	movw	r30, r22
 8e6:	dc 01       	movw	r26, r24
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <memcpy_P+0xa>
 8ea:	05 90       	lpm	r0, Z+
 8ec:	0d 92       	st	X+, r0
 8ee:	41 50       	subi	r20, 0x01	; 1
 8f0:	50 40       	sbci	r21, 0x00	; 0
 8f2:	d8 f7       	brcc	.-10     	; 0x8ea <memcpy_P+0x6>
 8f4:	08 95       	ret

000008f6 <__do_global_dtors>:
 8f6:	11 e0       	ldi	r17, 0x01	; 1
 8f8:	cc e0       	ldi	r28, 0x0C	; 12
 8fa:	d1 e0       	ldi	r29, 0x01	; 1
 8fc:	04 c0       	rjmp	.+8      	; 0x906 <__stack+0x7>
 8fe:	fe 01       	movw	r30, r28
 900:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__tablejump2__>
 904:	21 96       	adiw	r28, 0x01	; 1
 906:	cd 30       	cpi	r28, 0x0D	; 13
 908:	d1 07       	cpc	r29, r17
 90a:	c9 f7       	brne	.-14     	; 0x8fe <__do_global_dtors+0x8>
 90c:	f8 94       	cli

0000090e <__stop_program>:
 90e:	ff cf       	rjmp	.-2      	; 0x90e <__stop_program>
