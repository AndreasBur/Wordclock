
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000618  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  00800100  00800100  0000068c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ecb  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3b  00000000  00000000  000047b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c0  00000000  00000000  000055f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  000067b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019a4  00000000  00000000  00006c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002189  00000000  00000000  0000861c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000a7a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__dtors_end>
   4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
   8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
   c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  40:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_16>
  44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

00000068 <_ZN7Display21WordIlluminationTableE>:
  68:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
  78:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
  88:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
  98:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
  a8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
  b8:	03                                                  .

000000b9 <digital_pin_to_bit_mask_PGM>:
  b9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  c9:	04 08 10 20                                         ... 

000000cd <digital_pin_to_port_PGM>:
  cd:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  dd:	03 03 03 03                                         ....

000000e1 <port_to_output_PGM>:
  e1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000eb <port_to_mode_PGM>:
  eb:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000f6 <__ctors_start>:
  f6:	bf 00       	.word	0x00bf	; ????

000000f8 <__ctors_end>:
  f8:	c3 00       	.word	0x00c3	; ????

000000fa <__dtors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d8 e0       	ldi	r29, 0x08	; 8
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a5 36       	cpi	r26, 0x65	; 101
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>

00000116 <__do_global_ctors>:
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	cc e7       	ldi	r28, 0x7C	; 124
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	04 c0       	rjmp	.+8      	; 0x126 <__do_global_ctors+0x10>
 11e:	21 97       	sbiw	r28, 0x01	; 1
 120:	fe 01       	movw	r30, r28
 122:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__tablejump2__>
 126:	cb 37       	cpi	r28, 0x7B	; 123
 128:	d1 07       	cpc	r29, r17
 12a:	c9 f7       	brne	.-14     	; 0x11e <__do_global_ctors+0x8>
 12c:	0e 94 29 02 	call	0x452	; 0x452 <main>
 130:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__do_global_dtors>

00000134 <__bad_interrupt>:
 134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <setup>:

	// set methods
	

	// char methods
	stdReturnType setCharacter(DisplayCharactersType Character) { return Pixels.setPixel(Character, DisplayColor); }
 138:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <_edata+0x157>
 13c:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <_edata+0x158>
 140:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <_edata+0x159>
 144:	61 e1       	ldi	r22, 0x11	; 17
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6WS28128setPixelEh15WS2812PixelType>
void setup() {
  // put your setup code here, to run once:
  //WordClockDisplay.setChar(2, 0, 10, 20, 30);
  //WcDisplayCharacter.getChar(1,1, &Char);
  WordClockDisplay.setCharacter(DISPLAY_CHARACTER_A_1);
  WordClockDisplay.setWord(DISPLAY_WORD_DREIVIERTEL);
 14e:	69 e0       	ldi	r22, 0x09	; 9
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN7Display7setWordE16DisplayWordsType>
  if (WordClockDisplay.clearAllWords() == E_OK) {
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7Display13clearAllWordsEv>
 160:	81 11       	cpse	r24, r1
 162:	07 c0       	rjmp	.+14     	; 0x172 <setup+0x3a>
		flag = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <flag+0x1>
 16c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <flag>
 170:	08 95       	ret
  } else {
		flag = 0;
 172:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <flag+0x1>
 176:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <flag>
 17a:	08 95       	ret

0000017c <loop>:


 
}

void loop() {
 17c:	08 95       	ret

0000017e <_GLOBAL__sub_I_flag>:
ï»¿/*Begining of Auto generated code by Atmel studio */
#include <Arduino.h>
#include "Display.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_ZN7DisplayC1Ev>

00000186 <_GLOBAL__sub_D_flag>:
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0c 94 ca 00 	jmp	0x194	; 0x194 <_ZN7DisplayD1Ev>

0000018e <_ZN7DisplayC1Ev>:
stdReturnType Display::setPixel(byte Index)
{
    byte Row = Index / DISPLAY_NUMBER_OF_COLUMNS;
    byte Column = Index % DISPLAY_NUMBER_OF_COLUMNS;

    return setPixel(Row, Column);
 18e:	6a e0       	ldi	r22, 0x0A	; 10
 190:	0c 94 be 01 	jmp	0x37c	; 0x37c <_ZN6WS2812C1Eh>

00000194 <_ZN7DisplayD1Ev>:
 194:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_ZN6WS2812D1Ev>

00000198 <_ZN7Display21transformToSerpentineEhh>:
 198:	60 fd       	sbrc	r22, 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_ZN7Display21transformToSerpentineEhh+0x8>
 19c:	84 2f       	mov	r24, r20
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <_ZN7Display21transformToSerpentineEhh+0xc>
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	84 1b       	sub	r24, r20
 1a4:	9b e0       	ldi	r25, 0x0B	; 11
 1a6:	69 9f       	mul	r22, r25
 1a8:	80 0d       	add	r24, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	08 95       	ret

000001ae <_ZN7Display8setPixelEhh>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	6a 30       	cpi	r22, 0x0A	; 10
 1b4:	88 f4       	brcc	.+34     	; 0x1d8 <_ZN7Display8setPixelEhh+0x2a>
 1b6:	4b 30       	cpi	r20, 0x0B	; 11
 1b8:	78 f4       	brcc	.+30     	; 0x1d8 <_ZN7Display8setPixelEhh+0x2a>
 1ba:	ec 01       	movw	r28, r24
 1bc:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN7Display21transformToSerpentineEhh>
 1c0:	fe 01       	movw	r30, r28
 1c2:	e9 5a       	subi	r30, 0xA9	; 169
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	20 81       	ld	r18, Z
 1c8:	31 81       	ldd	r19, Z+1	; 0x01
 1ca:	42 81       	ldd	r20, Z+2	; 0x02
 1cc:	68 2f       	mov	r22, r24
 1ce:	ce 01       	movw	r24, r28
 1d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN6WS28128setPixelEh15WS2812PixelType>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <_ZN7Display8setPixelEhh+0x2c>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <_ZN7Display7setWordE16DisplayWordsType>:
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	6b 31       	cpi	r22, 0x1B	; 27
 1f0:	18 f5       	brcc	.+70     	; 0x238 <_ZN7Display7setWordE16DisplayWordsType+0x58>
 1f2:	8c 01       	movw	r16, r24
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	fb 01       	movw	r30, r22
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	6e 0f       	add	r22, r30
 1fe:	7f 1f       	adc	r23, r31
 200:	fb 01       	movw	r30, r22
 202:	e8 59       	subi	r30, 0x98	; 152
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	e4 90       	lpm	r14, Z
 208:	fb 01       	movw	r30, r22
 20a:	e7 59       	subi	r30, 0x97	; 151
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	d4 90       	lpm	r13, Z
 210:	fb 01       	movw	r30, r22
 212:	e6 59       	subi	r30, 0x96	; 150
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	c4 91       	lpm	r28, Z
 218:	d0 e0       	ldi	r29, 0x00	; 0
 21a:	f1 2c       	mov	r15, r1
 21c:	dc 17       	cp	r29, r28
 21e:	71 f0       	breq	.+28     	; 0x23c <_ZN7Display7setWordE16DisplayWordsType+0x5c>
 220:	4d 2d       	mov	r20, r13
 222:	6d 2f       	mov	r22, r29
 224:	6e 0d       	add	r22, r14
 226:	c8 01       	movw	r24, r16
 228:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7Display8setPixelEhh>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	11 f4       	brne	.+4      	; 0x234 <_ZN7Display7setWordE16DisplayWordsType+0x54>
 230:	ff 24       	eor	r15, r15
 232:	f3 94       	inc	r15
 234:	df 5f       	subi	r29, 0xFF	; 255
 236:	f2 cf       	rjmp	.-28     	; 0x21c <_ZN7Display7setWordE16DisplayWordsType+0x3c>
 238:	ff 24       	eor	r15, r15
 23a:	f3 94       	inc	r15
 23c:	8f 2d       	mov	r24, r15
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	08 95       	ret

0000024e <_ZN7Display10clearPixelEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearPixel(byte Row, byte Column)
{
 24e:	0f 93       	push	r16
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
    if(Row < DISPLAY_NUMBER_OF_ROWS && Column < DISPLAY_NUMBER_OF_COLUMNS) {
 254:	6a 30       	cpi	r22, 0x0A	; 10
 256:	70 f4       	brcc	.+28     	; 0x274 <_ZN7Display10clearPixelEhh+0x26>
 258:	4b 30       	cpi	r20, 0x0B	; 11
 25a:	60 f4       	brcc	.+24     	; 0x274 <_ZN7Display10clearPixelEhh+0x26>
 25c:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
        /* if led stripe is snake or serpentine then odd row: count from right to left */
        Pixels.setPixel(transformToSerpentine(Row, Column), 0, 0, 0);
 25e:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN7Display21transformToSerpentineEhh>
 262:	00 e0       	ldi	r16, 0x00	; 0
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	68 2f       	mov	r22, r24
 26a:	ce 01       	movw	r24, r28
 26c:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN6WS28128setPixelEhhhh>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	01 c0       	rjmp	.+2      	; 0x276 <_ZN7Display10clearPixelEhh+0x28>
#else
        Pixels.setPixel((Row * DISPLAY_NUMBER_OF_COLUMNS) + Column, 0, 0, 0);
#endif
        return E_OK;
    } else {
        return E_NOT_OK;
 274:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* clearPixel */
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <_ZN7Display9clearWordE16DisplayWordsType>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearWord(DisplayWordsType Word)
{
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
    stdReturnType ReturnValue = E_OK;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
 28c:	6b 31       	cpi	r22, 0x1B	; 27
 28e:	18 f5       	brcc	.+70     	; 0x2d6 <_ZN7Display9clearWordE16DisplayWordsType+0x58>
 290:	8c 01       	movw	r16, r24
		byte Row = (byte) pgm_read_byte(&WordIlluminationTable[Word].Row);
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	fb 01       	movw	r30, r22
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	6e 0f       	add	r22, r30
 29c:	7f 1f       	adc	r23, r31
 29e:	fb 01       	movw	r30, r22
 2a0:	e8 59       	subi	r30, 0x98	; 152
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	e4 90       	lpm	r14, Z
		byte Column = (byte) pgm_read_byte(&WordIlluminationTable[Word].Column);
 2a6:	fb 01       	movw	r30, r22
 2a8:	e7 59       	subi	r30, 0x97	; 151
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	d4 90       	lpm	r13, Z
		byte Length = (byte) pgm_read_byte(&WordIlluminationTable[Word].Length);
 2ae:	fb 01       	movw	r30, r22
 2b0:	e6 59       	subi	r30, 0x96	; 150
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	c4 91       	lpm	r28, Z

		for(byte Index = 0; Index < Length; Index++) if(clearPixel(Row, Column + Index) == E_NOT_OK) ReturnValue = E_NOT_OK;
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearWord(DisplayWordsType Word)
{
    stdReturnType ReturnValue = E_OK;
 2b8:	f1 2c       	mov	r15, r1
    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
		byte Row = (byte) pgm_read_byte(&WordIlluminationTable[Word].Row);
		byte Column = (byte) pgm_read_byte(&WordIlluminationTable[Word].Column);
		byte Length = (byte) pgm_read_byte(&WordIlluminationTable[Word].Length);

		for(byte Index = 0; Index < Length; Index++) if(clearPixel(Row, Column + Index) == E_NOT_OK) ReturnValue = E_NOT_OK;
 2ba:	cd 17       	cp	r28, r29
 2bc:	71 f0       	breq	.+28     	; 0x2da <_ZN7Display9clearWordE16DisplayWordsType+0x5c>
 2be:	4d 2d       	mov	r20, r13
 2c0:	4d 0f       	add	r20, r29
 2c2:	6e 2d       	mov	r22, r14
 2c4:	c8 01       	movw	r24, r16
 2c6:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN7Display10clearPixelEhh>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <_ZN7Display9clearWordE16DisplayWordsType+0x54>
 2ce:	ff 24       	eor	r15, r15
 2d0:	f3 94       	inc	r15
 2d2:	df 5f       	subi	r29, 0xFF	; 255
 2d4:	f2 cf       	rjmp	.-28     	; 0x2ba <_ZN7Display9clearWordE16DisplayWordsType+0x3c>
	} else {
		ReturnValue = E_NOT_OK;
 2d6:	ff 24       	eor	r15, r15
 2d8:	f3 94       	inc	r15
	}
	return ReturnValue;
} /* clearWord */
 2da:	8f 2d       	mov	r24, r15
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	08 95       	ret

000002ec <_ZN7Display13clearAllWordsEv>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearAllWords()
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	8c 01       	movw	r16, r24
    stdReturnType ReturnValue = E_OK;

	for(byte i = DISPLAY_WORD_ES; i < DISPLAY_WORD_NUMBER_OF_WORDS; i++) if(clearWord((DisplayWordsType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 2f6:	c1 e0       	ldi	r28, 0x01	; 1
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearAllWords()
{
    stdReturnType ReturnValue = E_OK;
 2f8:	d0 e0       	ldi	r29, 0x00	; 0

	for(byte i = DISPLAY_WORD_ES; i < DISPLAY_WORD_NUMBER_OF_WORDS; i++) if(clearWord((DisplayWordsType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 2fa:	6c 2f       	mov	r22, r28
 2fc:	c8 01       	movw	r24, r16
 2fe:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN7Display9clearWordE16DisplayWordsType>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	09 f4       	brne	.+2      	; 0x308 <_ZN7Display13clearAllWordsEv+0x1c>
 306:	d1 e0       	ldi	r29, 0x01	; 1
 308:	cf 5f       	subi	r28, 0xFF	; 255
 30a:	cb 31       	cpi	r28, 0x1B	; 27
 30c:	b1 f7       	brne	.-20     	; 0x2fa <_ZN7Display13clearAllWordsEv+0xe>
	return ReturnValue;
} /* clearWord */
 30e:	8d 2f       	mov	r24, r29
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <_ZN6WS2812D1Ev>:
		}
		return E_OK;
	} else {
		return E_NOT_OK;
	}
} /* getPixel */
 31a:	08 95       	ret

0000031c <_ZN6WS28126setPinEh>:
 31c:	dc 01       	movw	r26, r24
 31e:	64 31       	cpi	r22, 0x14	; 20
 320:	58 f5       	brcc	.+86     	; 0x378 <_ZN6WS28126setPinEh+0x5c>
 322:	86 2f       	mov	r24, r22
 324:	26 2f       	mov	r18, r22
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	f9 01       	movw	r30, r18
 32a:	e7 54       	subi	r30, 0x47	; 71
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	e4 91       	lpm	r30, Z
 330:	ec 93       	st	X, r30
 332:	23 53       	subi	r18, 0x33	; 51
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	f9 01       	movw	r30, r18
 338:	94 91       	lpm	r25, Z
 33a:	e9 2f       	mov	r30, r25
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	ef 51       	subi	r30, 0x1F	; 31
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	45 91       	lpm	r20, Z+
 348:	54 91       	lpm	r21, Z
 34a:	12 96       	adiw	r26, 0x02	; 2
 34c:	5c 93       	st	X, r21
 34e:	4e 93       	st	-X, r20
 350:	11 97       	sbiw	r26, 0x01	; 1
 352:	f9 01       	movw	r30, r18
 354:	24 91       	lpm	r18, Z
 356:	e2 2f       	mov	r30, r18
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	e5 51       	subi	r30, 0x15	; 21
 360:	ff 4f       	sbci	r31, 0xFF	; 255
 362:	25 91       	lpm	r18, Z+
 364:	34 91       	lpm	r19, Z
 366:	14 96       	adiw	r26, 0x04	; 4
 368:	3c 93       	st	X, r19
 36a:	2e 93       	st	-X, r18
 36c:	13 97       	sbiw	r26, 0x03	; 3
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	0e 94 bd 02 	call	0x57a	; 0x57a <pinMode>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	08 95       	ret

0000037c <_ZN6WS2812C1Eh>:
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6WS28126setPinEh>
 386:	fe 01       	movw	r30, r28
 388:	e1 5b       	subi	r30, 0xB1	; 177
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	80 83       	st	Z, r24
 390:	31 96       	adiw	r30, 0x01	; 1
 392:	10 82       	st	Z, r1
 394:	11 82       	std	Z+1, r1	; 0x01
 396:	12 82       	std	Z+2, r1	; 0x02
 398:	13 82       	std	Z+3, r1	; 0x03
 39a:	eb 54       	subi	r30, 0x4B	; 75
 39c:	f1 40       	sbci	r31, 0x01	; 1
 39e:	8a e4       	ldi	r24, 0x4A	; 74
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	df 01       	movw	r26, r30
 3a4:	9c 01       	movw	r18, r24
 3a6:	1d 92       	st	X+, r1
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	30 40       	sbci	r19, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <_ZN6WS2812C1Eh+0x2a>
 3ae:	ef 5a       	subi	r30, 0xAF	; 175
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	10 82       	st	Z, r1
 3b4:	32 97       	sbiw	r30, 0x02	; 2
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 83       	st	Z, r24
 3ba:	cb 5a       	subi	r28, 0xAB	; 171
 3bc:	de 4f       	sbci	r29, 0xFE	; 254
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	88 83       	st	Y, r24
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <_ZN6WS28128setPixelEh15WS2812PixelType>:
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
stdReturnType WS2812::setPixel(byte Index, WS2812PixelType Pixel)
{
	if(Index < WS2812_NUMBER_OF_LEDS) {
 3c8:	6e 36       	cpi	r22, 0x6E	; 110
 3ca:	e8 f4       	brcc	.+58     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		Pixels[WS2812_POS_ABS_RED(Index)] = Pixel.Red;
 3cc:	fc 01       	movw	r30, r24
 3ce:	ec 5a       	subi	r30, 0xAC	; 172
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	50 81       	ld	r21, Z
 3d4:	fc 01       	movw	r30, r24
 3d6:	e6 0f       	add	r30, r22
 3d8:	f1 1d       	adc	r31, r1
 3da:	bf 01       	movw	r22, r30
 3dc:	e5 0f       	add	r30, r21
 3de:	f1 1d       	adc	r31, r1
 3e0:	25 83       	std	Z+5, r18	; 0x05
		Pixels[WS2812_POS_ABS_GREEN(Index)] = Pixel.Green;
 3e2:	fc 01       	movw	r30, r24
 3e4:	eb 5a       	subi	r30, 0xAB	; 171
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	20 81       	ld	r18, Z
 3ea:	fb 01       	movw	r30, r22
 3ec:	e2 0f       	add	r30, r18
 3ee:	f1 1d       	adc	r31, r1
 3f0:	35 83       	std	Z+5, r19	; 0x05
		Pixels[WS2812_POS_ABS_BLUE(Index)] = Pixel.Blue;
 3f2:	fc 01       	movw	r30, r24
 3f4:	ea 5a       	subi	r30, 0xAA	; 170
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	80 81       	ld	r24, Z
 3fa:	fb 01       	movw	r30, r22
 3fc:	e8 0f       	add	r30, r24
 3fe:	f1 1d       	adc	r31, r1
 400:	45 83       	std	Z+5, r20	; 0x05
		return E_OK;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret
	} else {
		return E_NOT_OK;
 406:	81 e0       	ldi	r24, 0x01	; 1
	}
} /* setPixel */
 408:	08 95       	ret

0000040a <_ZN6WS28128setPixelEhhhh>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
stdReturnType WS2812::setPixel(byte Index, byte Red, byte Green, byte Blue)
{
 40a:	0f 93       	push	r16
	if(Index < WS2812_NUMBER_OF_LEDS) {
 40c:	6e 36       	cpi	r22, 0x6E	; 110
 40e:	e8 f4       	brcc	.+58     	; 0x44a <_ZN6WS28128setPixelEhhhh+0x40>
		Pixels[WS2812_POS_ABS_RED(Index)] = Red;
 410:	fc 01       	movw	r30, r24
 412:	ec 5a       	subi	r30, 0xAC	; 172
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	30 81       	ld	r19, Z
 418:	fc 01       	movw	r30, r24
 41a:	e6 0f       	add	r30, r22
 41c:	f1 1d       	adc	r31, r1
 41e:	bf 01       	movw	r22, r30
 420:	e3 0f       	add	r30, r19
 422:	f1 1d       	adc	r31, r1
 424:	45 83       	std	Z+5, r20	; 0x05
		Pixels[WS2812_POS_ABS_GREEN(Index)] = Green;
 426:	fc 01       	movw	r30, r24
 428:	eb 5a       	subi	r30, 0xAB	; 171
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	30 81       	ld	r19, Z
 42e:	fb 01       	movw	r30, r22
 430:	e3 0f       	add	r30, r19
 432:	f1 1d       	adc	r31, r1
 434:	25 83       	std	Z+5, r18	; 0x05
		Pixels[WS2812_POS_ABS_BLUE(Index)] = Blue;
 436:	fc 01       	movw	r30, r24
 438:	ea 5a       	subi	r30, 0xAA	; 170
 43a:	fe 4f       	sbci	r31, 0xFE	; 254
 43c:	80 81       	ld	r24, Z
 43e:	fb 01       	movw	r30, r22
 440:	e8 0f       	add	r30, r24
 442:	f1 1d       	adc	r31, r1
 444:	05 83       	std	Z+5, r16	; 0x05
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	01 c0       	rjmp	.+2      	; 0x44c <_ZN6WS28128setPixelEhhhh+0x42>
		return E_OK;
	} else {
		return E_NOT_OK;
 44a:	81 e0       	ldi	r24, 0x01	; 1
	}
} /* setPixel */
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <initVariant>:
 450:	08 95       	ret

00000452 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 452:	0e 94 82 02 	call	0x504	; 0x504 <init>

	initVariant();
 456:	0e 94 28 02 	call	0x450	; 0x450 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 45a:	0e 94 9c 00 	call	0x138	; 0x138 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 462:	0e 94 be 00 	call	0x17c	; 0x17c <loop>
		if (serialEventRun) serialEventRun();
 466:	20 97       	sbiw	r28, 0x00	; 0
 468:	e1 f3       	breq	.-8      	; 0x462 <main+0x10>
 46a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 46e:	f9 cf       	rjmp	.-14     	; 0x462 <main+0x10>

00000470 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis>
 48a:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x1>
 48e:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <timer0_millis+0x2>
 492:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <timer0_millis+0x3>
 496:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <timer0_fract>
 49a:	23 e0       	ldi	r18, 0x03	; 3
 49c:	23 0f       	add	r18, r19
 49e:	2d 37       	cpi	r18, 0x7D	; 125
 4a0:	20 f4       	brcc	.+8      	; 0x4aa <__vector_16+0x3a>
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	a1 1d       	adc	r26, r1
 4a6:	b1 1d       	adc	r27, r1
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__vector_16+0x44>
 4aa:	26 e8       	ldi	r18, 0x86	; 134
 4ac:	23 0f       	add	r18, r19
 4ae:	02 96       	adiw	r24, 0x02	; 2
 4b0:	a1 1d       	adc	r26, r1
 4b2:	b1 1d       	adc	r27, r1
 4b4:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <timer0_fract>
 4b8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timer0_millis>
 4bc:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <timer0_millis+0x1>
 4c0:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <timer0_millis+0x2>
 4c4:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <timer0_millis+0x3>
 4c8:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 4cc:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 4d0:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 4d4:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	a1 1d       	adc	r26, r1
 4dc:	b1 1d       	adc	r27, r1
 4de:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer0_overflow_count>
 4e2:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer0_overflow_count+0x1>
 4e6:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer0_overflow_count+0x2>
 4ea:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer0_overflow_count+0x3>
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	3f 91       	pop	r19
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 504:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 506:	84 b5       	in	r24, 0x24	; 36
 508:	82 60       	ori	r24, 0x02	; 2
 50a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 50c:	84 b5       	in	r24, 0x24	; 36
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 512:	85 b5       	in	r24, 0x25	; 37
 514:	82 60       	ori	r24, 0x02	; 2
 516:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 518:	85 b5       	in	r24, 0x25	; 37
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 51e:	ee e6       	ldi	r30, 0x6E	; 110
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	81 60       	ori	r24, 0x01	; 1
 526:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 528:	e1 e8       	ldi	r30, 0x81	; 129
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 52e:	80 81       	ld	r24, Z
 530:	82 60       	ori	r24, 0x02	; 2
 532:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 534:	80 81       	ld	r24, Z
 536:	81 60       	ori	r24, 0x01	; 1
 538:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 53a:	e0 e8       	ldi	r30, 0x80	; 128
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	81 60       	ori	r24, 0x01	; 1
 542:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 544:	e1 eb       	ldi	r30, 0xB1	; 177
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	84 60       	ori	r24, 0x04	; 4
 54c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 54e:	e0 eb       	ldi	r30, 0xB0	; 176
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	81 60       	ori	r24, 0x01	; 1
 556:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 558:	ea e7       	ldi	r30, 0x7A	; 122
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	84 60       	ori	r24, 0x04	; 4
 560:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 562:	80 81       	ld	r24, Z
 564:	82 60       	ori	r24, 0x02	; 2
 566:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 568:	80 81       	ld	r24, Z
 56a:	81 60       	ori	r24, 0x01	; 1
 56c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 56e:	80 81       	ld	r24, Z
 570:	80 68       	ori	r24, 0x80	; 128
 572:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 574:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 578:	08 95       	ret

0000057a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	e7 54       	subi	r30, 0x47	; 71
 584:	ff 4f       	sbci	r31, 0xFF	; 255
 586:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 588:	fc 01       	movw	r30, r24
 58a:	e3 53       	subi	r30, 0x33	; 51
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 590:	88 23       	and	r24, r24
 592:	61 f1       	breq	.+88     	; 0x5ec <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	fc 01       	movw	r30, r24
 59c:	e5 51       	subi	r30, 0x15	; 21
 59e:	ff 4f       	sbci	r31, 0xFF	; 255
 5a0:	c5 91       	lpm	r28, Z+
 5a2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 5a4:	fc 01       	movw	r30, r24
 5a6:	ef 51       	subi	r30, 0x1F	; 31
 5a8:	ff 4f       	sbci	r31, 0xFF	; 255
 5aa:	a5 91       	lpm	r26, Z+
 5ac:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 5ae:	61 11       	cpse	r22, r1
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 5b2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5b4:	f8 94       	cli
		*reg &= ~bit;
 5b6:	88 81       	ld	r24, Y
 5b8:	20 95       	com	r18
 5ba:	82 23       	and	r24, r18
 5bc:	88 83       	st	Y, r24
		*out &= ~bit;
 5be:	ec 91       	ld	r30, X
 5c0:	2e 23       	and	r18, r30
 5c2:	0b c0       	rjmp	.+22     	; 0x5da <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 5c4:	62 30       	cpi	r22, 0x02	; 2
 5c6:	61 f4       	brne	.+24     	; 0x5e0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 5c8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5ca:	f8 94       	cli
		*reg &= ~bit;
 5cc:	88 81       	ld	r24, Y
 5ce:	32 2f       	mov	r19, r18
 5d0:	30 95       	com	r19
 5d2:	83 23       	and	r24, r19
 5d4:	88 83       	st	Y, r24
		*out |= bit;
 5d6:	ec 91       	ld	r30, X
 5d8:	2e 2b       	or	r18, r30
 5da:	2c 93       	st	X, r18
		SREG = oldSREG;
 5dc:	9f bf       	out	0x3f, r25	; 63
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 5e0:	8f b7       	in	r24, 0x3f	; 63
                cli();
 5e2:	f8 94       	cli
		*reg |= bit;
 5e4:	e8 81       	ld	r30, Y
 5e6:	2e 2b       	or	r18, r30
 5e8:	28 83       	st	Y, r18
		SREG = oldSREG;
 5ea:	8f bf       	out	0x3f, r24	; 63
	}
}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <__tablejump2__>:
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	05 90       	lpm	r0, Z+
 5f8:	f4 91       	lpm	r31, Z
 5fa:	e0 2d       	mov	r30, r0
 5fc:	09 94       	ijmp

000005fe <__do_global_dtors>:
 5fe:	10 e0       	ldi	r17, 0x00	; 0
 600:	cc e7       	ldi	r28, 0x7C	; 124
 602:	d0 e0       	ldi	r29, 0x00	; 0
 604:	04 c0       	rjmp	.+8      	; 0x60e <__do_global_dtors+0x10>
 606:	fe 01       	movw	r30, r28
 608:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__tablejump2__>
 60c:	21 96       	adiw	r28, 0x01	; 1
 60e:	cd 37       	cpi	r28, 0x7D	; 125
 610:	d1 07       	cpc	r29, r17
 612:	c9 f7       	brne	.-14     	; 0x606 <__do_global_dtors+0x8>
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
