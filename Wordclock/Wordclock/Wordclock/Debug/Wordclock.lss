
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bfa  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d5  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074d  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e0  00000000  00000000  00002499  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_16>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000068 <_ZN16DisplayCharacter17DisplayCharactersE>:
  68:	45 53 4b 49 53 54 4c 46 dc 4e 46 00 5a 45 48 4e     ESKISTLF.NF.ZEHN
  78:	5a 57 41 4e 5a 49 47 00 44 52 45 49 56 49 45 52     ZWANZIG.DREIVIER
  88:	54 45 4c 00 54 47 4e 41 43 48 56 4f 52 4a 4d 00     TEL.TGNACHVORJM.
  98:	48 41 4c 42 51 5a 57 d6 4c 46 50 00 5a 57 45 49     HALBQZW.LFP.ZWEI
  a8:	4e 53 49 45 42 45 4e 00 4b 44 52 45 49 52 48 46     NSIEBEN.KDREIRHF
  b8:	dc 4e 46 00 45 4c 46 4e 45 55 4e 56 49 45 52 00     .NF.ELFNEUNVIER.
  c8:	57 41 43 48 54 5a 45 48 4e 52 53 00 42 53 45 43     WACHTZEHNRS.BSEC
  d8:	48 53 46 4d 55 48 52 00                             HSFMUHR.

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	d8 e0       	ldi	r29, 0x08	; 8
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	ab 30       	cpi	r26, 0x0B	; 11
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 a2 00 	call	0x144	; 0x144 <main>
 100:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <setup>:
//End of Auto generated function prototypes by Atmel Studio

void setup() {
  // put your setup code here, to run once:
  //WordClockDisplay.setChar(2, 0, 10, 20, 30);
  WcDisplayCharacter.getChar(1,1, &Char);
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	31 e0       	ldi	r19, 0x01	; 1
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_ZN16DisplayCharacter7getCharEhhPc>

00000118 <loop>:
}

void loop() {
 118:	08 95       	ret

0000011a <_ZN16DisplayCharacter7getCharEhhPc>:
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType DisplayCharacter::getChar(byte Row, byte Column, char* Char)
{
	if(Row < DISPLAY_NUMBER_OF_ROWS && Column < DISPLAY_NUMBER_OF_COLUMNS) {
 11a:	6a 30       	cpi	r22, 0x0A	; 10
 11c:	80 f4       	brcc	.+32     	; 0x13e <_ZN16DisplayCharacter7getCharEhhPc+0x24>
 11e:	4b 30       	cpi	r20, 0x0B	; 11
 120:	70 f4       	brcc	.+28     	; 0x13e <_ZN16DisplayCharacter7getCharEhhPc+0x24>
		*Char =  pgm_read_byte_near(&DisplayCharacters[Row][Column]);
 122:	e4 2f       	mov	r30, r20
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	68 9f       	mul	r22, r24
 12a:	e0 0d       	add	r30, r0
 12c:	f1 1d       	adc	r31, r1
 12e:	11 24       	eor	r1, r1
 130:	e8 59       	subi	r30, 0x98	; 152
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	e4 91       	lpm	r30, Z
 136:	d9 01       	movw	r26, r18
 138:	ec 93       	st	X, r30
		return E_OK;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
	} else {
		return E_NOT_OK;
 13e:	81 e0       	ldi	r24, 0x01	; 1
	}
} /* getChar */
 140:	08 95       	ret

00000142 <initVariant>:
 142:	08 95       	ret

00000144 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 144:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init>

	initVariant();
 148:	0e 94 a1 00 	call	0x142	; 0x142 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 14c:	0e 94 84 00 	call	0x108	; 0x108 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 154:	0e 94 8c 00 	call	0x118	; 0x118 <loop>
		if (serialEventRun) serialEventRun();
 158:	20 97       	sbiw	r28, 0x00	; 0
 15a:	e1 f3       	breq	.-8      	; 0x154 <main+0x10>
 15c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 160:	f9 cf       	rjmp	.-14     	; 0x154 <main+0x10>

00000162 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer0_millis>
 17c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timer0_millis+0x1>
 180:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <timer0_millis+0x2>
 184:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <timer0_millis+0x3>
 188:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <timer0_fract>
 18c:	23 e0       	ldi	r18, 0x03	; 3
 18e:	23 0f       	add	r18, r19
 190:	2d 37       	cpi	r18, 0x7D	; 125
 192:	20 f4       	brcc	.+8      	; 0x19c <__vector_16+0x3a>
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	a1 1d       	adc	r26, r1
 198:	b1 1d       	adc	r27, r1
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <__vector_16+0x44>
 19c:	26 e8       	ldi	r18, 0x86	; 134
 19e:	23 0f       	add	r18, r19
 1a0:	02 96       	adiw	r24, 0x02	; 2
 1a2:	a1 1d       	adc	r26, r1
 1a4:	b1 1d       	adc	r27, r1
 1a6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <timer0_fract>
 1aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timer0_millis>
 1ae:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timer0_millis+0x1>
 1b2:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <timer0_millis+0x2>
 1b6:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <timer0_millis+0x3>
 1ba:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_overflow_count>
 1be:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_overflow_count+0x1>
 1c2:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_overflow_count+0x2>
 1c6:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_overflow_count+0x3>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	a1 1d       	adc	r26, r1
 1ce:	b1 1d       	adc	r27, r1
 1d0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_overflow_count>
 1d4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_overflow_count+0x1>
 1d8:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_overflow_count+0x2>
 1dc:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_overflow_count+0x3>
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 1f6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 1f8:	84 b5       	in	r24, 0x24	; 36
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 1fe:	84 b5       	in	r24, 0x24	; 36
 200:	81 60       	ori	r24, 0x01	; 1
 202:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 204:	85 b5       	in	r24, 0x25	; 37
 206:	82 60       	ori	r24, 0x02	; 2
 208:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 20a:	85 b5       	in	r24, 0x25	; 37
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 210:	ee e6       	ldi	r30, 0x6E	; 110
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 21a:	e1 e8       	ldi	r30, 0x81	; 129
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 220:	80 81       	ld	r24, Z
 222:	82 60       	ori	r24, 0x02	; 2
 224:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 22c:	e0 e8       	ldi	r30, 0x80	; 128
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 236:	e1 eb       	ldi	r30, 0xB1	; 177
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 240:	e0 eb       	ldi	r30, 0xB0	; 176
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 24a:	ea e7       	ldi	r30, 0x7A	; 122
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	84 60       	ori	r24, 0x04	; 4
 252:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 254:	80 81       	ld	r24, Z
 256:	82 60       	ori	r24, 0x02	; 2
 258:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 25a:	80 81       	ld	r24, Z
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 260:	80 81       	ld	r24, Z
 262:	80 68       	ori	r24, 0x80	; 128
 264:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 266:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
