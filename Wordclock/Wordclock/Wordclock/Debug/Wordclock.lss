
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000689  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e1  00000000  00000000  000009d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000528  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000269  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  88:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:


//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
  90:	08 95       	ret

00000092 <loop>:
  // put your setup code here, to run once:
  //WordClockDisplay.setChar(2, 0, 10, 20, 30);
}

void loop() {
  92:	08 95       	ret

00000094 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
  94:	08 95       	ret

00000096 <main>:

int main(void)
{
	init();
  96:	0e 94 a4 00 	call	0x148	; 0x148 <init>

	initVariant();
  9a:	0e 94 4a 00 	call	0x94	; 0x94 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
  9e:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  a6:	0e 94 49 00 	call	0x92	; 0x92 <loop>
		if (serialEventRun) serialEventRun();
  aa:	20 97       	sbiw	r28, 0x00	; 0
  ac:	e1 f3       	breq	.-8      	; 0xa6 <main+0x10>
  ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
  b2:	f9 cf       	rjmp	.-14     	; 0xa6 <main+0x10>

000000b4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
  ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
  d2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
  d6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
  da:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
  de:	23 e0       	ldi	r18, 0x03	; 3
  e0:	23 0f       	add	r18, r19
  e2:	2d 37       	cpi	r18, 0x7D	; 125
  e4:	20 f4       	brcc	.+8      	; 0xee <__vector_16+0x3a>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <__vector_16+0x44>
  ee:	26 e8       	ldi	r18, 0x86	; 134
  f0:	23 0f       	add	r18, r19
  f2:	02 96       	adiw	r24, 0x02	; 2
  f4:	a1 1d       	adc	r26, r1
  f6:	b1 1d       	adc	r27, r1
  f8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 100:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 104:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 108:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 10c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 110:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 114:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 118:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	a1 1d       	adc	r26, r1
 120:	b1 1d       	adc	r27, r1
 122:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 126:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 12a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 12e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 148:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 150:	84 b5       	in	r24, 0x24	; 36
 152:	81 60       	ori	r24, 0x01	; 1
 154:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 156:	85 b5       	in	r24, 0x25	; 37
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 162:	ee e6       	ldi	r30, 0x6E	; 110
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 16c:	e1 e8       	ldi	r30, 0x81	; 129
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 172:	80 81       	ld	r24, Z
 174:	82 60       	ori	r24, 0x02	; 2
 176:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 17e:	e0 e8       	ldi	r30, 0x80	; 128
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	81 60       	ori	r24, 0x01	; 1
 186:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 188:	e1 eb       	ldi	r30, 0xB1	; 177
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 192:	e0 eb       	ldi	r30, 0xB0	; 176
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 19c:	ea e7       	ldi	r30, 0x7A	; 122
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	84 60       	ori	r24, 0x04	; 4
 1a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 1ac:	80 81       	ld	r24, Z
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1b2:	80 81       	ld	r24, Z
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
