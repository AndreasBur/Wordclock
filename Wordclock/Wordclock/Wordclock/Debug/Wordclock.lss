
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .data         00000000  00800100  00800100  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b66  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  00800100  00800100  00000bda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000782e  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001282  00000000  00000000  00008772  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bbb  00000000  00000000  000099f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a3c  00000000  00000000  0000b5b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000209d  00000000  00000000  0000bfec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000456f  00000000  00000000  0000e089  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  000125f8  2**0
=======
  0 .data         00000000  00800100  00800100  00000b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  00800100  00800100  00000b9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007701  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000122d  00000000  00000000  000085fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a66  00000000  00000000  0000982a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000994  00000000  00000000  0000b290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025c5  00000000  00000000  0000bc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004248  00000000  00000000  0000e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00012431  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__dtors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
<<<<<<< Updated upstream
  40:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_16>
=======
  40:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_16>
>>>>>>> Stashed changes
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000068 <_ZN5Clock17ClockMinutesTableE>:
  68:	00 00 00 00 00 01 00 03 0a 00 01 00 04 0a 00 01     ................
  78:	00 08 0a 00 01 01 04 0b 0c 01 01 03 0b 0c 01 01     ................
  88:	0c 00 00 01 01 03 0a 0c 01 01 04 0a 0c 01 01 08     ................
  98:	0b 00 01 01 04 0b 00 01 01 03 0b 00 00 00 00 00     ................
  a8:	00 01 00 03 0a 00 01 00 04 0a 00 01 01 08 00 00     ................
  b8:	01 01 04 0b 0c 01 01 03 0b 0c 01 01 0c 00 00 01     ................
  c8:	01 03 0a 0c 01 01 04 0a 0c 01 01 09 00 00 01 01     ................
  d8:	04 0b 00 01 01 03 0b 00 00 00 00 00 00 01 00 03     ................
  e8:	0a 00 01 00 04 0a 00 01 00 08 0a 00 01 00 05 0a     ................
  f8:	00 01 01 03 0b 0c 01 01 0c 00 00 01 01 03 0a 0c     ................
 108:	01 01 05 0b 00 01 01 08 0b 00 01 01 04 0b 00 01     ................
 118:	01 03 0b 00 00 00 00 00 00 01 00 03 0a 00 01 00     ................
 128:	04 0a 00 01 01 08 00 00 01 00 05 0a 00 01 01 03     ................
 138:	0b 0c 01 01 0c 00 00 01 01 03 0a 0c 01 01 05 0b     ................
 148:	00 01 01 09 00 00 01 01 04 0b 00 01 01 03 0b 00     ................

00000158 <_ZN5Clock15ClockHoursTableE>:
 158:	0d 1a 0f 1a 0e 1a 12 1a 16 1a 13 1a 19 1a 11 1a     ................
 168:	17 1a 15 1a 18 1a 14 1a 0d 00 10 00 0e 00 12 00     ................
 178:	16 00 13 00 19 00 11 00 17 00 15 00 18 00 14 00     ................

00000188 <_ZN7Display21WordIlluminationTableE>:
 188:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
 198:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
 1a8:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
 1b8:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
 1c8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
 1d8:	03                                                  .

000001d9 <digital_pin_to_bit_mask_PGM>:
 1d9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 1e9:	04 08 10 20                                         ... 

000001ed <digital_pin_to_port_PGM>:
 1ed:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
 1fd:	03 03 03 03                                         ....

00000201 <port_to_output_PGM>:
 201:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000020b <port_to_mode_PGM>:
 20b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000216 <__ctors_start>:
 216:	3b 01       	movw	r6, r22

00000218 <__ctors_end>:
 218:	49 01       	movw	r8, r18

0000021a <__dtors_end>:
 21a:	11 24       	eor	r1, r1
 21c:	1f be       	out	0x3f, r1	; 63
 21e:	cf ef       	ldi	r28, 0xFF	; 255
 220:	d8 e0       	ldi	r29, 0x08	; 8
 222:	de bf       	out	0x3e, r29	; 62
 224:	cd bf       	out	0x3d, r28	; 61

00000226 <__do_clear_bss>:
 226:	22 e0       	ldi	r18, 0x02	; 2
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a5 36       	cpi	r26, 0x65	; 101
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>

00000236 <__do_global_ctors>:
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	cc e0       	ldi	r28, 0x0C	; 12
 23a:	d1 e0       	ldi	r29, 0x01	; 1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__do_global_ctors+0x10>
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	fe 01       	movw	r30, r28
<<<<<<< Updated upstream
 242:	0e 94 97 05 	call	0xb2e	; 0xb2e <__tablejump2__>
 246:	cb 30       	cpi	r28, 0x0B	; 11
 248:	d1 07       	cpc	r29, r17
 24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
 24c:	0e 94 96 04 	call	0x92c	; 0x92c <main>
 250:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__do_global_dtors>
=======
 242:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__tablejump2__>
 246:	cb 30       	cpi	r28, 0x0B	; 11
 248:	d1 07       	cpc	r29, r17
 24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
 24c:	0e 94 77 04 	call	0x8ee	; 0x8ee <main>
 250:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__do_global_dtors>
>>>>>>> Stashed changes

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000258 <setup>:
//DisplayCharacter WcDisplayCharacter;
//Animation wcAnimation;
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
 258:	08 95       	ret

0000025a <loop>:
  
}

void loop() {
  // put your main code here, to run repeatedly:
  wcClock.setClock(17,30);
 25a:	4e e1       	ldi	r20, 0x1E	; 30
 25c:	61 e1       	ldi	r22, 0x11	; 17
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
 262:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN5Clock8setClockEhh>
    void setPixelRowFast(byte, PixelRowType);
    void setPixelColumnFast(byte, PixelColumnType);
=======
 262:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN5Clock8setClockEhh>
    void setPixelRowFast(byte, DisplayPixelRowType);
    void setPixelColumnFast(byte, DisplayPixelColumnType);
>>>>>>> Stashed changes

    // methods
    void init();
    void show() { Pixels.show(); }
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
 26a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN6WS28124showEv>
=======
 26a:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN6WS28124showEv>
>>>>>>> Stashed changes
  WordClockDisplay.show();
  WordClockDisplay.clearAllWords();
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
 272:	0c 94 18 03 	jmp	0x630	; 0x630 <_ZN7Display13clearAllWordsEv>
=======
 272:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_ZN7Display13clearAllWordsEv>
>>>>>>> Stashed changes

00000276 <_GLOBAL__sub_I_flag>:
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 276:	24 e1       	ldi	r18, 0x14	; 20
 278:	44 e1       	ldi	r20, 0x14	; 20
 27a:	64 e1       	ldi	r22, 0x14	; 20
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 56 02 	call	0x4ac	; 0x4ac <_ZN7DisplayC1Ehhh>
Clock wcClock(&WordClockDisplay, CLOCK_MODE_WESSI);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_ZN5ClockC1EP7Display14ClockModesType>

00000292 <_GLOBAL__sub_D_flag>:
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5ClockD1Ev>
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <_ZN7DisplayD1Ev>

000002a2 <_ZN5ClockC1EP7Display14ClockModesType>:
        return true;
    } else {
        return false;
    }

} /* compareClockWords */
 2a2:	fc 01       	movw	r30, r24
 2a4:	71 83       	std	Z+1, r23	; 0x01
 2a6:	60 83       	st	Z, r22
 2a8:	42 83       	std	Z+2, r20	; 0x02
 2aa:	08 95       	ret

000002ac <_ZN5ClockD1Ev>:
 2ac:	08 95       	ret

000002ae <_ZN5Clock13getClockWordsEhhP14ClockWordsType>:
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	2a 97       	sbiw	r28, 0x0a	; 10
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	fc 01       	movw	r30, r24
 2cc:	f6 2e       	mov	r15, r22
 2ce:	84 2f       	mov	r24, r20
 2d0:	89 01       	movw	r16, r18
 2d2:	97 e1       	ldi	r25, 0x17	; 23
 2d4:	96 17       	cp	r25, r22
 2d6:	08 f4       	brcc	.+2      	; 0x2da <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x2c>
 2d8:	4d c0       	rjmp	.+154    	; 0x374 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0xc6>
 2da:	4c 33       	cpi	r20, 0x3C	; 60
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x32>
 2de:	4a c0       	rjmp	.+148    	; 0x374 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0xc6>
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	d9 01       	movw	r26, r18
 2e4:	9c 93       	st	X, r25
 2e6:	95 e0       	ldi	r25, 0x05	; 5
 2e8:	e9 2e       	mov	r14, r25
 2ea:	6e 2d       	mov	r22, r14
<<<<<<< Updated upstream
 2ec:	0e 94 8b 05 	call	0xb16	; 0xb16 <__udivmodqi4>
 2f0:	28 2f       	mov	r18, r24
 2f2:	92 81       	ldd	r25, Z+2	; 0x02
 2f4:	bc e3       	ldi	r27, 0x3C	; 60
 2f6:	9b 9f       	mul	r25, r27
 2f8:	c0 01       	movw	r24, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	e2 9e       	mul	r14, r18
 2fe:	80 0d       	add	r24, r0
 300:	91 1d       	adc	r25, r1
 302:	11 24       	eor	r1, r1
 304:	bc 01       	movw	r22, r24
 306:	68 59       	subi	r22, 0x98	; 152
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	45 e0       	ldi	r20, 0x05	; 5
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	ce 01       	movw	r24, r28
 310:	06 96       	adiw	r24, 0x06	; 6
 312:	0e 94 9d 05 	call	0xb3a	; 0xb3a <memcpy_P>
 316:	fe 01       	movw	r30, r28
 318:	36 96       	adiw	r30, 0x06	; 6
 31a:	de 01       	movw	r26, r28
 31c:	11 96       	adiw	r26, 0x01	; 1
 31e:	01 90       	ld	r0, Z+
 320:	0d 92       	st	X+, r0
 322:	ea 94       	dec	r14
 324:	e1 f7       	brne	.-8      	; 0x31e <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x70>
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
 32a:	3c 81       	ldd	r19, Y+4	; 0x04
 32c:	2d 81       	ldd	r18, Y+5	; 0x05
 32e:	4b 81       	ldd	r20, Y+3	; 0x03
 330:	f8 01       	movw	r30, r16
 332:	43 83       	std	Z+3, r20	; 0x03
 334:	34 83       	std	Z+4, r19	; 0x04
 336:	25 83       	std	Z+5, r18	; 0x05
 338:	fb e0       	ldi	r31, 0x0B	; 11
 33a:	ff 15       	cp	r31, r15
 33c:	10 f4       	brcc	.+4      	; 0x342 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x94>
 33e:	24 ef       	ldi	r18, 0xF4	; 244
 340:	f2 0e       	add	r15, r18
 342:	9f 0d       	add	r25, r15
 344:	9c 30       	cpi	r25, 0x0C	; 12
 346:	08 f0       	brcs	.+2      	; 0x34a <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x9c>
 348:	9c 50       	subi	r25, 0x0C	; 12
 34a:	3c e0       	ldi	r19, 0x0C	; 12
 34c:	83 9f       	mul	r24, r19
 34e:	b0 01       	movw	r22, r0
 350:	11 24       	eor	r1, r1
 352:	69 0f       	add	r22, r25
 354:	71 1d       	adc	r23, r1
 356:	66 0f       	add	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	68 5a       	subi	r22, 0xA8	; 168
 35c:	7e 4f       	sbci	r23, 0xFE	; 254
 35e:	42 e0       	ldi	r20, 0x02	; 2
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	ce 01       	movw	r24, r28
 364:	06 96       	adiw	r24, 0x06	; 6
 366:	0e 94 9d 05 	call	0xb3a	; 0xb3a <memcpy_P>
 36a:	9e 81       	ldd	r25, Y+6	; 0x06
 36c:	8f 81       	ldd	r24, Y+7	; 0x07
 36e:	d8 01       	movw	r26, r16
 370:	11 96       	adiw	r26, 0x01	; 1
 372:	9c 93       	st	X, r25
 374:	11 97       	sbiw	r26, 0x01	; 1
 376:	12 96       	adiw	r26, 0x02	; 2
 378:	8c 93       	st	X, r24
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	2a 96       	adiw	r28, 0x0a	; 10
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	08 95       	ret

00000396 <_ZN5Clock8setClockEhh>:
=======
 2ec:	0e 94 6c 05 	call	0xad8	; 0xad8 <__udivmodqi4>
 2f0:	62 81       	ldd	r22, Z+2	; 0x02
 2f2:	bc e3       	ldi	r27, 0x3C	; 60
 2f4:	6b 9f       	mul	r22, r27
 2f6:	b0 01       	movw	r22, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	e8 9e       	mul	r14, r24
 2fc:	60 0d       	add	r22, r0
 2fe:	71 1d       	adc	r23, r1
 300:	11 24       	eor	r1, r1
 302:	68 59       	subi	r22, 0x98	; 152
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	45 e0       	ldi	r20, 0x05	; 5
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	ce 01       	movw	r24, r28
 30c:	06 96       	adiw	r24, 0x06	; 6
 30e:	0e 94 7e 05 	call	0xafc	; 0xafc <memcpy_P>
 312:	fe 01       	movw	r30, r28
 314:	36 96       	adiw	r30, 0x06	; 6
 316:	de 01       	movw	r26, r28
 318:	11 96       	adiw	r26, 0x01	; 1
 31a:	01 90       	ld	r0, Z+
 31c:	0d 92       	st	X+, r0
 31e:	ea 94       	dec	r14
 320:	e1 f7       	brne	.-8      	; 0x31a <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x6c>
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	6a 81       	ldd	r22, Y+2	; 0x02
 326:	2c 81       	ldd	r18, Y+4	; 0x04
 328:	9d 81       	ldd	r25, Y+5	; 0x05
 32a:	3b 81       	ldd	r19, Y+3	; 0x03
 32c:	f8 01       	movw	r30, r16
 32e:	33 83       	std	Z+3, r19	; 0x03
 330:	24 83       	std	Z+4, r18	; 0x04
 332:	95 83       	std	Z+5, r25	; 0x05
 334:	fb e0       	ldi	r31, 0x0B	; 11
 336:	ff 15       	cp	r31, r15
 338:	10 f4       	brcc	.+4      	; 0x33e <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x90>
 33a:	94 ef       	ldi	r25, 0xF4	; 244
 33c:	f9 0e       	add	r15, r25
 33e:	6f 0d       	add	r22, r15
 340:	6c 30       	cpi	r22, 0x0C	; 12
 342:	08 f0       	brcs	.+2      	; 0x346 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x98>
 344:	6c 50       	subi	r22, 0x0C	; 12
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	ac e0       	ldi	r26, 0x0C	; 12
 34a:	8a 9f       	mul	r24, r26
 34c:	60 0d       	add	r22, r0
 34e:	71 1d       	adc	r23, r1
 350:	11 24       	eor	r1, r1
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	68 5a       	subi	r22, 0xA8	; 168
 358:	7e 4f       	sbci	r23, 0xFE	; 254
 35a:	42 e0       	ldi	r20, 0x02	; 2
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	ce 01       	movw	r24, r28
 360:	06 96       	adiw	r24, 0x06	; 6
 362:	0e 94 7e 05 	call	0xafc	; 0xafc <memcpy_P>
 366:	9e 81       	ldd	r25, Y+6	; 0x06
 368:	8f 81       	ldd	r24, Y+7	; 0x07
 36a:	f8 01       	movw	r30, r16
 36c:	91 83       	std	Z+1, r25	; 0x01
 36e:	82 83       	std	Z+2, r24	; 0x02
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	01 c0       	rjmp	.+2      	; 0x376 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0xc8>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	2a 96       	adiw	r28, 0x0a	; 10
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <_ZN5Clock8setClockEhh>:
>>>>>>> Stashed changes
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Clock::setClock(byte Hour, byte Minute)
{
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <_ZN5Clock8setClockEhh+0x14>
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <_ZN5Clock8setClockEhh+0x16>
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <_ZN5Clock8setClockEhh+0x18>
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	7c 01       	movw	r14, r24
    stdReturnType ReturnValue{E_NOT_OK};
    ClockWordsType ClockWords;

    /* ----- Implementation ----------------------------------------------- */
    ReturnValue = E_OK;
    if(getClockWords(Hour, Minute, &ClockWords) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3ae:	9e 01       	movw	r18, r28
 3b0:	2f 5f       	subi	r18, 0xFF	; 255
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN5Clock13getClockWordsEhhP14ClockWordsType>
    /* ----- Local Variables ---------------------------------------------- */
    stdReturnType ReturnValue{E_NOT_OK};
    ClockWordsType ClockWords;

    /* ----- Implementation ----------------------------------------------- */
    ReturnValue = E_OK;
 3b8:	11 e0       	ldi	r17, 0x01	; 1
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <_ZN5Clock8setClockEhh+0x30>
 3be:	10 e0       	ldi	r17, 0x00	; 0
    if(getClockWords(Hour, Minute, &ClockWords) == E_NOT_OK) ReturnValue = E_NOT_OK;

    if(ClockWords.ShowItIs) {
<<<<<<< Updated upstream
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	88 23       	and	r24, r24
 3ca:	a1 f0       	breq	.+40     	; 0x3f4 <_ZN5Clock8setClockEhh+0x5e>
        if(pDisplay->setWord(Display::WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	f6 01       	movw	r30, r12
 3d2:	80 81       	ld	r24, Z
 3d4:	91 81       	ldd	r25, Z+1	; 0x01
 3d6:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN7Display7setWordENS_8WordTypeEh>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <_ZN5Clock8setClockEhh+0x4a>
 3de:	11 e0       	ldi	r17, 0x01	; 1
        if(pDisplay->setWord(Display::WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	f6 01       	movw	r30, r12
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN7Display7setWordENS_8WordTypeEh>
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <_ZN5Clock8setClockEhh+0x5e>
 3f2:	11 e0       	ldi	r17, 0x01	; 1
 3f4:	5e 01       	movw	r10, r28
 3f6:	f2 e0       	ldi	r31, 0x02	; 2
 3f8:	af 0e       	add	r10, r31
 3fa:	b1 1c       	adc	r11, r1
 3fc:	7e 01       	movw	r14, r28
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	e8 0e       	add	r14, r24
 402:	f1 1c       	adc	r15, r1
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != Display::WORD_NONE; Index++) {
 404:	f5 01       	movw	r30, r10
 406:	61 91       	ld	r22, Z+
 408:	5f 01       	movw	r10, r30
 40a:	66 23       	and	r22, r22
 40c:	61 f0       	breq	.+24     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	f6 01       	movw	r30, r12
 412:	80 81       	ld	r24, Z
 414:	91 81       	ldd	r25, Z+1	; 0x01
 416:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN7Display7setWordENS_8WordTypeEh>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	09 f4       	brne	.+2      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 41e:	11 e0       	ldi	r17, 0x01	; 1
=======
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	88 23       	and	r24, r24
 3c4:	a1 f0       	breq	.+40     	; 0x3ee <_ZN5Clock8setClockEhh+0x5e>
        if(pDisplay->setWord(DISPLAY_WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	f7 01       	movw	r30, r14
 3cc:	80 81       	ld	r24, Z
 3ce:	91 81       	ldd	r25, Z+1	; 0x01
 3d0:	0e 94 93 02 	call	0x526	; 0x526 <_ZN7Display7setWordE15DisplayWordTypeh>
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	09 f4       	brne	.+2      	; 0x3da <_ZN5Clock8setClockEhh+0x4a>
 3d8:	11 e0       	ldi	r17, 0x01	; 1
        if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	f7 01       	movw	r30, r14
 3e0:	80 81       	ld	r24, Z
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	0e 94 93 02 	call	0x526	; 0x526 <_ZN7Display7setWordE15DisplayWordTypeh>
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <_ZN5Clock8setClockEhh+0x5e>
 3ec:	11 e0       	ldi	r17, 0x01	; 1
 3ee:	5e 01       	movw	r10, r28
 3f0:	f2 e0       	ldi	r31, 0x02	; 2
 3f2:	af 0e       	add	r10, r31
 3f4:	b1 1c       	adc	r11, r1
 3f6:	6e 01       	movw	r12, r28
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	c8 0e       	add	r12, r24
 3fc:	d1 1c       	adc	r13, r1
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
 3fe:	f5 01       	movw	r30, r10
 400:	61 91       	ld	r22, Z+
 402:	5f 01       	movw	r10, r30
 404:	61 11       	cpse	r22, r1
 406:	05 c0       	rjmp	.+10     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 408:	5e 01       	movw	r10, r28
 40a:	f7 e0       	ldi	r31, 0x07	; 7
 40c:	af 0e       	add	r10, r31
 40e:	b1 1c       	adc	r11, r1
 410:	19 c0       	rjmp	.+50     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	f7 01       	movw	r30, r14
 416:	80 81       	ld	r24, Z
 418:	91 81       	ldd	r25, Z+1	; 0x01
 41a:	0e 94 93 02 	call	0x526	; 0x526 <_ZN7Display7setWordE15DisplayWordTypeh>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	09 f4       	brne	.+2      	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 422:	11 e0       	ldi	r17, 0x01	; 1
>>>>>>> Stashed changes
    if(ClockWords.ShowItIs) {
        if(pDisplay->setWord(Display::WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
        if(pDisplay->setWord(Display::WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

<<<<<<< Updated upstream
    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != Display::WORD_NONE; Index++) {
 420:	ae 14       	cp	r10, r14
 422:	bf 04       	cpc	r11, r15
 424:	79 f7       	brne	.-34     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 426:	5e 01       	movw	r10, r28
 428:	f7 e0       	ldi	r31, 0x07	; 7
 42a:	af 0e       	add	r10, r31
 42c:	b1 1c       	adc	r11, r1
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != Display::WORD_NONE; Index++) {
 42e:	f7 01       	movw	r30, r14
 430:	61 91       	ld	r22, Z+
 432:	7f 01       	movw	r14, r30
 434:	66 23       	and	r22, r22
 436:	61 f0       	breq	.+24     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
        if(pDisplay->setWord(ClockWords.MinuteWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	f6 01       	movw	r30, r12
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN7Display7setWordENS_8WordTypeEh>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	09 f4       	brne	.+2      	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
 448:	11 e0       	ldi	r17, 0x01	; 1
=======
    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
 424:	ac 14       	cp	r10, r12
 426:	bd 04       	cpc	r11, r13
 428:	79 f3       	breq	.-34     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 42a:	e9 cf       	rjmp	.-46     	; 0x3fe <_ZN5Clock8setClockEhh+0x6e>
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != DISPLAY_WORD_NONE; Index++) {
        if(pDisplay->setWord(ClockWords.MinuteWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	f7 01       	movw	r30, r14
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	0e 94 93 02 	call	0x526	; 0x526 <_ZN7Display7setWordE15DisplayWordTypeh>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	09 f4       	brne	.+2      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 43c:	11 e0       	ldi	r17, 0x01	; 1
>>>>>>> Stashed changes

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != Display::WORD_NONE; Index++) {
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

<<<<<<< Updated upstream
    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != Display::WORD_NONE; Index++) {
 44a:	ea 14       	cp	r14, r10
 44c:	fb 04       	cpc	r15, r11
 44e:	79 f7       	brne	.-34     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
=======
    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != DISPLAY_WORD_NONE; Index++) {
 43e:	ca 14       	cp	r12, r10
 440:	db 04       	cpc	r13, r11
 442:	29 f0       	breq	.+10     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
 444:	f6 01       	movw	r30, r12
 446:	61 91       	ld	r22, Z+
 448:	6f 01       	movw	r12, r30
 44a:	61 11       	cpse	r22, r1
 44c:	ef cf       	rjmp	.-34     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
>>>>>>> Stashed changes
        if(pDisplay->setWord(ClockWords.MinuteWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }
    return ReturnValue;
} /* show */
<<<<<<< Updated upstream
 450:	81 2f       	mov	r24, r17
 452:	26 96       	adiw	r28, 0x06	; 6
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	df 90       	pop	r13
 46a:	cf 90       	pop	r12
 46c:	bf 90       	pop	r11
 46e:	af 90       	pop	r10
 470:	08 95       	ret

00000472 <_ZNK7Display23getWordIlluminationFastENS_8WordTypeE.isra.1>:
=======
 44e:	81 2f       	mov	r24, r17
 450:	26 96       	adiw	r28, 0x06	; 6
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	df 90       	pop	r13
 468:	cf 90       	pop	r12
 46a:	bf 90       	pop	r11
 46c:	af 90       	pop	r10
 46e:	08 95       	ret

00000470 <_ZNK7Display23getWordIlluminationFastE15DisplayWordType.isra.1>:
>>>>>>> Stashed changes
void Display::setPixelFast(byte Index)
{
    byte Row = Index / DISPLAY_NUMBER_OF_COLUMNS;
    byte Column = Index % DISPLAY_NUMBER_OF_COLUMNS;

    setPixelFast(Column,  Row);
<<<<<<< Updated upstream
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	00 d0       	rcall	.+0      	; 0x478 <_ZNK7Display23getWordIlluminationFastENS_8WordTypeE.isra.1+0x6>
 478:	1f 92       	push	r1
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	bc 01       	movw	r22, r24
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	86 0f       	add	r24, r22
 488:	97 1f       	adc	r25, r23
 48a:	bc 01       	movw	r22, r24
 48c:	68 57       	subi	r22, 0x78	; 120
 48e:	7e 4f       	sbci	r23, 0xFE	; 254
 490:	43 e0       	ldi	r20, 0x03	; 3
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	0e 94 9d 05 	call	0xb3a	; 0xb3a <memcpy_P>
 49c:	69 81       	ldd	r22, Y+1	; 0x01
 49e:	7a 81       	ldd	r23, Y+2	; 0x02
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <_ZN7DisplayC1Ehhh>:
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <_ZN7DisplayC1Ehhh+0xc>
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	7c 01       	movw	r14, r24
 4c0:	16 2f       	mov	r17, r22
 4c2:	6a e0       	ldi	r22, 0x0A	; 10
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	2a 83       	std	Y+2, r18	; 0x02
 4c8:	49 83       	std	Y+1, r20	; 0x01
 4ca:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN6WS2812C1Eh>
 4ce:	f7 01       	movw	r30, r14
 4d0:	ea 5a       	subi	r30, 0xAA	; 170
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	10 83       	st	Z, r17
 4d6:	31 96       	adiw	r30, 0x01	; 1
 4d8:	49 81       	ldd	r20, Y+1	; 0x01
 4da:	40 83       	st	Z, r20
 4dc:	31 96       	adiw	r30, 0x01	; 1
 4de:	2a 81       	ldd	r18, Y+2	; 0x02
 4e0:	20 83       	st	Z, r18
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	f7 01       	movw	r30, r14
 4e6:	80 83       	st	Z, r24
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <_ZN7DisplayD1Ev>:
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN6WS2812D1Ev>

000004fe <_ZNK7Display21transformToSerpentineEhh>:
 4fe:	40 fd       	sbrc	r20, 0
 500:	06 c0       	rjmp	.+12     	; 0x50e <_ZNK7Display21transformToSerpentineEhh+0x10>
 502:	86 2f       	mov	r24, r22
 504:	9b e0       	ldi	r25, 0x0B	; 11
 506:	49 9f       	mul	r20, r25
 508:	80 0d       	add	r24, r0
 50a:	11 24       	eor	r1, r1
 50c:	08 95       	ret
 50e:	8b e0       	ldi	r24, 0x0B	; 11
 510:	48 9f       	mul	r20, r24
 512:	40 2d       	mov	r20, r0
 514:	11 24       	eor	r1, r1
 516:	46 5f       	subi	r20, 0xF6	; 246
 518:	84 2f       	mov	r24, r20
 51a:	86 1b       	sub	r24, r22
 51c:	08 95       	ret

0000051e <_ZN7Display8setPixelEhh>:
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	ec 01       	movw	r28, r24
 524:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZNK7Display21transformToSerpentineEhh>
 528:	fe 01       	movw	r30, r28
 52a:	ea 5a       	subi	r30, 0xAA	; 170
 52c:	fe 4f       	sbci	r31, 0xFE	; 254
 52e:	20 81       	ld	r18, Z
 530:	31 81       	ldd	r19, Z+1	; 0x01
 532:	42 81       	ldd	r20, Z+2	; 0x02
 534:	68 2f       	mov	r22, r24
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <_ZN6WS28128setPixelEh15WS2812PixelType>

00000542 <_ZN7Display7setWordENS_8WordTypeEh>:
 542:	df 92       	push	r13
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	00 d0       	rcall	.+0      	; 0x552 <_ZN7Display7setWordENS_8WordTypeEh+0x10>
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	7c 01       	movw	r14, r24
 558:	14 2f       	mov	r17, r20
 55a:	6b 31       	cpi	r22, 0x1B	; 27
 55c:	d0 f4       	brcc	.+52     	; 0x592 <_ZN7Display7setWordENS_8WordTypeEh+0x50>
 55e:	86 2f       	mov	r24, r22
 560:	0e 94 39 02 	call	0x472	; 0x472 <_ZNK7Display23getWordIlluminationFastENS_8WordTypeE.isra.1>
 564:	06 2f       	mov	r16, r22
 566:	11 11       	cpse	r17, r1
 568:	01 c0       	rjmp	.+2      	; 0x56c <_ZN7Display7setWordENS_8WordTypeEh+0x2a>
 56a:	18 2f       	mov	r17, r24
 56c:	d1 2c       	mov	r13, r1
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	d1 16       	cp	r13, r17
 572:	81 f0       	breq	.+32     	; 0x594 <_ZN7Display7setWordENS_8WordTypeEh+0x52>
 574:	40 2f       	mov	r20, r16
 576:	6d 2d       	mov	r22, r13
 578:	67 0f       	add	r22, r23
 57a:	c7 01       	movw	r24, r14
 57c:	29 83       	std	Y+1, r18	; 0x01
 57e:	7a 83       	std	Y+2, r23	; 0x02
 580:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7Display8setPixelEhh>
 584:	29 81       	ldd	r18, Y+1	; 0x01
 586:	7a 81       	ldd	r23, Y+2	; 0x02
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	09 f4       	brne	.+2      	; 0x58e <_ZN7Display7setWordENS_8WordTypeEh+0x4c>
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	d3 94       	inc	r13
 590:	ef cf       	rjmp	.-34     	; 0x570 <_ZN7Display7setWordENS_8WordTypeEh+0x2e>
 592:	21 e0       	ldi	r18, 0x01	; 1
 594:	82 2f       	mov	r24, r18
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	08 95       	ret

000005aa <_ZN7Display10clearPixelEhh>:
=======
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	00 d0       	rcall	.+0      	; 0x476 <_ZNK7Display23getWordIlluminationFastE15DisplayWordType.isra.1+0x6>
 476:	1f 92       	push	r1
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	bc 01       	movw	r22, r24
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	86 0f       	add	r24, r22
 486:	97 1f       	adc	r25, r23
 488:	bc 01       	movw	r22, r24
 48a:	68 57       	subi	r22, 0x78	; 120
 48c:	7e 4f       	sbci	r23, 0xFE	; 254
 48e:	43 e0       	ldi	r20, 0x03	; 3
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	ce 01       	movw	r24, r28
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	0e 94 7e 05 	call	0xafc	; 0xafc <memcpy_P>
 49a:	69 81       	ldd	r22, Y+1	; 0x01
 49c:	7a 81       	ldd	r23, Y+2	; 0x02
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <_ZN7DisplayC1Ehhh>:
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	ec 01       	movw	r28, r24
 4b8:	f6 2e       	mov	r15, r22
 4ba:	04 2f       	mov	r16, r20
 4bc:	12 2f       	mov	r17, r18
 4be:	6a e0       	ldi	r22, 0x0A	; 10
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	0e 94 33 03 	call	0x666	; 0x666 <_ZN6WS2812C1Eh>
 4c6:	fe 01       	movw	r30, r28
 4c8:	ea 5a       	subi	r30, 0xAA	; 170
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	f0 82       	st	Z, r15
 4ce:	31 96       	adiw	r30, 0x01	; 1
 4d0:	00 83       	st	Z, r16
 4d2:	31 96       	adiw	r30, 0x01	; 1
 4d4:	10 83       	st	Z, r17
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	88 83       	st	Y, r24
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	08 95       	ret

000004e6 <_ZN7DisplayD1Ev>:
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0c 94 11 03 	jmp	0x622	; 0x622 <_ZN6WS2812D1Ev>

000004ec <_ZNK7Display21transformToSerpentineEhh>:
 4ec:	40 fd       	sbrc	r20, 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <_ZNK7Display21transformToSerpentineEhh+0x8>
 4f0:	86 2f       	mov	r24, r22
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <_ZNK7Display21transformToSerpentineEhh+0xc>
 4f4:	8a e0       	ldi	r24, 0x0A	; 10
 4f6:	86 1b       	sub	r24, r22
 4f8:	9b e0       	ldi	r25, 0x0B	; 11
 4fa:	49 9f       	mul	r20, r25
 4fc:	80 0d       	add	r24, r0
 4fe:	11 24       	eor	r1, r1
 500:	08 95       	ret

00000502 <_ZN7Display8setPixelEhh>:
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	ec 01       	movw	r28, r24
 508:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZNK7Display21transformToSerpentineEhh>
 50c:	fe 01       	movw	r30, r28
 50e:	ea 5a       	subi	r30, 0xAA	; 170
 510:	fe 4f       	sbci	r31, 0xFE	; 254
 512:	20 81       	ld	r18, Z
 514:	31 81       	ldd	r19, Z+1	; 0x01
 516:	42 81       	ldd	r20, Z+2	; 0x02
 518:	68 2f       	mov	r22, r24
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_ZN6WS28128setPixelEh15WS2812PixelType>

00000526 <_ZN7Display7setWordE15DisplayWordTypeh>:
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	7c 01       	movw	r14, r24
 536:	86 2f       	mov	r24, r22
 538:	14 2f       	mov	r17, r20
 53a:	6b 31       	cpi	r22, 0x1B	; 27
 53c:	b0 f4       	brcc	.+44     	; 0x56a <_ZN7Display7setWordE15DisplayWordTypeh+0x44>
 53e:	0e 94 38 02 	call	0x470	; 0x470 <_ZNK7Display23getWordIlluminationFastE15DisplayWordType.isra.1>
 542:	06 2f       	mov	r16, r22
 544:	d7 2e       	mov	r13, r23
 546:	11 11       	cpse	r17, r1
 548:	01 c0       	rjmp	.+2      	; 0x54c <_ZN7Display7setWordE15DisplayWordTypeh+0x26>
 54a:	18 2f       	mov	r17, r24
 54c:	c0 e0       	ldi	r28, 0x00	; 0
 54e:	d0 e0       	ldi	r29, 0x00	; 0
 550:	1c 17       	cp	r17, r28
 552:	61 f0       	breq	.+24     	; 0x56c <_ZN7Display7setWordE15DisplayWordTypeh+0x46>
 554:	40 2f       	mov	r20, r16
 556:	6c 2f       	mov	r22, r28
 558:	6d 0d       	add	r22, r13
 55a:	c7 01       	movw	r24, r14
 55c:	0e 94 81 02 	call	0x502	; 0x502 <_ZN7Display8setPixelEhh>
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	09 f4       	brne	.+2      	; 0x566 <_ZN7Display7setWordE15DisplayWordTypeh+0x40>
 564:	d1 e0       	ldi	r29, 0x01	; 1
 566:	cf 5f       	subi	r28, 0xFF	; 255
 568:	f3 cf       	rjmp	.-26     	; 0x550 <_ZN7Display7setWordE15DisplayWordTypeh+0x2a>
 56a:	d1 e0       	ldi	r29, 0x01	; 1
 56c:	8d 2f       	mov	r24, r29
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	08 95       	ret

0000057e <_ZN7Display10clearPixelEhh>:
>>>>>>> Stashed changes
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearPixel(byte Column, byte Row)
{
<<<<<<< Updated upstream
 5aa:	0f 93       	push	r16
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
    /* if led stripe is snake or serpentine then odd row: count from right to left */
    return Pixels.setPixel(transformToSerpentine(Column,  Row), 0, 0, 0);
 5b2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZNK7Display21transformToSerpentineEhh>
 5b6:	00 e0       	ldi	r16, 0x00	; 0
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	68 2f       	mov	r22, r24
 5be:	ce 01       	movw	r24, r28
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	0e 94 98 03 	call	0x730	; 0x730 <_ZN6WS28128setPixelEhhhh>
=======
 57e:	0f 93       	push	r16
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
    /* if led stripe is snake or serpentine then odd row: count from right to left */
    return Pixels.setPixel(transformToSerpentine(Column,  Row), 0, 0, 0);
 586:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZNK7Display21transformToSerpentineEhh>
 58a:	00 e0       	ldi	r16, 0x00	; 0
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	68 2f       	mov	r22, r24
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN6WS28128setPixelEhhhh>
>>>>>>> Stashed changes
#else
    return Pixels.setPixel((Row * DISPLAY_NUMBER_OF_COLUMNS) + Column, 0, 0, 0);
#endif
} /* clearPixel */
<<<<<<< Updated upstream
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	0f 91       	pop	r16
 5cc:	08 95       	ret

000005ce <_ZN7Display9clearWordENS_8WordTypeE>:
=======
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <_ZN7Display9clearWordE15DisplayWordType>:
>>>>>>> Stashed changes
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearWord(WordType Word)
{
<<<<<<< Updated upstream
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	00 d0       	rcall	.+0      	; 0x5de <_ZN7Display9clearWordENS_8WordTypeE+0x10>
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
    stdReturnType ReturnValue = E_NOT_OK;

    if(Word < Display::WORD_NUMBER_OF_WORDS) {
 5e2:	6b 31       	cpi	r22, 0x1B	; 27
 5e4:	c8 f4       	brcc	.+50     	; 0x618 <_ZN7Display9clearWordENS_8WordTypeE+0x4a>
 5e6:	8c 01       	movw	r16, r24
        ReturnValue = E_OK;
        WordIlluminationType WordIllu = getWordIlluminationFast(Word);
 5e8:	86 2f       	mov	r24, r22
 5ea:	0e 94 39 02 	call	0x472	; 0x472 <_ZNK7Display23getWordIlluminationFastENS_8WordTypeE.isra.1>
 5ee:	e6 2e       	mov	r14, r22
 5f0:	f8 2e       	mov	r15, r24

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 5f2:	d1 2c       	mov	r13, r1
stdReturnType Display::clearWord(WordType Word)
=======
 5a2:	df 92       	push	r13
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
    stdReturnType ReturnValue{E_NOT_OK};

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
 5b0:	6b 31       	cpi	r22, 0x1B	; 27
 5b2:	b0 f4       	brcc	.+44     	; 0x5e0 <_ZN7Display9clearWordE15DisplayWordType+0x3e>
 5b4:	8c 01       	movw	r16, r24
        ReturnValue = E_OK;
        DisplayWordIlluminationType WordIllu = getWordIlluminationFast(Word);
 5b6:	86 2f       	mov	r24, r22
 5b8:	0e 94 38 02 	call	0x470	; 0x470 <_ZNK7Display23getWordIlluminationFastE15DisplayWordType.isra.1>
 5bc:	f6 2e       	mov	r15, r22
 5be:	e7 2e       	mov	r14, r23
 5c0:	d8 2e       	mov	r13, r24

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 5c2:	c0 e0       	ldi	r28, 0x00	; 0
stdReturnType Display::clearWord(DisplayWordType Word)
>>>>>>> Stashed changes
{
    stdReturnType ReturnValue{E_NOT_OK};

    if(Word < Display::WORD_NUMBER_OF_WORDS) {
        ReturnValue = E_OK;
<<<<<<< Updated upstream
 5f4:	20 e0       	ldi	r18, 0x00	; 0
        WordIlluminationType WordIllu = getWordIlluminationFast(Word);

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 5f6:	df 14       	cp	r13, r15
 5f8:	80 f4       	brcc	.+32     	; 0x61a <_ZN7Display9clearWordENS_8WordTypeE+0x4c>
            if(clearPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
 5fa:	4e 2d       	mov	r20, r14
 5fc:	6d 2d       	mov	r22, r13
 5fe:	67 0f       	add	r22, r23
 600:	c8 01       	movw	r24, r16
 602:	29 83       	std	Y+1, r18	; 0x01
 604:	7a 83       	std	Y+2, r23	; 0x02
 606:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN7Display10clearPixelEhh>
 60a:	29 81       	ldd	r18, Y+1	; 0x01
 60c:	7a 81       	ldd	r23, Y+2	; 0x02
 60e:	81 30       	cpi	r24, 0x01	; 1
 610:	09 f4       	brne	.+2      	; 0x614 <_ZN7Display9clearWordENS_8WordTypeE+0x46>
 612:	21 e0       	ldi	r18, 0x01	; 1

    if(Word < Display::WORD_NUMBER_OF_WORDS) {
=======
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
        DisplayWordIlluminationType WordIllu = getWordIlluminationFast(Word);

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 5c6:	cd 15       	cp	r28, r13
 5c8:	60 f4       	brcc	.+24     	; 0x5e2 <_ZN7Display9clearWordE15DisplayWordType+0x40>
            if(clearPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
 5ca:	4f 2d       	mov	r20, r15
 5cc:	6c 2f       	mov	r22, r28
 5ce:	6e 0d       	add	r22, r14
 5d0:	c8 01       	movw	r24, r16
 5d2:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN7Display10clearPixelEhh>
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	09 f4       	brne	.+2      	; 0x5dc <_ZN7Display9clearWordE15DisplayWordType+0x3a>
 5da:	d1 e0       	ldi	r29, 0x01	; 1

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
>>>>>>> Stashed changes
        ReturnValue = E_OK;
        WordIlluminationType WordIllu = getWordIlluminationFast(Word);

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
<<<<<<< Updated upstream
 614:	d3 94       	inc	r13
 616:	ef cf       	rjmp	.-34     	; 0x5f6 <_ZN7Display9clearWordENS_8WordTypeE+0x28>
=======
 5dc:	cf 5f       	subi	r28, 0xFF	; 255
 5de:	f3 cf       	rjmp	.-26     	; 0x5c6 <_ZN7Display9clearWordE15DisplayWordType+0x24>
>>>>>>> Stashed changes
            if(clearPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
        }
    } else {
        ReturnValue = E_NOT_OK;
<<<<<<< Updated upstream
 618:	21 e0       	ldi	r18, 0x01	; 1
    }
    return ReturnValue;
} /* clearWord */
 61a:	82 2f       	mov	r24, r18
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	ff 90       	pop	r15
 62a:	ef 90       	pop	r14
 62c:	df 90       	pop	r13
 62e:	08 95       	ret

00000630 <_ZN7Display13clearAllWordsEv>:
=======
 5e0:	d1 e0       	ldi	r29, 0x01	; 1
    }
    return ReturnValue;
} /* clearWord */
 5e2:	8d 2f       	mov	r24, r29
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	ff 90       	pop	r15
 5ee:	ef 90       	pop	r14
 5f0:	df 90       	pop	r13
 5f2:	08 95       	ret

000005f4 <_ZN7Display13clearAllWordsEv>:
>>>>>>> Stashed changes
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearAllWords()
{
<<<<<<< Updated upstream
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	8c 01       	movw	r16, r24
    stdReturnType ReturnValue = E_OK;

    for(byte i = Display::WORD_ES; i < Display::WORD_NUMBER_OF_WORDS; i++) if(clearWord((WordType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 63a:	c1 e0       	ldi	r28, 0x01	; 1
=======
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	8c 01       	movw	r16, r24
    stdReturnType ReturnValue{E_OK};

    for(byte i = DISPLAY_WORD_ES; i < DISPLAY_WORD_NUMBER_OF_WORDS; i++) if(clearWord((DisplayWordType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 5fe:	c1 e0       	ldi	r28, 0x01	; 1
>>>>>>> Stashed changes
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::clearAllWords()
{
<<<<<<< Updated upstream
    stdReturnType ReturnValue = E_OK;
 63c:	d0 e0       	ldi	r29, 0x00	; 0

    for(byte i = Display::WORD_ES; i < Display::WORD_NUMBER_OF_WORDS; i++) if(clearWord((WordType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 63e:	6c 2f       	mov	r22, r28
 640:	c8 01       	movw	r24, r16
 642:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN7Display9clearWordENS_8WordTypeE>
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	09 f4       	brne	.+2      	; 0x64c <_ZN7Display13clearAllWordsEv+0x1c>
 64a:	d1 e0       	ldi	r29, 0x01	; 1
 64c:	cf 5f       	subi	r28, 0xFF	; 255
 64e:	cb 31       	cpi	r28, 0x1B	; 27
 650:	b1 f7       	brne	.-20     	; 0x63e <_ZN7Display13clearAllWordsEv+0xe>
    return ReturnValue;
} /* clearAllWords */
 652:	8d 2f       	mov	r24, r29
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <_ZN6WS2812D1Ev>:
=======
    stdReturnType ReturnValue{E_OK};
 600:	d0 e0       	ldi	r29, 0x00	; 0

    for(byte i = DISPLAY_WORD_ES; i < DISPLAY_WORD_NUMBER_OF_WORDS; i++) if(clearWord((DisplayWordType) i) == E_NOT_OK) ReturnValue = E_NOT_OK;
 602:	6c 2f       	mov	r22, r28
 604:	c8 01       	movw	r24, r16
 606:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_ZN7Display9clearWordE15DisplayWordType>
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	09 f4       	brne	.+2      	; 0x610 <_ZN7Display13clearAllWordsEv+0x1c>
 60e:	d1 e0       	ldi	r29, 0x01	; 1
 610:	cf 5f       	subi	r28, 0xFF	; 255
 612:	cb 31       	cpi	r28, 0x1B	; 27
 614:	b1 f7       	brne	.-20     	; 0x602 <_ZN7Display13clearAllWordsEv+0xe>
    return ReturnValue;
} /* clearAllWords */
 616:	8d 2f       	mov	r24, r29
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	08 95       	ret

00000622 <_ZN6WS2812D1Ev>:
>>>>>>> Stashed changes
        OffsetBlue = 2;
    }
    if(ColorOrder == WS2812_COLOR_ORDER_RGB) {
        OffsetRed = 0;
        OffsetGreen = 1;
        OffsetBlue = 2;
<<<<<<< Updated upstream
 65e:	08 95       	ret

00000660 <_ZN6WS28126setPinEh>:
 660:	dc 01       	movw	r26, r24
 662:	64 31       	cpi	r22, 0x14	; 20
 664:	e0 f4       	brcc	.+56     	; 0x69e <_ZN6WS28126setPinEh+0x3e>
 666:	86 2f       	mov	r24, r22
 668:	26 2f       	mov	r18, r22
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	f9 01       	movw	r30, r18
 66e:	e7 52       	subi	r30, 0x27	; 39
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	e4 91       	lpm	r30, Z
 674:	ec 93       	st	X, r30
 676:	f9 01       	movw	r30, r18
 678:	e3 51       	subi	r30, 0x13	; 19
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	e4 91       	lpm	r30, Z
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	ef 5f       	subi	r30, 0xFF	; 255
 686:	fd 4f       	sbci	r31, 0xFD	; 253
 688:	25 91       	lpm	r18, Z+
 68a:	34 91       	lpm	r19, Z
 68c:	12 96       	adiw	r26, 0x02	; 2
 68e:	3c 93       	st	X, r19
 690:	2e 93       	st	-X, r18
 692:	11 97       	sbiw	r26, 0x01	; 1
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 4f 05 	call	0xa9e	; 0xa9e <pinMode>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	08 95       	ret
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret

000006a2 <_ZN6WS2812C1Eh>:
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	ec 01       	movw	r28, r24
 6a8:	0e 94 30 03 	call	0x660	; 0x660 <_ZN6WS28126setPinEh>
 6ac:	fe 01       	movw	r30, r28
 6ae:	e3 5b       	subi	r30, 0xB3	; 179
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	80 83       	st	Z, r24
 6b6:	31 96       	adiw	r30, 0x01	; 1
 6b8:	10 82       	st	Z, r1
 6ba:	11 82       	std	Z+1, r1	; 0x01
 6bc:	12 82       	std	Z+2, r1	; 0x02
 6be:	13 82       	std	Z+3, r1	; 0x03
 6c0:	eb 54       	subi	r30, 0x4B	; 75
 6c2:	f1 40       	sbci	r31, 0x01	; 1
 6c4:	8a e4       	ldi	r24, 0x4A	; 74
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	df 01       	movw	r26, r30
 6ca:	9c 01       	movw	r18, r24
 6cc:	1d 92       	st	X+, r1
 6ce:	21 50       	subi	r18, 0x01	; 1
 6d0:	30 40       	sbci	r19, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <_ZN6WS2812C1Eh+0x2a>
 6d4:	ef 5a       	subi	r30, 0xAF	; 175
 6d6:	fe 4f       	sbci	r31, 0xFE	; 254
 6d8:	10 82       	st	Z, r1
 6da:	32 97       	sbiw	r30, 0x02	; 2
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 83       	st	Z, r24
 6e0:	cd 5a       	subi	r28, 0xAD	; 173
 6e2:	de 4f       	sbci	r29, 0xFE	; 254
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	88 83       	st	Y, r24
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	08 95       	ret

000006ee <_ZN6WS28128setPixelEh15WS2812PixelType>:
 6ee:	6e 36       	cpi	r22, 0x6E	; 110
 6f0:	e8 f4       	brcc	.+58     	; 0x72c <_ZN6WS28128setPixelEh15WS2812PixelType+0x3e>
 6f2:	fc 01       	movw	r30, r24
 6f4:	ee 5a       	subi	r30, 0xAE	; 174
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	50 81       	ld	r21, Z
 6fa:	fc 01       	movw	r30, r24
 6fc:	e6 0f       	add	r30, r22
 6fe:	f1 1d       	adc	r31, r1
 700:	bf 01       	movw	r22, r30
 702:	e5 0f       	add	r30, r21
 704:	f1 1d       	adc	r31, r1
 706:	23 83       	std	Z+3, r18	; 0x03
 708:	fc 01       	movw	r30, r24
 70a:	ed 5a       	subi	r30, 0xAD	; 173
 70c:	fe 4f       	sbci	r31, 0xFE	; 254
 70e:	20 81       	ld	r18, Z
 710:	fb 01       	movw	r30, r22
 712:	e2 0f       	add	r30, r18
 714:	f1 1d       	adc	r31, r1
 716:	33 83       	std	Z+3, r19	; 0x03
 718:	fc 01       	movw	r30, r24
 71a:	ec 5a       	subi	r30, 0xAC	; 172
 71c:	fe 4f       	sbci	r31, 0xFE	; 254
 71e:	80 81       	ld	r24, Z
 720:	fb 01       	movw	r30, r22
 722:	e8 0f       	add	r30, r24
 724:	f1 1d       	adc	r31, r1
 726:	43 83       	std	Z+3, r20	; 0x03
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret

00000730 <_ZN6WS28128setPixelEhhhh>:
 730:	0f 93       	push	r16
 732:	6e 36       	cpi	r22, 0x6E	; 110
 734:	e8 f4       	brcc	.+58     	; 0x770 <_ZN6WS28128setPixelEhhhh+0x40>
 736:	fc 01       	movw	r30, r24
 738:	ee 5a       	subi	r30, 0xAE	; 174
 73a:	fe 4f       	sbci	r31, 0xFE	; 254
 73c:	30 81       	ld	r19, Z
 73e:	fc 01       	movw	r30, r24
 740:	e6 0f       	add	r30, r22
 742:	f1 1d       	adc	r31, r1
 744:	bf 01       	movw	r22, r30
 746:	e3 0f       	add	r30, r19
 748:	f1 1d       	adc	r31, r1
 74a:	43 83       	std	Z+3, r20	; 0x03
 74c:	fc 01       	movw	r30, r24
 74e:	ed 5a       	subi	r30, 0xAD	; 173
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	30 81       	ld	r19, Z
 754:	fb 01       	movw	r30, r22
 756:	e3 0f       	add	r30, r19
 758:	f1 1d       	adc	r31, r1
 75a:	23 83       	std	Z+3, r18	; 0x03
 75c:	fc 01       	movw	r30, r24
 75e:	ec 5a       	subi	r30, 0xAC	; 172
 760:	fe 4f       	sbci	r31, 0xFE	; 254
 762:	80 81       	ld	r24, Z
 764:	fb 01       	movw	r30, r22
 766:	e8 0f       	add	r30, r24
 768:	f1 1d       	adc	r31, r1
 76a:	03 83       	std	Z+3, r16	; 0x03
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	01 c0       	rjmp	.+2      	; 0x772 <_ZN6WS28128setPixelEhhhh+0x42>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0f 91       	pop	r16
 774:	08 95       	ret

00000776 <_ZN6WS28128sendDataEPKhj>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void  WS2812::sendData(const byte* Data, uint16_t DataLength)
{
 776:	fc 01       	movw	r30, r24
=======
 622:	08 95       	ret

00000624 <_ZN6WS28126setPinEh>:
 624:	dc 01       	movw	r26, r24
 626:	64 31       	cpi	r22, 0x14	; 20
 628:	e0 f4       	brcc	.+56     	; 0x662 <_ZN6WS28126setPinEh+0x3e>
 62a:	86 2f       	mov	r24, r22
 62c:	26 2f       	mov	r18, r22
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	f9 01       	movw	r30, r18
 632:	e7 52       	subi	r30, 0x27	; 39
 634:	fe 4f       	sbci	r31, 0xFE	; 254
 636:	e4 91       	lpm	r30, Z
 638:	ec 93       	st	X, r30
 63a:	f9 01       	movw	r30, r18
 63c:	e3 51       	subi	r30, 0x13	; 19
 63e:	fe 4f       	sbci	r31, 0xFE	; 254
 640:	e4 91       	lpm	r30, Z
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ef 5f       	subi	r30, 0xFF	; 255
 64a:	fd 4f       	sbci	r31, 0xFD	; 253
 64c:	25 91       	lpm	r18, Z+
 64e:	34 91       	lpm	r19, Z
 650:	12 96       	adiw	r26, 0x02	; 2
 652:	3c 93       	st	X, r19
 654:	2e 93       	st	-X, r18
 656:	11 97       	sbiw	r26, 0x01	; 1
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	0e 94 30 05 	call	0xa60	; 0xa60 <pinMode>
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret

00000666 <_ZN6WS2812C1Eh>:
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	ec 01       	movw	r28, r24
 66c:	0e 94 12 03 	call	0x624	; 0x624 <_ZN6WS28126setPinEh>
 670:	fe 01       	movw	r30, r28
 672:	e3 5b       	subi	r30, 0xB3	; 179
 674:	fe 4f       	sbci	r31, 0xFE	; 254
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	80 83       	st	Z, r24
 67a:	31 96       	adiw	r30, 0x01	; 1
 67c:	10 82       	st	Z, r1
 67e:	11 82       	std	Z+1, r1	; 0x01
 680:	12 82       	std	Z+2, r1	; 0x02
 682:	13 82       	std	Z+3, r1	; 0x03
 684:	eb 54       	subi	r30, 0x4B	; 75
 686:	f1 40       	sbci	r31, 0x01	; 1
 688:	8a e4       	ldi	r24, 0x4A	; 74
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	df 01       	movw	r26, r30
 68e:	9c 01       	movw	r18, r24
 690:	1d 92       	st	X+, r1
 692:	21 50       	subi	r18, 0x01	; 1
 694:	30 40       	sbci	r19, 0x00	; 0
 696:	e1 f7       	brne	.-8      	; 0x690 <_ZN6WS2812C1Eh+0x2a>
 698:	ef 5a       	subi	r30, 0xAF	; 175
 69a:	fe 4f       	sbci	r31, 0xFE	; 254
 69c:	10 82       	st	Z, r1
 69e:	32 97       	sbiw	r30, 0x02	; 2
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	80 83       	st	Z, r24
 6a4:	cd 5a       	subi	r28, 0xAD	; 173
 6a6:	de 4f       	sbci	r29, 0xFE	; 254
 6a8:	82 e0       	ldi	r24, 0x02	; 2
 6aa:	88 83       	st	Y, r24
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <_ZN6WS28128setPixelEh15WS2812PixelType>:
 6b2:	6e 36       	cpi	r22, 0x6E	; 110
 6b4:	e8 f4       	brcc	.+58     	; 0x6f0 <_ZN6WS28128setPixelEh15WS2812PixelType+0x3e>
 6b6:	fc 01       	movw	r30, r24
 6b8:	ee 5a       	subi	r30, 0xAE	; 174
 6ba:	fe 4f       	sbci	r31, 0xFE	; 254
 6bc:	50 81       	ld	r21, Z
 6be:	fc 01       	movw	r30, r24
 6c0:	e6 0f       	add	r30, r22
 6c2:	f1 1d       	adc	r31, r1
 6c4:	bf 01       	movw	r22, r30
 6c6:	e5 0f       	add	r30, r21
 6c8:	f1 1d       	adc	r31, r1
 6ca:	23 83       	std	Z+3, r18	; 0x03
 6cc:	fc 01       	movw	r30, r24
 6ce:	ed 5a       	subi	r30, 0xAD	; 173
 6d0:	fe 4f       	sbci	r31, 0xFE	; 254
 6d2:	20 81       	ld	r18, Z
 6d4:	fb 01       	movw	r30, r22
 6d6:	e2 0f       	add	r30, r18
 6d8:	f1 1d       	adc	r31, r1
 6da:	33 83       	std	Z+3, r19	; 0x03
 6dc:	fc 01       	movw	r30, r24
 6de:	ec 5a       	subi	r30, 0xAC	; 172
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	80 81       	ld	r24, Z
 6e4:	fb 01       	movw	r30, r22
 6e6:	e8 0f       	add	r30, r24
 6e8:	f1 1d       	adc	r31, r1
 6ea:	43 83       	std	Z+3, r20	; 0x03
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	08 95       	ret
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	08 95       	ret

000006f4 <_ZN6WS28128setPixelEhhhh>:
 6f4:	0f 93       	push	r16
 6f6:	6e 36       	cpi	r22, 0x6E	; 110
 6f8:	e8 f4       	brcc	.+58     	; 0x734 <_ZN6WS28128setPixelEhhhh+0x40>
 6fa:	fc 01       	movw	r30, r24
 6fc:	ee 5a       	subi	r30, 0xAE	; 174
 6fe:	fe 4f       	sbci	r31, 0xFE	; 254
 700:	30 81       	ld	r19, Z
 702:	fc 01       	movw	r30, r24
 704:	e6 0f       	add	r30, r22
 706:	f1 1d       	adc	r31, r1
 708:	bf 01       	movw	r22, r30
 70a:	e3 0f       	add	r30, r19
 70c:	f1 1d       	adc	r31, r1
 70e:	43 83       	std	Z+3, r20	; 0x03
 710:	fc 01       	movw	r30, r24
 712:	ed 5a       	subi	r30, 0xAD	; 173
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	30 81       	ld	r19, Z
 718:	fb 01       	movw	r30, r22
 71a:	e3 0f       	add	r30, r19
 71c:	f1 1d       	adc	r31, r1
 71e:	23 83       	std	Z+3, r18	; 0x03
 720:	fc 01       	movw	r30, r24
 722:	ec 5a       	subi	r30, 0xAC	; 172
 724:	fe 4f       	sbci	r31, 0xFE	; 254
 726:	80 81       	ld	r24, Z
 728:	fb 01       	movw	r30, r22
 72a:	e8 0f       	add	r30, r24
 72c:	f1 1d       	adc	r31, r1
 72e:	03 83       	std	Z+3, r16	; 0x03
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	01 c0       	rjmp	.+2      	; 0x736 <_ZN6WS28128setPixelEhhhh+0x42>
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	0f 91       	pop	r16
 738:	08 95       	ret

0000073a <_ZN6WS28128sendDataEPKhj>:
{
>>>>>>> Stashed changes
    uint8_t BitCounter;
    uint8_t PortMaskLow;
    uint8_t PortMaskHigh;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
<<<<<<< Updated upstream
 778:	2f b7       	in	r18, 0x3f	; 63
=======
 73a:	3f b7       	in	r19, 0x3f	; 63
>>>>>>> Stashed changes
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
<<<<<<< Updated upstream
 77a:	f8 94       	cli
    {
        PortMaskLow = ~PinMask & *PortOutputRegister;
 77c:	90 81       	ld	r25, Z
 77e:	a1 81       	ldd	r26, Z+1	; 0x01
 780:	b2 81       	ldd	r27, Z+2	; 0x02
 782:	3c 91       	ld	r19, X
 784:	89 2f       	mov	r24, r25
 786:	80 95       	com	r24
 788:	83 23       	and	r24, r19
        PortMaskHigh = PinMask | *PortOutputRegister;
 78a:	3c 91       	ld	r19, X
 78c:	93 2b       	or	r25, r19
 78e:	fb 01       	movw	r30, r22
 790:	46 0f       	add	r20, r22
 792:	57 1f       	adc	r21, r23

        for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 794:	e4 17       	cp	r30, r20
 796:	f5 07       	cpc	r31, r21
 798:	81 f0       	breq	.+32     	; 0x7ba <skipone834+0x8>
=======
 73c:	f8 94       	cli
    {
        PortMaskLow = ~PinMask & *PortOutputRegister;
 73e:	fc 01       	movw	r30, r24
 740:	20 81       	ld	r18, Z
 742:	a1 81       	ldd	r26, Z+1	; 0x01
 744:	b2 81       	ldd	r27, Z+2	; 0x02
 746:	9c 91       	ld	r25, X
 748:	82 2f       	mov	r24, r18
 74a:	80 95       	com	r24
 74c:	98 23       	and	r25, r24
        PortMaskHigh = PinMask | *PortOutputRegister;
 74e:	8c 91       	ld	r24, X
 750:	82 2b       	or	r24, r18
 752:	fb 01       	movw	r30, r22
 754:	46 0f       	add	r20, r22
 756:	57 1f       	adc	r21, r23

        for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 758:	e4 17       	cp	r30, r20
 75a:	f5 07       	cpc	r31, r21
 75c:	81 f0       	breq	.+32     	; 0x77e <skipone810+0x8>
>>>>>>> Stashed changes
                : [BitCounter]      "=&d" (BitCounter)
                : [CurrentByte]     "r"   (Data[ByteCounter]),
                  [Port]            "x"   (PortOutputRegister),
                  [PortMaskHigh]    "r"   (PortMaskHigh),
                  [PortMaskLow]     "r"   (PortMaskLow)
            );
<<<<<<< Updated upstream
 79a:	31 91       	ld	r19, Z+
 79c:	68 e0       	ldi	r22, 0x08	; 8

0000079e <loop834>:
 79e:	9c 93       	st	X, r25
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <loop834+0x4>
 7a2:	37 ff       	sbrs	r19, 7
 7a4:	8c 93       	st	X, r24
 7a6:	33 0f       	add	r19, r19
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <loop834+0xc>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <loop834+0xe>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <loop834+0x10>
 7ae:	08 f4       	brcc	.+2      	; 0x7b2 <skipone834>
 7b0:	8c 93       	st	X, r24

000007b2 <skipone834>:
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <skipone834+0x2>
 7b4:	6a 95       	dec	r22
 7b6:	99 f7       	brne	.-26     	; 0x79e <loop834>
 7b8:	ed cf       	rjmp	.-38     	; 0x794 <_ZN6WS28128sendDataEPKhj+0x1e>
=======
 75e:	21 91       	ld	r18, Z+
 760:	68 e0       	ldi	r22, 0x08	; 8

00000762 <loop810>:
 762:	8c 93       	st	X, r24
 764:	00 c0       	rjmp	.+0      	; 0x766 <loop810+0x4>
 766:	27 ff       	sbrs	r18, 7
 768:	9c 93       	st	X, r25
 76a:	22 0f       	add	r18, r18
 76c:	00 c0       	rjmp	.+0      	; 0x76e <loop810+0xc>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <loop810+0xe>
 770:	00 c0       	rjmp	.+0      	; 0x772 <loop810+0x10>
 772:	08 f4       	brcc	.+2      	; 0x776 <skipone810>
 774:	9c 93       	st	X, r25

00000776 <skipone810>:
 776:	00 c0       	rjmp	.+0      	; 0x778 <skipone810+0x2>
 778:	6a 95       	dec	r22
 77a:	99 f7       	brne	.-26     	; 0x762 <loop810>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
        PortMaskLow = ~PinMask & *PortOutputRegister;
        PortMaskHigh = PinMask | *PortOutputRegister;

        for(uint16_t ByteCounter = 0; ByteCounter < DataLength; ByteCounter++)
 77c:	ed cf       	rjmp	.-38     	; 0x758 <_ZN6WS28128sendDataEPKhj+0x1e>
>>>>>>> Stashed changes
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
<<<<<<< Updated upstream
 7ba:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
 7bc:	08 95       	ret

000007be <_ZN6WS28124showEv.part.4>:
=======
 77e:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
 780:	08 95       	ret

00000782 <_ZN6WS28124showEv.part.4>:
>>>>>>> Stashed changes
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
#if (WS2812_RESET_TIMER == STD_ON)
stdReturnType WS2812::show()
<<<<<<< Updated upstream
 7be:	cf 92       	push	r12
 7c0:	df 92       	push	r13
 7c2:	ef 92       	push	r14
 7c4:	ff 92       	push	r15
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	ca 54       	subi	r28, 0x4A	; 74
 7d4:	d1 40       	sbci	r29, 0x01	; 1
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
 7e0:	8c 01       	movw	r16, r24
=======
 782:	8f 92       	push	r8
 784:	9f 92       	push	r9
 786:	af 92       	push	r10
 788:	bf 92       	push	r11
 78a:	cf 92       	push	r12
 78c:	df 92       	push	r13
 78e:	ef 92       	push	r14
 790:	ff 92       	push	r15
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	ca 54       	subi	r28, 0x4A	; 74
 7a0:	d1 40       	sbci	r29, 0x01	; 1
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61
 7ac:	8c 01       	movw	r16, r24
>>>>>>> Stashed changes
    byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
    if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
#endif
        if(Brightness != 255) {
<<<<<<< Updated upstream
 7e2:	fc 01       	movw	r30, r24
 7e4:	e3 5b       	subi	r30, 0xB3	; 179
 7e6:	fe 4f       	sbci	r31, 0xFE	; 254
 7e8:	40 81       	ld	r20, Z
 7ea:	4f 3f       	cpi	r20, 0xFF	; 255
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <_ZN6WS28124showEv.part.4+0x32>
 7ee:	52 c0       	rjmp	.+164    	; 0x894 <_ZN6WS28124showEv.part.4+0xd6>
=======
 7ae:	fc 01       	movw	r30, r24
 7b0:	e3 5b       	subi	r30, 0xB3	; 179
 7b2:	fe 4f       	sbci	r31, 0xFE	; 254
 7b4:	60 81       	ld	r22, Z
 7b6:	6f 3f       	cpi	r22, 0xFF	; 255
 7b8:	09 f4       	brne	.+2      	; 0x7bc <_ZN6WS28124showEv.part.4+0x3a>
 7ba:	49 c0       	rjmp	.+146    	; 0x84e <_ZN6WS28124showEv.part.4+0xcc>
>>>>>>> Stashed changes
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
    for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
    {
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_RED(i)], Pixels[WS2812_POS_ABS_RED(i)]);
<<<<<<< Updated upstream
 7f0:	35 96       	adiw	r30, 0x05	; 5
 7f2:	a0 81       	ld	r26, Z
 7f4:	b0 e0       	ldi	r27, 0x00	; 0
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 7f6:	31 96       	adiw	r30, 0x01	; 1
 7f8:	e0 81       	ld	r30, Z
 7fa:	ce 2e       	mov	r12, r30
 7fc:	d1 2c       	mov	r13, r1
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 7fe:	8c 5a       	subi	r24, 0xAC	; 172
 800:	9e 4f       	sbci	r25, 0xFE	; 254
 802:	fc 01       	movw	r30, r24
 804:	60 81       	ld	r22, Z
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	9c 01       	movw	r18, r24
 80e:	2a 0f       	add	r18, r26
 810:	3b 1f       	adc	r19, r27
 812:	78 01       	movw	r14, r16
 814:	e2 0e       	add	r14, r18
 816:	f3 1e       	adc	r15, r19
=======
 7bc:	35 96       	adiw	r30, 0x05	; 5
 7be:	20 81       	ld	r18, Z
 7c0:	30 e0       	ldi	r19, 0x00	; 0
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 7c2:	31 96       	adiw	r30, 0x01	; 1
 7c4:	e0 80       	ld	r14, Z
 7c6:	f1 2c       	mov	r15, r1
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 7c8:	31 96       	adiw	r30, 0x01	; 1
 7ca:	a0 81       	ld	r26, Z
 7cc:	8a 2e       	mov	r8, r26
 7ce:	91 2c       	mov	r9, r1
 7d0:	e1 e0       	ldi	r30, 0x01	; 1
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	ec 0f       	add	r30, r28
 7d6:	fd 1f       	adc	r31, r29
 7d8:	e2 0f       	add	r30, r18
 7da:	f3 1f       	adc	r31, r19
 7dc:	83 e0       	ldi	r24, 0x03	; 3
 7de:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> Stashed changes
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
    for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
    {
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_RED(i)], Pixels[WS2812_POS_ABS_RED(i)]);
<<<<<<< Updated upstream
 818:	f7 01       	movw	r30, r14
 81a:	e3 80       	ldd	r14, Z+3	; 0x03
 81c:	e1 e0       	ldi	r30, 0x01	; 1
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	ec 0f       	add	r30, r28
 822:	fd 1f       	adc	r31, r29
 824:	2e 0f       	add	r18, r30
 826:	3f 1f       	adc	r19, r31
=======
 7e0:	a9 01       	movw	r20, r18
 7e2:	48 0f       	add	r20, r24
 7e4:	59 1f       	adc	r21, r25
 7e6:	40 0f       	add	r20, r16
 7e8:	51 1f       	adc	r21, r17
 7ea:	da 01       	movw	r26, r20
 7ec:	4c 91       	ld	r20, X
>>>>>>> Stashed changes
    // functions
    void sendData(const byte*, uint16_t);
    void dimmPixels(byte*, uint16_t);
    void dimmPixel(WS2812PixelType*, WS2812PixelType);
    void dimmPixel(WS2812PixelType*, byte, byte, byte);
    void dimmColor(byte* ColorDimmed, byte Color) const { *ColorDimmed = (Color * Brightness) >> 8; }
<<<<<<< Updated upstream
 828:	e4 9e       	mul	r14, r20
 82a:	70 01       	movw	r14, r0
 82c:	11 24       	eor	r1, r1
 82e:	f9 01       	movw	r30, r18
 830:	f0 82       	st	Z, r15
 832:	9c 01       	movw	r18, r24
 834:	2c 0d       	add	r18, r12
 836:	3d 1d       	adc	r19, r13
 838:	78 01       	movw	r14, r16
 83a:	e2 0e       	add	r14, r18
 83c:	f3 1e       	adc	r15, r19
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 83e:	f7 01       	movw	r30, r14
 840:	e3 80       	ldd	r14, Z+3	; 0x03
 842:	e1 e0       	ldi	r30, 0x01	; 1
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	ec 0f       	add	r30, r28
 848:	fd 1f       	adc	r31, r29
 84a:	2e 0f       	add	r18, r30
 84c:	3f 1f       	adc	r19, r31
 84e:	e4 9e       	mul	r14, r20
 850:	70 01       	movw	r14, r0
 852:	11 24       	eor	r1, r1
 854:	f9 01       	movw	r30, r18
 856:	f0 82       	st	Z, r15
 858:	9c 01       	movw	r18, r24
 85a:	26 0f       	add	r18, r22
 85c:	37 1f       	adc	r19, r23
 85e:	78 01       	movw	r14, r16
 860:	e2 0e       	add	r14, r18
 862:	f3 1e       	adc	r15, r19
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 864:	f7 01       	movw	r30, r14
 866:	e3 80       	ldd	r14, Z+3	; 0x03
 868:	e1 e0       	ldi	r30, 0x01	; 1
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	ec 0f       	add	r30, r28
 86e:	fd 1f       	adc	r31, r29
 870:	2e 0f       	add	r18, r30
 872:	3f 1f       	adc	r19, r31
 874:	e4 9e       	mul	r14, r20
 876:	70 01       	movw	r14, r0
 878:	11 24       	eor	r1, r1
 87a:	f9 01       	movw	r30, r18
 87c:	f0 82       	st	Z, r15
=======
 7ee:	46 9f       	mul	r20, r22
 7f0:	a0 01       	movw	r20, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	50 83       	st	Z, r21
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_GREEN(i)], Pixels[WS2812_POS_ABS_GREEN(i)]);
 7f6:	a7 01       	movw	r20, r14
 7f8:	48 0f       	add	r20, r24
 7fa:	59 1f       	adc	r21, r25
 7fc:	40 0f       	add	r20, r16
 7fe:	51 1f       	adc	r21, r17
 800:	da 01       	movw	r26, r20
 802:	cc 90       	ld	r12, X
 804:	af 01       	movw	r20, r30
 806:	42 1b       	sub	r20, r18
 808:	53 0b       	sbc	r21, r19
 80a:	5a 01       	movw	r10, r20
 80c:	ae 0c       	add	r10, r14
 80e:	bf 1c       	adc	r11, r15
 810:	6c 9d       	mul	r22, r12
 812:	60 01       	movw	r12, r0
 814:	11 24       	eor	r1, r1
 816:	d5 01       	movw	r26, r10
 818:	dc 92       	st	X, r13
        dimmColor(&PixelsDimmed[WS2812_POS_ABS_BLUE(i)], Pixels[WS2812_POS_ABS_BLUE(i)]);
 81a:	64 01       	movw	r12, r8
 81c:	c8 0e       	add	r12, r24
 81e:	d9 1e       	adc	r13, r25
 820:	c0 0e       	add	r12, r16
 822:	d1 1e       	adc	r13, r17
 824:	d6 01       	movw	r26, r12
 826:	cc 90       	ld	r12, X
 828:	48 0d       	add	r20, r8
 82a:	59 1d       	adc	r21, r9
 82c:	6c 9d       	mul	r22, r12
 82e:	60 01       	movw	r12, r0
 830:	11 24       	eor	r1, r1
 832:	da 01       	movw	r26, r20
 834:	dc 92       	st	X, r13
 836:	03 96       	adiw	r24, 0x03	; 3
 838:	33 96       	adiw	r30, 0x03	; 3
>>>>>>> Stashed changes
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
inline void WS2812::dimmPixels(byte* PixelsDimmed, uint16_t DataLength)
{
    for(uint16_t i = 0; i < DataLength; i = i + WS2812_NUMBER_OF_COLORS)
<<<<<<< Updated upstream
 87e:	03 96       	adiw	r24, 0x03	; 3
 880:	8a 34       	cpi	r24, 0x4A	; 74
 882:	f1 e0       	ldi	r31, 0x01	; 1
 884:	9f 07       	cpc	r25, r31
 886:	11 f6       	brne	.-124    	; 0x80c <_ZN6WS28124showEv.part.4+0x4e>
=======
 83a:	8d 34       	cpi	r24, 0x4D	; 77
 83c:	b1 e0       	ldi	r27, 0x01	; 1
 83e:	9b 07       	cpc	r25, r27
 840:	79 f6       	brne	.-98     	; 0x7e0 <_ZN6WS28124showEv.part.4+0x5e>
>>>>>>> Stashed changes
#if (WS2812_RESET_TIMER == STD_ON)
    if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
#endif
        if(Brightness != 255) {
            dimmPixels(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
            sendData(PixelsDimmed, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
<<<<<<< Updated upstream
 888:	4a e4       	ldi	r20, 0x4A	; 74
 88a:	51 e0       	ldi	r21, 0x01	; 1
 88c:	be 01       	movw	r22, r28
 88e:	6f 5f       	subi	r22, 0xFF	; 255
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	05 c0       	rjmp	.+10     	; 0x89e <_ZN6WS28124showEv.part.4+0xe0>
        } else {
            sendData(Pixels, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 894:	4a e4       	ldi	r20, 0x4A	; 74
 896:	51 e0       	ldi	r21, 0x01	; 1
 898:	bc 01       	movw	r22, r24
 89a:	6d 5f       	subi	r22, 0xFD	; 253
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	c8 01       	movw	r24, r16
 8a0:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN6WS28128sendDataEPKhj>
        }
#if (WS2812_RESET_TIMER == STD_ON)
        ResetTimer = micros();
 8a4:	0e 94 ef 04 	call	0x9de	; 0x9de <micros>
 8a8:	f8 01       	movw	r30, r16
 8aa:	e2 5b       	subi	r30, 0xB2	; 178
 8ac:	fe 4f       	sbci	r31, 0xFE	; 254
 8ae:	60 83       	st	Z, r22
 8b0:	71 83       	std	Z+1, r23	; 0x01
 8b2:	82 83       	std	Z+2, r24	; 0x02
 8b4:	93 83       	std	Z+3, r25	; 0x03
=======
 842:	4a e4       	ldi	r20, 0x4A	; 74
 844:	51 e0       	ldi	r21, 0x01	; 1
 846:	be 01       	movw	r22, r28
 848:	6f 5f       	subi	r22, 0xFF	; 255
 84a:	7f 4f       	sbci	r23, 0xFF	; 255
 84c:	05 c0       	rjmp	.+10     	; 0x858 <_ZN6WS28124showEv.part.4+0xd6>
        } else {
            sendData(Pixels, WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS);
 84e:	4a e4       	ldi	r20, 0x4A	; 74
 850:	51 e0       	ldi	r21, 0x01	; 1
 852:	bc 01       	movw	r22, r24
 854:	6d 5f       	subi	r22, 0xFD	; 253
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	c8 01       	movw	r24, r16
 85a:	0e 94 9d 03 	call	0x73a	; 0x73a <_ZN6WS28128sendDataEPKhj>
        }
#if (WS2812_RESET_TIMER == STD_ON)
        ResetTimer = micros();
 85e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <micros>
 862:	f8 01       	movw	r30, r16
 864:	e2 5b       	subi	r30, 0xB2	; 178
 866:	fe 4f       	sbci	r31, 0xFE	; 254
 868:	60 83       	st	Z, r22
 86a:	71 83       	std	Z+1, r23	; 0x01
 86c:	82 83       	std	Z+2, r24	; 0x02
 86e:	93 83       	std	Z+3, r25	; 0x03
>>>>>>> Stashed changes
        return E_OK;
    } else {
        return E_NOT_OK;
    }
#endif
} /* show */
<<<<<<< Updated upstream
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	c6 5b       	subi	r28, 0xB6	; 182
 8ba:	de 4f       	sbci	r29, 0xFE	; 254
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	f8 94       	cli
 8c0:	de bf       	out	0x3e, r29	; 62
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	cd bf       	out	0x3d, r28	; 61
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	ef 90       	pop	r14
 8d2:	df 90       	pop	r13
 8d4:	cf 90       	pop	r12
 8d6:	08 95       	ret

000008d8 <_ZN6WS28124showEv>:
=======
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	c6 5b       	subi	r28, 0xB6	; 182
 874:	de 4f       	sbci	r29, 0xFE	; 254
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	de bf       	out	0x3e, r29	; 62
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	ff 90       	pop	r15
 88a:	ef 90       	pop	r14
 88c:	df 90       	pop	r13
 88e:	cf 90       	pop	r12
 890:	bf 90       	pop	r11
 892:	af 90       	pop	r10
 894:	9f 90       	pop	r9
 896:	8f 90       	pop	r8
 898:	08 95       	ret

0000089a <_ZN6WS28124showEv>:
>>>>>>> Stashed changes
#if (WS2812_RESET_TIMER == STD_ON)
stdReturnType WS2812::show()
#elif (WS2812_RESET_TIMER == STD_OFF)
void WS2812::show()
#endif
{
<<<<<<< Updated upstream
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	ec 01       	movw	r28, r24
=======
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	ec 01       	movw	r28, r24
>>>>>>> Stashed changes
    byte PixelsDimmed[WS2812_NUMBER_OF_LEDS * WS2812_NUMBER_OF_COLORS];

#if (WS2812_RESET_TIMER == STD_ON)
    if((micros() - ResetTimer) > (WS2812_RESET_DURATION_NS / 1000) || ResetTimer == 0) {
<<<<<<< Updated upstream
 8e2:	0e 94 ef 04 	call	0x9de	; 0x9de <micros>
 8e6:	fe 01       	movw	r30, r28
 8e8:	e2 5b       	subi	r30, 0xB2	; 178
 8ea:	fe 4f       	sbci	r31, 0xFE	; 254
 8ec:	00 81       	ld	r16, Z
 8ee:	11 81       	ldd	r17, Z+1	; 0x01
 8f0:	22 81       	ldd	r18, Z+2	; 0x02
 8f2:	33 81       	ldd	r19, Z+3	; 0x03
 8f4:	dc 01       	movw	r26, r24
 8f6:	cb 01       	movw	r24, r22
 8f8:	80 1b       	sub	r24, r16
 8fa:	91 0b       	sbc	r25, r17
 8fc:	a2 0b       	sbc	r26, r18
 8fe:	b3 0b       	sbc	r27, r19
 900:	c3 97       	sbiw	r24, 0x33	; 51
 902:	a1 05       	cpc	r26, r1
 904:	b1 05       	cpc	r27, r1
 906:	20 f4       	brcc	.+8      	; 0x910 <__stack+0x11>
 908:	01 2b       	or	r16, r17
 90a:	02 2b       	or	r16, r18
 90c:	03 2b       	or	r16, r19
 90e:	39 f4       	brne	.+14     	; 0x91e <__stack+0x1f>
 910:	ce 01       	movw	r24, r28
=======
 8a4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <micros>
 8a8:	fe 01       	movw	r30, r28
 8aa:	e2 5b       	subi	r30, 0xB2	; 178
 8ac:	fe 4f       	sbci	r31, 0xFE	; 254
 8ae:	00 81       	ld	r16, Z
 8b0:	11 81       	ldd	r17, Z+1	; 0x01
 8b2:	22 81       	ldd	r18, Z+2	; 0x02
 8b4:	33 81       	ldd	r19, Z+3	; 0x03
 8b6:	dc 01       	movw	r26, r24
 8b8:	cb 01       	movw	r24, r22
 8ba:	80 1b       	sub	r24, r16
 8bc:	91 0b       	sbc	r25, r17
 8be:	a2 0b       	sbc	r26, r18
 8c0:	b3 0b       	sbc	r27, r19
 8c2:	c3 97       	sbiw	r24, 0x33	; 51
 8c4:	a1 05       	cpc	r26, r1
 8c6:	b1 05       	cpc	r27, r1
 8c8:	20 f4       	brcc	.+8      	; 0x8d2 <_ZN6WS28124showEv+0x38>
 8ca:	01 2b       	or	r16, r17
 8cc:	02 2b       	or	r16, r18
 8ce:	03 2b       	or	r16, r19
 8d0:	39 f4       	brne	.+14     	; 0x8e0 <_ZN6WS28124showEv+0x46>
 8d2:	ce 01       	movw	r24, r28
>>>>>>> Stashed changes
        return E_OK;
    } else {
        return E_NOT_OK;
    }
#endif
} /* show */
<<<<<<< Updated upstream
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	1f 91       	pop	r17
 918:	0f 91       	pop	r16
 91a:	0c 94 df 03 	jmp	0x7be	; 0x7be <_ZN6WS28124showEv.part.4>
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	08 95       	ret

0000092a <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 92a:	08 95       	ret

0000092c <main>:
=======
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	0c 94 c1 03 	jmp	0x782	; 0x782 <_ZN6WS28124showEv.part.4>
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	1f 91       	pop	r17
 8e8:	0f 91       	pop	r16
 8ea:	08 95       	ret

000008ec <initVariant>:
 8ec:	08 95       	ret

000008ee <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }
>>>>>>> Stashed changes

int main(void)
{
	init();
<<<<<<< Updated upstream
 92c:	0e 94 14 05 	call	0xa28	; 0xa28 <init>

	initVariant();
 930:	0e 94 95 04 	call	0x92a	; 0x92a <initVariant>
=======
 8ee:	0e 94 f5 04 	call	0x9ea	; 0x9ea <init>

	initVariant();
 8f2:	0e 94 76 04 	call	0x8ec	; 0x8ec <initVariant>
>>>>>>> Stashed changes

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
<<<<<<< Updated upstream
 934:	0e 94 2c 01 	call	0x258	; 0x258 <setup>
=======
 8f6:	0e 94 2c 01 	call	0x258	; 0x258 <setup>
>>>>>>> Stashed changes
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
<<<<<<< Updated upstream
 938:	c0 e0       	ldi	r28, 0x00	; 0
 93a:	d0 e0       	ldi	r29, 0x00	; 0
=======
 8fa:	c0 e0       	ldi	r28, 0x00	; 0
 8fc:	d0 e0       	ldi	r29, 0x00	; 0
>>>>>>> Stashed changes
#endif
	
	setup();
    
	for (;;) {
		loop();
<<<<<<< Updated upstream
 93c:	0e 94 2d 01 	call	0x25a	; 0x25a <loop>
		if (serialEventRun) serialEventRun();
 940:	20 97       	sbiw	r28, 0x00	; 0
 942:	e1 f3       	breq	.-8      	; 0x93c <main+0x10>
 944:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 948:	f9 cf       	rjmp	.-14     	; 0x93c <main+0x10>

0000094a <__vector_16>:
=======
 8fe:	0e 94 2d 01 	call	0x25a	; 0x25a <loop>
		if (serialEventRun) serialEventRun();
 902:	20 97       	sbiw	r28, 0x00	; 0
 904:	e1 f3       	breq	.-8      	; 0x8fe <main+0x10>
 906:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 90a:	f9 cf       	rjmp	.-14     	; 0x8fe <main+0x10>

0000090c <__vector_16>:
>>>>>>> Stashed changes
	

#endif

	// busy wait
	__asm__ __volatile__ (
<<<<<<< Updated upstream
 94a:	1f 92       	push	r1
 94c:	0f 92       	push	r0
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	0f 92       	push	r0
 952:	11 24       	eor	r1, r1
 954:	2f 93       	push	r18
 956:	3f 93       	push	r19
 958:	8f 93       	push	r24
 95a:	9f 93       	push	r25
 95c:	af 93       	push	r26
 95e:	bf 93       	push	r27
 960:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis>
 964:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x1>
 968:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <timer0_millis+0x2>
 96c:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <timer0_millis+0x3>
 970:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <timer0_fract>
 974:	23 e0       	ldi	r18, 0x03	; 3
 976:	23 0f       	add	r18, r19
 978:	2d 37       	cpi	r18, 0x7D	; 125
 97a:	20 f4       	brcc	.+8      	; 0x984 <__vector_16+0x3a>
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	a1 1d       	adc	r26, r1
 980:	b1 1d       	adc	r27, r1
 982:	05 c0       	rjmp	.+10     	; 0x98e <__vector_16+0x44>
 984:	26 e8       	ldi	r18, 0x86	; 134
 986:	23 0f       	add	r18, r19
 988:	02 96       	adiw	r24, 0x02	; 2
 98a:	a1 1d       	adc	r26, r1
 98c:	b1 1d       	adc	r27, r1
 98e:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <timer0_fract>
 992:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timer0_millis>
 996:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <timer0_millis+0x1>
 99a:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <timer0_millis+0x2>
 99e:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <timer0_millis+0x3>
 9a2:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 9a6:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 9aa:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 9ae:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 9b2:	01 96       	adiw	r24, 0x01	; 1
 9b4:	a1 1d       	adc	r26, r1
 9b6:	b1 1d       	adc	r27, r1
 9b8:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer0_overflow_count>
 9bc:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer0_overflow_count+0x1>
 9c0:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer0_overflow_count+0x2>
 9c4:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer0_overflow_count+0x3>
 9c8:	bf 91       	pop	r27
 9ca:	af 91       	pop	r26
 9cc:	9f 91       	pop	r25
 9ce:	8f 91       	pop	r24
 9d0:	3f 91       	pop	r19
 9d2:	2f 91       	pop	r18
 9d4:	0f 90       	pop	r0
 9d6:	0f be       	out	0x3f, r0	; 63
 9d8:	0f 90       	pop	r0
 9da:	1f 90       	pop	r1
 9dc:	18 95       	reti

000009de <micros>:
 9de:	3f b7       	in	r19, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 9e6:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 9ea:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 9ee:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 9f2:	26 b5       	in	r18, 0x26	; 38
 9f4:	a8 9b       	sbis	0x15, 0	; 21
 9f6:	05 c0       	rjmp	.+10     	; 0xa02 <micros+0x24>
 9f8:	2f 3f       	cpi	r18, 0xFF	; 255
 9fa:	19 f0       	breq	.+6      	; 0xa02 <micros+0x24>
 9fc:	01 96       	adiw	r24, 0x01	; 1
 9fe:	a1 1d       	adc	r26, r1
 a00:	b1 1d       	adc	r27, r1
 a02:	3f bf       	out	0x3f, r19	; 63
 a04:	ba 2f       	mov	r27, r26
 a06:	a9 2f       	mov	r26, r25
 a08:	98 2f       	mov	r25, r24
 a0a:	88 27       	eor	r24, r24
 a0c:	82 0f       	add	r24, r18
 a0e:	91 1d       	adc	r25, r1
 a10:	a1 1d       	adc	r26, r1
 a12:	b1 1d       	adc	r27, r1
 a14:	bc 01       	movw	r22, r24
 a16:	cd 01       	movw	r24, r26
 a18:	42 e0       	ldi	r20, 0x02	; 2
 a1a:	66 0f       	add	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	4a 95       	dec	r20
 a24:	d1 f7       	brne	.-12     	; 0xa1a <micros+0x3c>
 a26:	08 95       	ret

00000a28 <init>:
=======
 90c:	1f 92       	push	r1
 90e:	0f 92       	push	r0
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	0f 92       	push	r0
 914:	11 24       	eor	r1, r1
 916:	2f 93       	push	r18
 918:	3f 93       	push	r19
 91a:	8f 93       	push	r24
 91c:	9f 93       	push	r25
 91e:	af 93       	push	r26
 920:	bf 93       	push	r27
 922:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis>
 926:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x1>
 92a:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <timer0_millis+0x2>
 92e:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <timer0_millis+0x3>
 932:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <timer0_fract>
 936:	23 e0       	ldi	r18, 0x03	; 3
 938:	23 0f       	add	r18, r19
 93a:	2d 37       	cpi	r18, 0x7D	; 125
 93c:	20 f4       	brcc	.+8      	; 0x946 <__vector_16+0x3a>
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	a1 1d       	adc	r26, r1
 942:	b1 1d       	adc	r27, r1
 944:	05 c0       	rjmp	.+10     	; 0x950 <__vector_16+0x44>
 946:	26 e8       	ldi	r18, 0x86	; 134
 948:	23 0f       	add	r18, r19
 94a:	02 96       	adiw	r24, 0x02	; 2
 94c:	a1 1d       	adc	r26, r1
 94e:	b1 1d       	adc	r27, r1
 950:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <timer0_fract>
 954:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timer0_millis>
 958:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <timer0_millis+0x1>
 95c:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <timer0_millis+0x2>
 960:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <timer0_millis+0x3>
 964:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 968:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 96c:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 970:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	a1 1d       	adc	r26, r1
 978:	b1 1d       	adc	r27, r1
 97a:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer0_overflow_count>
 97e:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer0_overflow_count+0x1>
 982:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer0_overflow_count+0x2>
 986:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer0_overflow_count+0x3>
 98a:	bf 91       	pop	r27
 98c:	af 91       	pop	r26
 98e:	9f 91       	pop	r25
 990:	8f 91       	pop	r24
 992:	3f 91       	pop	r19
 994:	2f 91       	pop	r18
 996:	0f 90       	pop	r0
 998:	0f be       	out	0x3f, r0	; 63
 99a:	0f 90       	pop	r0
 99c:	1f 90       	pop	r1
 99e:	18 95       	reti

000009a0 <micros>:
 9a0:	3f b7       	in	r19, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 9a8:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 9ac:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 9b0:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 9b4:	26 b5       	in	r18, 0x26	; 38
 9b6:	a8 9b       	sbis	0x15, 0	; 21
 9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <micros+0x24>
 9ba:	2f 3f       	cpi	r18, 0xFF	; 255
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <micros+0x24>
 9be:	01 96       	adiw	r24, 0x01	; 1
 9c0:	a1 1d       	adc	r26, r1
 9c2:	b1 1d       	adc	r27, r1
 9c4:	3f bf       	out	0x3f, r19	; 63
 9c6:	ba 2f       	mov	r27, r26
 9c8:	a9 2f       	mov	r26, r25
 9ca:	98 2f       	mov	r25, r24
 9cc:	88 27       	eor	r24, r24
 9ce:	82 0f       	add	r24, r18
 9d0:	91 1d       	adc	r25, r1
 9d2:	a1 1d       	adc	r26, r1
 9d4:	b1 1d       	adc	r27, r1
 9d6:	bc 01       	movw	r22, r24
 9d8:	cd 01       	movw	r24, r26
 9da:	42 e0       	ldi	r20, 0x02	; 2
 9dc:	66 0f       	add	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	4a 95       	dec	r20
 9e6:	d1 f7       	brne	.-12     	; 0x9dc <micros+0x3c>
 9e8:	08 95       	ret

000009ea <init>:
>>>>>>> Stashed changes

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
<<<<<<< Updated upstream
 a28:	78 94       	sei
=======
 9ea:	78 94       	sei
>>>>>>> Stashed changes
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
<<<<<<< Updated upstream
 a2a:	84 b5       	in	r24, 0x24	; 36
 a2c:	82 60       	ori	r24, 0x02	; 2
 a2e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 a30:	84 b5       	in	r24, 0x24	; 36
 a32:	81 60       	ori	r24, 0x01	; 1
 a34:	84 bd       	out	0x24, r24	; 36
=======
 9ec:	84 b5       	in	r24, 0x24	; 36
 9ee:	82 60       	ori	r24, 0x02	; 2
 9f0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9f2:	84 b5       	in	r24, 0x24	; 36
 9f4:	81 60       	ori	r24, 0x01	; 1
 9f6:	84 bd       	out	0x24, r24	; 36
>>>>>>> Stashed changes
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
<<<<<<< Updated upstream
 a36:	85 b5       	in	r24, 0x25	; 37
 a38:	82 60       	ori	r24, 0x02	; 2
 a3a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 a3c:	85 b5       	in	r24, 0x25	; 37
 a3e:	81 60       	ori	r24, 0x01	; 1
 a40:	85 bd       	out	0x25, r24	; 37
=======
 9f8:	85 b5       	in	r24, 0x25	; 37
 9fa:	82 60       	ori	r24, 0x02	; 2
 9fc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 9fe:	85 b5       	in	r24, 0x25	; 37
 a00:	81 60       	ori	r24, 0x01	; 1
 a02:	85 bd       	out	0x25, r24	; 37
>>>>>>> Stashed changes

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
<<<<<<< Updated upstream
 a42:	ee e6       	ldi	r30, 0x6E	; 110
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	80 81       	ld	r24, Z
 a48:	81 60       	ori	r24, 0x01	; 1
 a4a:	80 83       	st	Z, r24
=======
 a04:	ee e6       	ldi	r30, 0x6E	; 110
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	81 60       	ori	r24, 0x01	; 1
 a0c:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
<<<<<<< Updated upstream
 a4c:	e1 e8       	ldi	r30, 0x81	; 129
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 a52:	80 81       	ld	r24, Z
 a54:	82 60       	ori	r24, 0x02	; 2
 a56:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 a58:	80 81       	ld	r24, Z
 a5a:	81 60       	ori	r24, 0x01	; 1
 a5c:	80 83       	st	Z, r24
=======
 a0e:	e1 e8       	ldi	r30, 0x81	; 129
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 a14:	80 81       	ld	r24, Z
 a16:	82 60       	ori	r24, 0x02	; 2
 a18:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 a1a:	80 81       	ld	r24, Z
 a1c:	81 60       	ori	r24, 0x01	; 1
 a1e:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
<<<<<<< Updated upstream
 a5e:	e0 e8       	ldi	r30, 0x80	; 128
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	81 60       	ori	r24, 0x01	; 1
 a66:	80 83       	st	Z, r24
=======
 a20:	e0 e8       	ldi	r30, 0x80	; 128
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	81 60       	ori	r24, 0x01	; 1
 a28:	80 83       	st	Z, r24
>>>>>>> Stashed changes

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
<<<<<<< Updated upstream
 a68:	e1 eb       	ldi	r30, 0xB1	; 177
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	84 60       	ori	r24, 0x04	; 4
 a70:	80 83       	st	Z, r24
=======
 a2a:	e1 eb       	ldi	r30, 0xB1	; 177
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	80 81       	ld	r24, Z
 a30:	84 60       	ori	r24, 0x04	; 4
 a32:	80 83       	st	Z, r24
>>>>>>> Stashed changes

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
<<<<<<< Updated upstream
 a72:	e0 eb       	ldi	r30, 0xB0	; 176
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	80 81       	ld	r24, Z
 a78:	81 60       	ori	r24, 0x01	; 1
 a7a:	80 83       	st	Z, r24
=======
 a34:	e0 eb       	ldi	r30, 0xB0	; 176
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	81 60       	ori	r24, 0x01	; 1
 a3c:	80 83       	st	Z, r24
>>>>>>> Stashed changes
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
<<<<<<< Updated upstream
 a7c:	ea e7       	ldi	r30, 0x7A	; 122
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z
 a82:	84 60       	ori	r24, 0x04	; 4
 a84:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a86:	80 81       	ld	r24, Z
 a88:	82 60       	ori	r24, 0x02	; 2
 a8a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a8c:	80 81       	ld	r24, Z
 a8e:	81 60       	ori	r24, 0x01	; 1
 a90:	80 83       	st	Z, r24
=======
 a3e:	ea e7       	ldi	r30, 0x7A	; 122
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	84 60       	ori	r24, 0x04	; 4
 a46:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a48:	80 81       	ld	r24, Z
 a4a:	82 60       	ori	r24, 0x02	; 2
 a4c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a4e:	80 81       	ld	r24, Z
 a50:	81 60       	ori	r24, 0x01	; 1
 a52:	80 83       	st	Z, r24
>>>>>>> Stashed changes
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
<<<<<<< Updated upstream
 a92:	80 81       	ld	r24, Z
 a94:	80 68       	ori	r24, 0x80	; 128
 a96:	80 83       	st	Z, r24
=======
 a54:	80 81       	ld	r24, Z
 a56:	80 68       	ori	r24, 0x80	; 128
 a58:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
<<<<<<< Updated upstream
 a98:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a9c:	08 95       	ret

00000a9e <pinMode>:
=======
 a5a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a5e:	08 95       	ret

00000a60 <pinMode>:
>>>>>>> Stashed changes
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
<<<<<<< Updated upstream
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	fc 01       	movw	r30, r24
 aa6:	e7 52       	subi	r30, 0x27	; 39
 aa8:	fe 4f       	sbci	r31, 0xFE	; 254
 aaa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 aac:	fc 01       	movw	r30, r24
 aae:	e3 51       	subi	r30, 0x13	; 19
 ab0:	fe 4f       	sbci	r31, 0xFE	; 254
 ab2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 ab4:	88 23       	and	r24, r24
 ab6:	61 f1       	breq	.+88     	; 0xb10 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	88 0f       	add	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	fc 01       	movw	r30, r24
 ac0:	e5 5f       	subi	r30, 0xF5	; 245
 ac2:	fd 4f       	sbci	r31, 0xFD	; 253
 ac4:	c5 91       	lpm	r28, Z+
 ac6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 ac8:	fc 01       	movw	r30, r24
 aca:	ef 5f       	subi	r30, 0xFF	; 255
 acc:	fd 4f       	sbci	r31, 0xFD	; 253
 ace:	a5 91       	lpm	r26, Z+
 ad0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 ad2:	61 11       	cpse	r22, r1
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 ad6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ad8:	f8 94       	cli
		*reg &= ~bit;
 ada:	88 81       	ld	r24, Y
 adc:	20 95       	com	r18
 ade:	82 23       	and	r24, r18
 ae0:	88 83       	st	Y, r24
		*out &= ~bit;
 ae2:	ec 91       	ld	r30, X
 ae4:	2e 23       	and	r18, r30
 ae6:	0b c0       	rjmp	.+22     	; 0xafe <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 ae8:	62 30       	cpi	r22, 0x02	; 2
 aea:	61 f4       	brne	.+24     	; 0xb04 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 aec:	9f b7       	in	r25, 0x3f	; 63
                cli();
 aee:	f8 94       	cli
		*reg &= ~bit;
 af0:	38 81       	ld	r19, Y
 af2:	82 2f       	mov	r24, r18
 af4:	80 95       	com	r24
 af6:	83 23       	and	r24, r19
 af8:	88 83       	st	Y, r24
		*out |= bit;
 afa:	ec 91       	ld	r30, X
 afc:	2e 2b       	or	r18, r30
 afe:	2c 93       	st	X, r18
		SREG = oldSREG;
 b00:	9f bf       	out	0x3f, r25	; 63
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 b04:	8f b7       	in	r24, 0x3f	; 63
                cli();
 b06:	f8 94       	cli
		*reg |= bit;
 b08:	e8 81       	ld	r30, Y
 b0a:	2e 2b       	or	r18, r30
 b0c:	28 83       	st	Y, r18
		SREG = oldSREG;
 b0e:	8f bf       	out	0x3f, r24	; 63
	}
}
 b10:	df 91       	pop	r29
 b12:	cf 91       	pop	r28
 b14:	08 95       	ret

00000b16 <__udivmodqi4>:
 b16:	99 1b       	sub	r25, r25
 b18:	79 e0       	ldi	r23, 0x09	; 9
 b1a:	04 c0       	rjmp	.+8      	; 0xb24 <__udivmodqi4_ep>

00000b1c <__udivmodqi4_loop>:
 b1c:	99 1f       	adc	r25, r25
 b1e:	96 17       	cp	r25, r22
 b20:	08 f0       	brcs	.+2      	; 0xb24 <__udivmodqi4_ep>
 b22:	96 1b       	sub	r25, r22

00000b24 <__udivmodqi4_ep>:
 b24:	88 1f       	adc	r24, r24
 b26:	7a 95       	dec	r23
 b28:	c9 f7       	brne	.-14     	; 0xb1c <__udivmodqi4_loop>
 b2a:	80 95       	com	r24
 b2c:	08 95       	ret

00000b2e <__tablejump2__>:
 b2e:	ee 0f       	add	r30, r30
 b30:	ff 1f       	adc	r31, r31
 b32:	05 90       	lpm	r0, Z+
 b34:	f4 91       	lpm	r31, Z
 b36:	e0 2d       	mov	r30, r0
 b38:	09 94       	ijmp

00000b3a <memcpy_P>:
 b3a:	fb 01       	movw	r30, r22
 b3c:	dc 01       	movw	r26, r24
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <memcpy_P+0xa>
 b40:	05 90       	lpm	r0, Z+
 b42:	0d 92       	st	X+, r0
 b44:	41 50       	subi	r20, 0x01	; 1
 b46:	50 40       	sbci	r21, 0x00	; 0
 b48:	d8 f7       	brcc	.-10     	; 0xb40 <memcpy_P+0x6>
 b4a:	08 95       	ret

00000b4c <__do_global_dtors>:
 b4c:	11 e0       	ldi	r17, 0x01	; 1
 b4e:	cc e0       	ldi	r28, 0x0C	; 12
 b50:	d1 e0       	ldi	r29, 0x01	; 1
 b52:	04 c0       	rjmp	.+8      	; 0xb5c <__do_global_dtors+0x10>
 b54:	fe 01       	movw	r30, r28
 b56:	0e 94 97 05 	call	0xb2e	; 0xb2e <__tablejump2__>
 b5a:	21 96       	adiw	r28, 0x01	; 1
 b5c:	cd 30       	cpi	r28, 0x0D	; 13
 b5e:	d1 07       	cpc	r29, r17
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__do_global_dtors+0x8>
 b62:	f8 94       	cli

00000b64 <__stop_program>:
 b64:	ff cf       	rjmp	.-2      	; 0xb64 <__stop_program>
=======
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	fc 01       	movw	r30, r24
 a68:	e7 52       	subi	r30, 0x27	; 39
 a6a:	fe 4f       	sbci	r31, 0xFE	; 254
 a6c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a6e:	fc 01       	movw	r30, r24
 a70:	e3 51       	subi	r30, 0x13	; 19
 a72:	fe 4f       	sbci	r31, 0xFE	; 254
 a74:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a76:	88 23       	and	r24, r24
 a78:	61 f1       	breq	.+88     	; 0xad2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	88 0f       	add	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	fc 01       	movw	r30, r24
 a82:	e5 5f       	subi	r30, 0xF5	; 245
 a84:	fd 4f       	sbci	r31, 0xFD	; 253
 a86:	c5 91       	lpm	r28, Z+
 a88:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a8a:	fc 01       	movw	r30, r24
 a8c:	ef 5f       	subi	r30, 0xFF	; 255
 a8e:	fd 4f       	sbci	r31, 0xFD	; 253
 a90:	a5 91       	lpm	r26, Z+
 a92:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a94:	61 11       	cpse	r22, r1
 a96:	09 c0       	rjmp	.+18     	; 0xaaa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a98:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a9a:	f8 94       	cli
		*reg &= ~bit;
 a9c:	88 81       	ld	r24, Y
 a9e:	20 95       	com	r18
 aa0:	82 23       	and	r24, r18
 aa2:	88 83       	st	Y, r24
		*out &= ~bit;
 aa4:	ec 91       	ld	r30, X
 aa6:	2e 23       	and	r18, r30
 aa8:	0b c0       	rjmp	.+22     	; 0xac0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 aaa:	62 30       	cpi	r22, 0x02	; 2
 aac:	61 f4       	brne	.+24     	; 0xac6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 aae:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ab0:	f8 94       	cli
		*reg &= ~bit;
 ab2:	88 81       	ld	r24, Y
 ab4:	32 2f       	mov	r19, r18
 ab6:	30 95       	com	r19
 ab8:	83 23       	and	r24, r19
 aba:	88 83       	st	Y, r24
		*out |= bit;
 abc:	ec 91       	ld	r30, X
 abe:	2e 2b       	or	r18, r30
 ac0:	2c 93       	st	X, r18
		SREG = oldSREG;
 ac2:	9f bf       	out	0x3f, r25	; 63
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 ac6:	8f b7       	in	r24, 0x3f	; 63
                cli();
 ac8:	f8 94       	cli
		*reg |= bit;
 aca:	e8 81       	ld	r30, Y
 acc:	2e 2b       	or	r18, r30
 ace:	28 83       	st	Y, r18
		SREG = oldSREG;
 ad0:	8f bf       	out	0x3f, r24	; 63
	}
}
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	08 95       	ret

00000ad8 <__udivmodqi4>:
 ad8:	99 1b       	sub	r25, r25
 ada:	79 e0       	ldi	r23, 0x09	; 9
 adc:	04 c0       	rjmp	.+8      	; 0xae6 <__udivmodqi4_ep>

00000ade <__udivmodqi4_loop>:
 ade:	99 1f       	adc	r25, r25
 ae0:	96 17       	cp	r25, r22
 ae2:	08 f0       	brcs	.+2      	; 0xae6 <__udivmodqi4_ep>
 ae4:	96 1b       	sub	r25, r22

00000ae6 <__udivmodqi4_ep>:
 ae6:	88 1f       	adc	r24, r24
 ae8:	7a 95       	dec	r23
 aea:	c9 f7       	brne	.-14     	; 0xade <__udivmodqi4_loop>
 aec:	80 95       	com	r24
 aee:	08 95       	ret

00000af0 <__tablejump2__>:
 af0:	ee 0f       	add	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	05 90       	lpm	r0, Z+
 af6:	f4 91       	lpm	r31, Z
 af8:	e0 2d       	mov	r30, r0
 afa:	09 94       	ijmp

00000afc <memcpy_P>:
 afc:	fb 01       	movw	r30, r22
 afe:	dc 01       	movw	r26, r24
 b00:	02 c0       	rjmp	.+4      	; 0xb06 <memcpy_P+0xa>
 b02:	05 90       	lpm	r0, Z+
 b04:	0d 92       	st	X+, r0
 b06:	41 50       	subi	r20, 0x01	; 1
 b08:	50 40       	sbci	r21, 0x00	; 0
 b0a:	d8 f7       	brcc	.-10     	; 0xb02 <memcpy_P+0x6>
 b0c:	08 95       	ret

00000b0e <__do_global_dtors>:
 b0e:	11 e0       	ldi	r17, 0x01	; 1
 b10:	cc e0       	ldi	r28, 0x0C	; 12
 b12:	d1 e0       	ldi	r29, 0x01	; 1
 b14:	04 c0       	rjmp	.+8      	; 0xb1e <__do_global_dtors+0x10>
 b16:	fe 01       	movw	r30, r28
 b18:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__tablejump2__>
 b1c:	21 96       	adiw	r28, 0x01	; 1
 b1e:	cd 30       	cpi	r28, 0x0D	; 13
 b20:	d1 07       	cpc	r29, r17
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__do_global_dtors+0x8>
 b24:	f8 94       	cli

00000b26 <__stop_program>:
 b26:	ff cf       	rjmp	.-2      	; 0xb26 <__stop_program>
>>>>>>> Stashed changes
