
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000836  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  00800100  00800100  000008aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006945  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000124f  00000000  00000000  000074f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001882  00000000  00000000  00008740  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f0  00000000  00000000  00009fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020c4  00000000  00000000  0000a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000339a  00000000  00000000  0000c778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000fb12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__dtors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_16>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000068 <_ZN5Clock17ClockMinutesTableE>:
  68:	00 00 00 00 00 01 00 03 0a 00 01 00 04 0a 00 01     ................
  78:	00 08 0a 00 01 01 04 0b 0c 01 01 03 0b 0c 01 01     ................
  88:	0c 00 00 01 01 03 0a 0c 01 01 04 0a 0c 01 01 08     ................
  98:	0b 00 01 01 04 0b 00 01 01 03 0b 00 00 00 00 00     ................
  a8:	00 01 00 03 0a 00 01 00 04 0a 00 01 01 08 00 00     ................
  b8:	01 01 04 0b 0c 01 01 03 0b 0c 01 01 0c 00 00 01     ................
  c8:	01 03 0a 0c 01 01 04 0a 0c 01 01 09 00 00 01 01     ................
  d8:	04 0b 00 01 01 03 0b 00 00 00 00 00 00 01 00 03     ................
  e8:	0a 00 01 00 04 0a 00 01 00 08 0a 00 01 00 05 0a     ................
  f8:	00 01 01 03 0b 0c 01 01 0c 00 00 01 01 03 0a 0c     ................
 108:	01 01 05 0b 00 01 01 08 0b 00 01 01 04 0b 00 01     ................
 118:	01 03 0b 00 00 00 00 00 00 01 00 03 0a 00 01 00     ................
 128:	04 0a 00 01 01 08 00 00 01 00 05 0a 00 01 01 03     ................
 138:	0b 0c 01 01 0c 00 00 01 01 03 0a 0c 01 01 05 0b     ................
 148:	00 01 01 09 00 00 01 01 04 0b 00 01 01 03 0b 00     ................

00000158 <_ZN5Clock15ClockHoursTableE>:
 158:	0d 1a 0f 1a 0e 1a 12 1a 16 1a 13 1a 19 1a 11 1a     ................
 168:	17 1a 15 1a 18 1a 14 1a 0d 00 10 00 0e 00 12 00     ................
 178:	16 00 13 00 19 00 11 00 17 00 15 00 18 00 14 00     ................

00000188 <_ZN7Display21WordIlluminationTableE>:
 188:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
 198:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
 1a8:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
 1b8:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
 1c8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
 1d8:	03                                                  .

000001d9 <digital_pin_to_bit_mask_PGM>:
 1d9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 1e9:	04 08 10 20                                         ... 

000001ed <digital_pin_to_port_PGM>:
 1ed:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
 1fd:	03 03 03 03                                         ....

00000201 <port_to_output_PGM>:
 201:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000020b <port_to_mode_PGM>:
 20b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000216 <__ctors_start>:
 216:	33 01       	movw	r6, r6

00000218 <__ctors_end>:
 218:	41 01       	movw	r8, r2

0000021a <__dtors_end>:
 21a:	11 24       	eor	r1, r1
 21c:	1f be       	out	0x3f, r1	; 63
 21e:	cf ef       	ldi	r28, 0xFF	; 255
 220:	d8 e0       	ldi	r29, 0x08	; 8
 222:	de bf       	out	0x3e, r29	; 62
 224:	cd bf       	out	0x3d, r28	; 61

00000226 <__do_clear_bss>:
 226:	22 e0       	ldi	r18, 0x02	; 2
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a5 36       	cpi	r26, 0x65	; 101
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>

00000236 <__do_global_ctors>:
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	cc e0       	ldi	r28, 0x0C	; 12
 23a:	d1 e0       	ldi	r29, 0x01	; 1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__do_global_ctors+0x10>
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	fe 01       	movw	r30, r28
 242:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__tablejump2__>
 246:	cb 30       	cpi	r28, 0x0B	; 11
 248:	d1 07       	cpc	r29, r17
 24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
 24c:	0e 94 23 03 	call	0x646	; 0x646 <main>
 250:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__do_global_dtors>

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000258 <setup>:
//		flag = 1;
  //} else {
//		flag = 0;
  //}
  //wcAnimation.setChar(0,0, 'T', ANIMATION_FONT_4X6);
  wcClock.show(17,30);
 258:	4e e1       	ldi	r20, 0x1E	; 30
 25a:	61 e1       	ldi	r22, 0x11	; 17
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_ZN5Clock4showEhh>

00000264 <loop>:
}

void loop() {
 264:	08 95       	ret

00000266 <_GLOBAL__sub_I_flag>:
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 266:	24 e1       	ldi	r18, 0x14	; 20
 268:	44 e1       	ldi	r20, 0x14	; 20
 26a:	64 e1       	ldi	r22, 0x14	; 20
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN7DisplayC1Ehhh>
Clock wcClock(&WordClockDisplay, CLOCK_MODE_WESSI);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	71 e0       	ldi	r23, 0x01	; 1
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0c 94 49 01 	jmp	0x292	; 0x292 <_ZN5ClockC1EP7Display14ClockModesType>

00000282 <_GLOBAL__sub_D_flag>:
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN5ClockD1Ev>
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_ZN7DisplayD1Ev>

00000292 <_ZN5ClockC1EP7Display14ClockModesType>:
 *
 *  \return         -
******************************************************************************************************************************************************/
Clock::Clock(Display* Display, ClockModesType sMode)
{
	if(Display != NULL) {
 292:	61 15       	cp	r22, r1
 294:	71 05       	cpc	r23, r1
 296:	19 f0       	breq	.+6      	; 0x29e <_ZN5ClockC1EP7Display14ClockModesType+0xc>
		pDisplay = Display;
 298:	fc 01       	movw	r30, r24
 29a:	71 83       	std	Z+1, r23	; 0x01
 29c:	60 83       	st	Z, r22
	}
	Mode = sMode;
 29e:	fc 01       	movw	r30, r24
 2a0:	42 83       	std	Z+2, r20	; 0x02
 2a2:	08 95       	ret

000002a4 <_ZN5ClockD1Ev>:


/******************************************************************************************************************************************************
  DESTRUCTOR OF Clock
******************************************************************************************************************************************************/
Clock::~Clock()
 2a4:	08 95       	ret

000002a6 <_ZN5Clock13getClockWordsEhhP14ClockWordsType>:
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Clock::getClockWords(byte Hour, byte Minute, ClockWordsType* ClockWords)
{
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	2a 97       	sbiw	r28, 0x0a	; 10
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	fc 01       	movw	r30, r24
 2c4:	f6 2e       	mov	r15, r22
 2c6:	89 01       	movw	r16, r18
	stdReturnType ReturnValue = E_NOT_OK;
    MinutesTableEntryType MinutesTableEntry;
    HoursTableEntryType HoursTableEntry;

    /* ----- Implementation ----------------------------------------------- */
    if(Hour < CLOCK_NUMBER_OF_HOURS_PER_DAY && Minute < CLOCK_NUMBER_OF_MINUTES_PER_HOUR) {
 2c8:	27 e1       	ldi	r18, 0x17	; 23
        /* show IT IS permanently or only to full and half hour */
        if (CLOCK_SHOW_IT_IS_PERMANENTLY == STD_ON	||
			Minute < CLOCK_MINUTE_STEP_IN_MINUTES	||
			(Minute >= (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) && Minute < (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) + CLOCK_MINUTE_STEP_IN_MINUTES))
		{
            ClockWords->ShowItIs = true;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
	stdReturnType ReturnValue = E_NOT_OK;
    MinutesTableEntryType MinutesTableEntry;
    HoursTableEntryType HoursTableEntry;

    /* ----- Implementation ----------------------------------------------- */
    if(Hour < CLOCK_NUMBER_OF_HOURS_PER_DAY && Minute < CLOCK_NUMBER_OF_MINUTES_PER_HOUR) {
 2cc:	26 17       	cp	r18, r22
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x2c>
 2d0:	51 c0       	rjmp	.+162    	; 0x374 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0xce>
 2d2:	4c 33       	cpi	r20, 0x3C	; 60
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x32>
 2d6:	4e c0       	rjmp	.+156    	; 0x374 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0xce>
        /* show IT IS permanently or only to full and half hour */
        if (CLOCK_SHOW_IT_IS_PERMANENTLY == STD_ON	||
			Minute < CLOCK_MINUTE_STEP_IN_MINUTES	||
			(Minute >= (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) && Minute < (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) + CLOCK_MINUTE_STEP_IN_MINUTES))
		{
            ClockWords->ShowItIs = true;
 2d8:	d8 01       	movw	r26, r16
 2da:	8c 93       	st	X, r24
    static const ClockHoursType ClockHoursTable[][CLOCK_NUMBER_OF_HOURS];
    static const ClockMinutesType ClockMinutesTable[][CLOCK_NUMBER_OF_MINUTE_STEPS];
    // functions
    inline MinutesTableEntryType getMinutesTableEntry(ClockModesType Mode, byte Minute) {
        MinutesTableEntryType MinutesTableEntry;
        memcpy_P(&MinutesTableEntry, &ClockMinutesTable[Mode][Minute / CLOCK_MINUTE_STEP_IN_MINUTES], sizeof(ClockMinutesType));
 2dc:	95 e0       	ldi	r25, 0x05	; 5
 2de:	e9 2e       	mov	r14, r25
 2e0:	84 2f       	mov	r24, r20
 2e2:	6e 2d       	mov	r22, r14
 2e4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 2e8:	28 2f       	mov	r18, r24
 2ea:	92 81       	ldd	r25, Z+2	; 0x02
 2ec:	bc e3       	ldi	r27, 0x3C	; 60
 2ee:	9b 9f       	mul	r25, r27
 2f0:	c0 01       	movw	r24, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	e2 9e       	mul	r14, r18
 2f6:	80 0d       	add	r24, r0
 2f8:	91 1d       	adc	r25, r1
 2fa:	11 24       	eor	r1, r1
 2fc:	bc 01       	movw	r22, r24
 2fe:	68 59       	subi	r22, 0x98	; 152
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	45 e0       	ldi	r20, 0x05	; 5
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	ce 01       	movw	r24, r28
 308:	06 96       	adiw	r24, 0x06	; 6
 30a:	0e 94 05 04 	call	0x80a	; 0x80a <memcpy_P>
        return MinutesTableEntry;
 30e:	fe 01       	movw	r30, r28
 310:	36 96       	adiw	r30, 0x06	; 6
 312:	de 01       	movw	r26, r28
 314:	11 96       	adiw	r26, 0x01	; 1
 316:	01 90       	ld	r0, Z+
 318:	0d 92       	st	X+, r0
 31a:	ea 94       	dec	r14
 31c:	e1 f7       	brne	.-8      	; 0x316 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x70>
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	9a 81       	ldd	r25, Y+2	; 0x02
 322:	3c 81       	ldd	r19, Y+4	; 0x04
 324:	2d 81       	ldd	r18, Y+5	; 0x05
		}

		MinutesTableEntry = getMinutesTableEntry(Mode, Minute);

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS; Index++) {
            ClockWords->MinuteWords[Index] = MinutesTableEntry.Words[Index];
 326:	4b 81       	ldd	r20, Y+3	; 0x03
 328:	f8 01       	movw	r30, r16
 32a:	43 83       	std	Z+3, r20	; 0x03
 32c:	34 83       	std	Z+4, r19	; 0x04
 32e:	25 83       	std	Z+5, r18	; 0x05
        }

        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;
 330:	fb e0       	ldi	r31, 0x0B	; 11
 332:	ff 15       	cp	r31, r15
 334:	10 f4       	brcc	.+4      	; 0x33a <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x94>
 336:	24 ef       	ldi	r18, 0xF4	; 244
 338:	f2 0e       	add	r15, r18
        Hour += MinutesTableEntry.HourOffset;                             // correct the hour offset from the minutes
 33a:	9f 0d       	add	r25, r15
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;
 33c:	9c 30       	cpi	r25, 0x0C	; 12
 33e:	08 f0       	brcs	.+2      	; 0x342 <_ZN5Clock13getClockWordsEhhP14ClockWordsType+0x9c>
 340:	9c 50       	subi	r25, 0x0C	; 12
    }
    inline HoursTableEntryType getHoursTableEntry(ClockModesType Mode, ClockHourModesType HourMode, byte Hour) {
        HoursTableEntryType HoursTableEntry;
        memcpy_P(&HoursTableEntry, &ClockHoursTable[HourMode][Hour], sizeof(ClockHoursType));
 342:	3c e0       	ldi	r19, 0x0C	; 12
 344:	83 9f       	mul	r24, r19
 346:	b0 01       	movw	r22, r0
 348:	11 24       	eor	r1, r1
 34a:	69 0f       	add	r22, r25
 34c:	71 1d       	adc	r23, r1
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	68 5a       	subi	r22, 0xA8	; 168
 354:	7e 4f       	sbci	r23, 0xFE	; 254
 356:	42 e0       	ldi	r20, 0x02	; 2
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	ce 01       	movw	r24, r28
 35c:	06 96       	adiw	r24, 0x06	; 6
 35e:	0e 94 05 04 	call	0x80a	; 0x80a <memcpy_P>
        return HoursTableEntry;
 362:	9e 81       	ldd	r25, Y+6	; 0x06
 364:	8f 81       	ldd	r24, Y+7	; 0x07

		HoursTableEntry = getHoursTableEntry(Mode, MinutesTableEntry.HourMode, Hour);

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS; Index++) {
            ClockWords->HourWords[Index] = HoursTableEntry.Words[Index];
 366:	d8 01       	movw	r26, r16
 368:	11 96       	adiw	r26, 0x01	; 1
 36a:	9c 93       	st	X, r25
 36c:	11 97       	sbiw	r26, 0x01	; 1
 36e:	12 96       	adiw	r26, 0x02	; 2
 370:	8c 93       	st	X, r24
 372:	80 e0       	ldi	r24, 0x00	; 0
        }
    } else {
        ReturnValue = E_NOT_OK;
    }
	return ReturnValue;
} /* getClockWords */
 374:	2a 96       	adiw	r28, 0x0a	; 10
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	08 95       	ret

0000038e <_ZN5Clock4showEhh>:
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Clock::show(byte Hour, byte Minute)
{
 38e:	af 92       	push	r10
 390:	bf 92       	push	r11
 392:	cf 92       	push	r12
 394:	df 92       	push	r13
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <_ZN5Clock4showEhh+0x14>
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <_ZN5Clock4showEhh+0x16>
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <_ZN5Clock4showEhh+0x18>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	6c 01       	movw	r12, r24
	stdReturnType ReturnValue = E_NOT_OK;
	ClockWordsType ClockWords;

    /* ----- Implementation ----------------------------------------------- */
	ReturnValue = E_OK;
	if(getClockWords(Hour, Minute, &ClockWords) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3ac:	9e 01       	movw	r18, r28
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN5Clock13getClockWordsEhhP14ClockWordsType>
 3b6:	11 e0       	ldi	r17, 0x01	; 1
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	09 f0       	breq	.+2      	; 0x3be <_ZN5Clock4showEhh+0x30>
 3bc:	10 e0       	ldi	r17, 0x00	; 0

	if(ClockWords.ShowItIs) {
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	88 23       	and	r24, r24
 3c2:	a1 f0       	breq	.+40     	; 0x3ec <_ZN5Clock4showEhh+0x5e>
		if(pDisplay->setWord(DISPLAY_WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	f6 01       	movw	r30, r12
 3ca:	80 81       	ld	r24, Z
 3cc:	91 81       	ldd	r25, Z+1	; 0x01
 3ce:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN7Display7setWordE15DisplayWordTypeh>
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <_ZN5Clock4showEhh+0x4a>
 3d6:	11 e0       	ldi	r17, 0x01	; 1
		if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	f6 01       	movw	r30, r12
 3de:	80 81       	ld	r24, Z
 3e0:	91 81       	ldd	r25, Z+1	; 0x01
 3e2:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN7Display7setWordE15DisplayWordTypeh>
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	09 f4       	brne	.+2      	; 0x3ec <_ZN5Clock4showEhh+0x5e>
 3ea:	11 e0       	ldi	r17, 0x01	; 1
 3ec:	5e 01       	movw	r10, r28
 3ee:	f2 e0       	ldi	r31, 0x02	; 2
 3f0:	af 0e       	add	r10, r31
 3f2:	b1 1c       	adc	r11, r1
 3f4:	7e 01       	movw	r14, r28
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	e8 0e       	add	r14, r24
 3fa:	f1 1c       	adc	r15, r1
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
 3fc:	f5 01       	movw	r30, r10
 3fe:	61 91       	ld	r22, Z+
 400:	5f 01       	movw	r10, r30
 402:	66 23       	and	r22, r22
 404:	61 f0       	breq	.+24     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	f6 01       	movw	r30, r12
 40a:	80 81       	ld	r24, Z
 40c:	91 81       	ldd	r25, Z+1	; 0x01
 40e:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN7Display7setWordE15DisplayWordTypeh>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	09 f4       	brne	.+2      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 416:	11 e0       	ldi	r17, 0x01	; 1
	if(ClockWords.ShowItIs) {
		if(pDisplay->setWord(DISPLAY_WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
		if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
 418:	ae 14       	cp	r10, r14
 41a:	bf 04       	cpc	r11, r15
 41c:	79 f7       	brne	.-34     	; 0x3fc <_ZN5Clock4showEhh+0x6e>
 41e:	5e 01       	movw	r10, r28
 420:	f7 e0       	ldi	r31, 0x07	; 7
 422:	af 0e       	add	r10, r31
 424:	b1 1c       	adc	r11, r1
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != DISPLAY_WORD_NONE; Index++) {
 426:	f7 01       	movw	r30, r14
 428:	61 91       	ld	r22, Z+
 42a:	7f 01       	movw	r14, r30
 42c:	66 23       	and	r22, r22
 42e:	61 f0       	breq	.+24     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
        if(pDisplay->setWord(ClockWords.MinuteWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	f6 01       	movw	r30, r12
 434:	80 81       	ld	r24, Z
 436:	91 81       	ldd	r25, Z+1	; 0x01
 438:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN7Display7setWordE15DisplayWordTypeh>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	09 f4       	brne	.+2      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 440:	11 e0       	ldi	r17, 0x01	; 1

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && ClockWords.HourWords[Index] != DISPLAY_WORD_NONE; Index++) {
        if(pDisplay->setWord(ClockWords.HourWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }

    for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && ClockWords.MinuteWords[Index] != DISPLAY_WORD_NONE; Index++) {
 442:	ea 14       	cp	r14, r10
 444:	fb 04       	cpc	r15, r11
 446:	79 f7       	brne	.-34     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
        if(pDisplay->setWord(ClockWords.MinuteWords[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
    }
	return ReturnValue;
} /* show */
 448:	81 2f       	mov	r24, r17
 44a:	26 96       	adiw	r28, 0x06	; 6
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	bf 90       	pop	r11
 466:	af 90       	pop	r10
 468:	08 95       	ret

0000046a <_ZN7DisplayC1Ehhh>:
stdReturnType Display::getPixel(byte Index, boolean* Value)
{
    byte Row = Index / DISPLAY_NUMBER_OF_COLUMNS;
    byte Column = Index % DISPLAY_NUMBER_OF_COLUMNS;

    return getPixel(Row, Column, Value);
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	00 d0       	rcall	.+0      	; 0x476 <_ZN7DisplayC1Ehhh+0xc>
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	7c 01       	movw	r14, r24
 47c:	16 2f       	mov	r17, r22
 47e:	6a e0       	ldi	r22, 0x0A	; 10
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	2a 83       	std	Y+2, r18	; 0x02
 484:	49 83       	std	Y+1, r20	; 0x01
 486:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN6WS2812C1Eh>
 48a:	f7 01       	movw	r30, r14
 48c:	ea 5a       	subi	r30, 0xAA	; 170
 48e:	fe 4f       	sbci	r31, 0xFE	; 254
 490:	10 83       	st	Z, r17
 492:	31 96       	adiw	r30, 0x01	; 1
 494:	49 81       	ldd	r20, Y+1	; 0x01
 496:	40 83       	st	Z, r20
 498:	31 96       	adiw	r30, 0x01	; 1
 49a:	2a 81       	ldd	r18, Y+2	; 0x02
 49c:	20 83       	st	Z, r18
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	08 95       	ret

000004ae <_ZN7DisplayD1Ev>:
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	0c 94 b9 02 	jmp	0x572	; 0x572 <_ZN6WS2812D1Ev>

000004b4 <_ZN7Display21transformToSerpentineEhh>:
 4b4:	40 fd       	sbrc	r20, 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <_ZN7Display21transformToSerpentineEhh+0x8>
 4b8:	86 2f       	mov	r24, r22
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <_ZN7Display21transformToSerpentineEhh+0xc>
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	86 1b       	sub	r24, r22
 4c0:	9b e0       	ldi	r25, 0x0B	; 11
 4c2:	49 9f       	mul	r20, r25
 4c4:	80 0d       	add	r24, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	08 95       	ret

000004ca <_ZN7Display8setPixelEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setPixel(byte Column, byte Row)
{
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
    /* if led stripe is snake or serpentine the odd row: count from right to left */
    return Pixels.setPixel(transformToSerpentine(Column,  Row), Color);
 4d0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN7Display21transformToSerpentineEhh>
 4d4:	fe 01       	movw	r30, r28
 4d6:	ea 5a       	subi	r30, 0xAA	; 170
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	20 81       	ld	r18, Z
 4dc:	31 81       	ldd	r19, Z+1	; 0x01
 4de:	42 81       	ldd	r20, Z+2	; 0x02
 4e0:	68 2f       	mov	r22, r24
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
#else
    return Pixels.setPixel((Row * DISPLAY_NUMBER_OF_COLUMNS) + Column, Color);
#endif
} /* setPixel */
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
******************************************************************************************************************************************************/
stdReturnType Display::setPixel(byte Column, byte Row)
{
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
    /* if led stripe is snake or serpentine the odd row: count from right to left */
    return Pixels.setPixel(transformToSerpentine(Column,  Row), Color);
 4ea:	0c 94 01 03 	jmp	0x602	; 0x602 <_ZN6WS28128setPixelEh15WS2812PixelType>

000004ee <_ZN7Display7setWordE15DisplayWordTypeh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setWord(DisplayWordType Word, byte MaxLength)
{
 4ee:	bf 92       	push	r11
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	00 d0       	rcall	.+0      	; 0x502 <_ZN7Display7setWordE15DisplayWordTypeh+0x14>
 502:	1f 92       	push	r1
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
    stdReturnType ReturnValue = E_NOT_OK;
	DisplayWordIlluminationType WordIllu;
	byte Length;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
 508:	6b 31       	cpi	r22, 0x1B	; 27
 50a:	20 f5       	brcc	.+72     	; 0x554 <_ZN7Display7setWordE15DisplayWordTypeh+0x66>
 50c:	14 2f       	mov	r17, r20
 50e:	7c 01       	movw	r14, r24
	inline char getCharacterFast(byte Column, byte Row) { return pgm_read_byte(&DisplayCharacters[Row][Column]); }
	inline char getCharacterFast(byte Index) { return pgm_read_byte(&DisplayCharacters[Index / DISPLAY_NUMBER_OF_COLUMNS][Index % DISPLAY_NUMBER_OF_COLUMNS]); }

    // word methods
	stdReturnType getWordIllumination(DisplayWordType, DisplayWordIlluminationType*);
	inline DisplayWordIlluminationType getWordIlluminationFast(DisplayWordType Word) { DisplayWordIlluminationType WordIllu; memcpy_P(&WordIllu, &WordIlluminationTable[Word], sizeof(WordIllu)); return WordIllu; }
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	cb 01       	movw	r24, r22
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	68 0f       	add	r22, r24
 51a:	79 1f       	adc	r23, r25
 51c:	68 57       	subi	r22, 0x78	; 120
 51e:	7e 4f       	sbci	r23, 0xFE	; 254
 520:	43 e0       	ldi	r20, 0x03	; 3
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	ce 01       	movw	r24, r28
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	0e 94 05 04 	call	0x80a	; 0x80a <memcpy_P>
 52c:	c9 80       	ldd	r12, Y+1	; 0x01
 52e:	ba 80       	ldd	r11, Y+2	; 0x02
 530:	db 80       	ldd	r13, Y+3	; 0x03
		ReturnValue = E_OK;
		WordIllu = getWordIlluminationFast(Word);

		if(MaxLength == DISPLAY_WORD_LENGTH_UNLIMITED) Length = WordIllu.Length;
 532:	11 11       	cpse	r17, r1
 534:	d1 2e       	mov	r13, r17
		else Length = MaxLength;

        for(byte Index = 0; Index < Length; Index++) {
 536:	10 e0       	ldi	r17, 0x00	; 0
    stdReturnType ReturnValue = E_NOT_OK;
	DisplayWordIlluminationType WordIllu;
	byte Length;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
		ReturnValue = E_OK;
 538:	00 e0       	ldi	r16, 0x00	; 0
		WordIllu = getWordIlluminationFast(Word);

		if(MaxLength == DISPLAY_WORD_LENGTH_UNLIMITED) Length = WordIllu.Length;
		else Length = MaxLength;

        for(byte Index = 0; Index < Length; Index++) {
 53a:	1d 15       	cp	r17, r13
 53c:	61 f0       	breq	.+24     	; 0x556 <_ZN7Display7setWordE15DisplayWordTypeh+0x68>
			if(setPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
 53e:	4c 2d       	mov	r20, r12
 540:	61 2f       	mov	r22, r17
 542:	6b 0d       	add	r22, r11
 544:	c7 01       	movw	r24, r14
 546:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN7Display8setPixelEhh>
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	09 f4       	brne	.+2      	; 0x550 <_ZN7Display7setWordE15DisplayWordTypeh+0x62>
 54e:	01 e0       	ldi	r16, 0x01	; 1
		WordIllu = getWordIlluminationFast(Word);

		if(MaxLength == DISPLAY_WORD_LENGTH_UNLIMITED) Length = WordIllu.Length;
		else Length = MaxLength;

        for(byte Index = 0; Index < Length; Index++) {
 550:	1f 5f       	subi	r17, 0xFF	; 255
 552:	f3 cf       	rjmp	.-26     	; 0x53a <_ZN7Display7setWordE15DisplayWordTypeh+0x4c>
			if(setPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
		}
    } else {
        ReturnValue = E_NOT_OK;
 554:	01 e0       	ldi	r16, 0x01	; 1
    }
    return ReturnValue;
} /* setWord */
 556:	80 2f       	mov	r24, r16
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	df 90       	pop	r13
 56c:	cf 90       	pop	r12
 56e:	bf 90       	pop	r11
 570:	08 95       	ret

00000572 <_ZN6WS2812D1Ev>:
        dimmColor(&Pixel.Blue, Pixels[WS2812_POS_ABS_BLUE(Index)]);
    } else {
        return getPixelFast(Index);
    }
	return Pixel;
} /* getPixelDimmed */
 572:	08 95       	ret

00000574 <_ZN6WS28126setPinEh>:
 574:	dc 01       	movw	r26, r24
 576:	64 31       	cpi	r22, 0x14	; 20
 578:	e0 f4       	brcc	.+56     	; 0x5b2 <_ZN6WS28126setPinEh+0x3e>
 57a:	86 2f       	mov	r24, r22
 57c:	26 2f       	mov	r18, r22
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	f9 01       	movw	r30, r18
 582:	e7 52       	subi	r30, 0x27	; 39
 584:	fe 4f       	sbci	r31, 0xFE	; 254
 586:	e4 91       	lpm	r30, Z
 588:	ec 93       	st	X, r30
 58a:	f9 01       	movw	r30, r18
 58c:	e3 51       	subi	r30, 0x13	; 19
 58e:	fe 4f       	sbci	r31, 0xFE	; 254
 590:	e4 91       	lpm	r30, Z
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	ee 0f       	add	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	ef 5f       	subi	r30, 0xFF	; 255
 59a:	fd 4f       	sbci	r31, 0xFD	; 253
 59c:	25 91       	lpm	r18, Z+
 59e:	34 91       	lpm	r19, Z
 5a0:	12 96       	adiw	r26, 0x02	; 2
 5a2:	3c 93       	st	X, r19
 5a4:	2e 93       	st	-X, r18
 5a6:	11 97       	sbiw	r26, 0x01	; 1
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	08 95       	ret
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	08 95       	ret

000005b6 <_ZN6WS2812C1Eh>:
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	ec 01       	movw	r28, r24
 5bc:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN6WS28126setPinEh>
 5c0:	fe 01       	movw	r30, r28
 5c2:	e3 5b       	subi	r30, 0xB3	; 179
 5c4:	fe 4f       	sbci	r31, 0xFE	; 254
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	80 83       	st	Z, r24
 5ca:	31 96       	adiw	r30, 0x01	; 1
 5cc:	10 82       	st	Z, r1
 5ce:	11 82       	std	Z+1, r1	; 0x01
 5d0:	12 82       	std	Z+2, r1	; 0x02
 5d2:	13 82       	std	Z+3, r1	; 0x03
 5d4:	eb 54       	subi	r30, 0x4B	; 75
 5d6:	f1 40       	sbci	r31, 0x01	; 1
 5d8:	8a e4       	ldi	r24, 0x4A	; 74
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	df 01       	movw	r26, r30
 5de:	9c 01       	movw	r18, r24
 5e0:	1d 92       	st	X+, r1
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	30 40       	sbci	r19, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <_ZN6WS2812C1Eh+0x2a>
 5e8:	ef 5a       	subi	r30, 0xAF	; 175
 5ea:	fe 4f       	sbci	r31, 0xFE	; 254
 5ec:	10 82       	st	Z, r1
 5ee:	32 97       	sbiw	r30, 0x02	; 2
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 83       	st	Z, r24
 5f4:	cd 5a       	subi	r28, 0xAD	; 173
 5f6:	de 4f       	sbci	r29, 0xFE	; 254
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	88 83       	st	Y, r24
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <_ZN6WS28128setPixelEh15WS2812PixelType>:
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
stdReturnType WS2812::setPixel(byte Index, WS2812PixelType Pixel)
{
    if(Index < WS2812_NUMBER_OF_LEDS) {
 602:	6e 36       	cpi	r22, 0x6E	; 110
 604:	e8 f4       	brcc	.+58     	; 0x640 <_ZN6WS28128setPixelEh15WS2812PixelType+0x3e>
        Pixels[WS2812_POS_ABS_RED(Index)] = Pixel.Red;
 606:	fc 01       	movw	r30, r24
 608:	ee 5a       	subi	r30, 0xAE	; 174
 60a:	fe 4f       	sbci	r31, 0xFE	; 254
 60c:	50 81       	ld	r21, Z
 60e:	fc 01       	movw	r30, r24
 610:	e6 0f       	add	r30, r22
 612:	f1 1d       	adc	r31, r1
 614:	bf 01       	movw	r22, r30
 616:	e5 0f       	add	r30, r21
 618:	f1 1d       	adc	r31, r1
 61a:	23 83       	std	Z+3, r18	; 0x03
        Pixels[WS2812_POS_ABS_GREEN(Index)] = Pixel.Green;
 61c:	fc 01       	movw	r30, r24
 61e:	ed 5a       	subi	r30, 0xAD	; 173
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	20 81       	ld	r18, Z
 624:	fb 01       	movw	r30, r22
 626:	e2 0f       	add	r30, r18
 628:	f1 1d       	adc	r31, r1
 62a:	33 83       	std	Z+3, r19	; 0x03
        Pixels[WS2812_POS_ABS_BLUE(Index)] = Pixel.Blue;
 62c:	fc 01       	movw	r30, r24
 62e:	ec 5a       	subi	r30, 0xAC	; 172
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	80 81       	ld	r24, Z
 634:	fb 01       	movw	r30, r22
 636:	e8 0f       	add	r30, r24
 638:	f1 1d       	adc	r31, r1
 63a:	43 83       	std	Z+3, r20	; 0x03
        return E_OK;
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	08 95       	ret
    } else {
        return E_NOT_OK;
 640:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* setPixel */
 642:	08 95       	ret

00000644 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 644:	08 95       	ret

00000646 <main>:

int main(void)
{
	init();
 646:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init>

	initVariant();
 64a:	0e 94 22 03 	call	0x644	; 0x644 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 64e:	0e 94 2c 01 	call	0x258	; 0x258 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 656:	0e 94 32 01 	call	0x264	; 0x264 <loop>
		if (serialEventRun) serialEventRun();
 65a:	20 97       	sbiw	r28, 0x00	; 0
 65c:	e1 f3       	breq	.-8      	; 0x656 <main+0x10>
 65e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 662:	f9 cf       	rjmp	.-14     	; 0x656 <main+0x10>

00000664 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	8f 93       	push	r24
 674:	9f 93       	push	r25
 676:	af 93       	push	r26
 678:	bf 93       	push	r27
 67a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis>
 67e:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x1>
 682:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <timer0_millis+0x2>
 686:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <timer0_millis+0x3>
 68a:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <timer0_fract>
 68e:	23 e0       	ldi	r18, 0x03	; 3
 690:	23 0f       	add	r18, r19
 692:	2d 37       	cpi	r18, 0x7D	; 125
 694:	20 f4       	brcc	.+8      	; 0x69e <__vector_16+0x3a>
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	a1 1d       	adc	r26, r1
 69a:	b1 1d       	adc	r27, r1
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <__vector_16+0x44>
 69e:	26 e8       	ldi	r18, 0x86	; 134
 6a0:	23 0f       	add	r18, r19
 6a2:	02 96       	adiw	r24, 0x02	; 2
 6a4:	a1 1d       	adc	r26, r1
 6a6:	b1 1d       	adc	r27, r1
 6a8:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <timer0_fract>
 6ac:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timer0_millis>
 6b0:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <timer0_millis+0x1>
 6b4:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <timer0_millis+0x2>
 6b8:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <timer0_millis+0x3>
 6bc:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 6c0:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 6c4:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 6c8:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	a1 1d       	adc	r26, r1
 6d0:	b1 1d       	adc	r27, r1
 6d2:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer0_overflow_count>
 6d6:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer0_overflow_count+0x1>
 6da:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer0_overflow_count+0x2>
 6de:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer0_overflow_count+0x3>
 6e2:	bf 91       	pop	r27
 6e4:	af 91       	pop	r26
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	3f 91       	pop	r19
 6ec:	2f 91       	pop	r18
 6ee:	0f 90       	pop	r0
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	0f 90       	pop	r0
 6f4:	1f 90       	pop	r1
 6f6:	18 95       	reti

000006f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 6fa:	84 b5       	in	r24, 0x24	; 36
 6fc:	82 60       	ori	r24, 0x02	; 2
 6fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 700:	84 b5       	in	r24, 0x24	; 36
 702:	81 60       	ori	r24, 0x01	; 1
 704:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 706:	85 b5       	in	r24, 0x25	; 37
 708:	82 60       	ori	r24, 0x02	; 2
 70a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 70c:	85 b5       	in	r24, 0x25	; 37
 70e:	81 60       	ori	r24, 0x01	; 1
 710:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 712:	ee e6       	ldi	r30, 0x6E	; 110
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	81 60       	ori	r24, 0x01	; 1
 71a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 71c:	e1 e8       	ldi	r30, 0x81	; 129
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 722:	80 81       	ld	r24, Z
 724:	82 60       	ori	r24, 0x02	; 2
 726:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 728:	80 81       	ld	r24, Z
 72a:	81 60       	ori	r24, 0x01	; 1
 72c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 72e:	e0 e8       	ldi	r30, 0x80	; 128
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	81 60       	ori	r24, 0x01	; 1
 736:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 738:	e1 eb       	ldi	r30, 0xB1	; 177
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	84 60       	ori	r24, 0x04	; 4
 740:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 742:	e0 eb       	ldi	r30, 0xB0	; 176
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	81 60       	ori	r24, 0x01	; 1
 74a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 74c:	ea e7       	ldi	r30, 0x7A	; 122
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	84 60       	ori	r24, 0x04	; 4
 754:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 756:	80 81       	ld	r24, Z
 758:	82 60       	ori	r24, 0x02	; 2
 75a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 75c:	80 81       	ld	r24, Z
 75e:	81 60       	ori	r24, 0x01	; 1
 760:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 762:	80 81       	ld	r24, Z
 764:	80 68       	ori	r24, 0x80	; 128
 766:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 768:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 76c:	08 95       	ret

0000076e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	fc 01       	movw	r30, r24
 776:	e7 52       	subi	r30, 0x27	; 39
 778:	fe 4f       	sbci	r31, 0xFE	; 254
 77a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 77c:	fc 01       	movw	r30, r24
 77e:	e3 51       	subi	r30, 0x13	; 19
 780:	fe 4f       	sbci	r31, 0xFE	; 254
 782:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 784:	88 23       	and	r24, r24
 786:	61 f1       	breq	.+88     	; 0x7e0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	fc 01       	movw	r30, r24
 790:	e5 5f       	subi	r30, 0xF5	; 245
 792:	fd 4f       	sbci	r31, 0xFD	; 253
 794:	c5 91       	lpm	r28, Z+
 796:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 798:	fc 01       	movw	r30, r24
 79a:	ef 5f       	subi	r30, 0xFF	; 255
 79c:	fd 4f       	sbci	r31, 0xFD	; 253
 79e:	a5 91       	lpm	r26, Z+
 7a0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 7a2:	61 11       	cpse	r22, r1
 7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 7a6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 7a8:	f8 94       	cli
		*reg &= ~bit;
 7aa:	88 81       	ld	r24, Y
 7ac:	20 95       	com	r18
 7ae:	82 23       	and	r24, r18
 7b0:	88 83       	st	Y, r24
		*out &= ~bit;
 7b2:	ec 91       	ld	r30, X
 7b4:	2e 23       	and	r18, r30
 7b6:	0b c0       	rjmp	.+22     	; 0x7ce <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 7b8:	62 30       	cpi	r22, 0x02	; 2
 7ba:	61 f4       	brne	.+24     	; 0x7d4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 7bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
 7be:	f8 94       	cli
		*reg &= ~bit;
 7c0:	38 81       	ld	r19, Y
 7c2:	82 2f       	mov	r24, r18
 7c4:	80 95       	com	r24
 7c6:	83 23       	and	r24, r19
 7c8:	88 83       	st	Y, r24
		*out |= bit;
 7ca:	ec 91       	ld	r30, X
 7cc:	2e 2b       	or	r18, r30
 7ce:	2c 93       	st	X, r18
		SREG = oldSREG;
 7d0:	9f bf       	out	0x3f, r25	; 63
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 7d4:	8f b7       	in	r24, 0x3f	; 63
                cli();
 7d6:	f8 94       	cli
		*reg |= bit;
 7d8:	e8 81       	ld	r30, Y
 7da:	2e 2b       	or	r18, r30
 7dc:	28 83       	st	Y, r18
		SREG = oldSREG;
 7de:	8f bf       	out	0x3f, r24	; 63
	}
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <__udivmodqi4>:
 7e6:	99 1b       	sub	r25, r25
 7e8:	79 e0       	ldi	r23, 0x09	; 9
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__udivmodqi4_ep>

000007ec <__udivmodqi4_loop>:
 7ec:	99 1f       	adc	r25, r25
 7ee:	96 17       	cp	r25, r22
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__udivmodqi4_ep>
 7f2:	96 1b       	sub	r25, r22

000007f4 <__udivmodqi4_ep>:
 7f4:	88 1f       	adc	r24, r24
 7f6:	7a 95       	dec	r23
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__udivmodqi4_loop>
 7fa:	80 95       	com	r24
 7fc:	08 95       	ret

000007fe <__tablejump2__>:
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	05 90       	lpm	r0, Z+
 804:	f4 91       	lpm	r31, Z
 806:	e0 2d       	mov	r30, r0
 808:	09 94       	ijmp

0000080a <memcpy_P>:
 80a:	fb 01       	movw	r30, r22
 80c:	dc 01       	movw	r26, r24
 80e:	02 c0       	rjmp	.+4      	; 0x814 <memcpy_P+0xa>
 810:	05 90       	lpm	r0, Z+
 812:	0d 92       	st	X+, r0
 814:	41 50       	subi	r20, 0x01	; 1
 816:	50 40       	sbci	r21, 0x00	; 0
 818:	d8 f7       	brcc	.-10     	; 0x810 <memcpy_P+0x6>
 81a:	08 95       	ret

0000081c <__do_global_dtors>:
 81c:	11 e0       	ldi	r17, 0x01	; 1
 81e:	cc e0       	ldi	r28, 0x0C	; 12
 820:	d1 e0       	ldi	r29, 0x01	; 1
 822:	04 c0       	rjmp	.+8      	; 0x82c <__do_global_dtors+0x10>
 824:	fe 01       	movw	r30, r28
 826:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__tablejump2__>
 82a:	21 96       	adiw	r28, 0x01	; 1
 82c:	cd 30       	cpi	r28, 0x0D	; 13
 82e:	d1 07       	cpc	r29, r17
 830:	c9 f7       	brne	.-14     	; 0x824 <__do_global_dtors+0x8>
 832:	f8 94       	cli

00000834 <__stop_program>:
 834:	ff cf       	rjmp	.-2      	; 0x834 <__stop_program>
