
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016a  00800100  00800100  0000082c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ada  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001472  00000000  00000000  000075d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ea  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  0000a234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fac  00000000  00000000  0000a850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002860  00000000  00000000  0000c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000f05c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__dtors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_16>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000068 <_ZN5Clock17ClockMinutesTableE>:
  68:	00 00 00 00 00 01 00 03 0a 00 01 00 04 0a 00 01     ................
  78:	00 08 0a 00 01 01 04 0b 0c 01 01 03 0b 0c 01 01     ................
  88:	0c 00 00 01 01 03 0a 0c 01 01 04 0a 0c 01 01 08     ................
  98:	0b 00 01 01 04 0b 00 01 01 03 0b 00 00 00 00 00     ................
  a8:	00 01 00 03 0a 00 01 00 04 0a 00 01 01 08 00 00     ................
  b8:	01 01 04 0b 0c 01 01 03 0b 0c 01 01 0c 00 00 01     ................
  c8:	01 03 0a 0c 01 01 04 0a 0c 01 01 09 00 00 01 01     ................
  d8:	04 0b 00 01 01 03 0b 00 00 00 00 00 00 01 00 03     ................
  e8:	0a 00 01 00 04 0a 00 01 00 08 0a 00 01 00 05 0a     ................
  f8:	00 01 01 03 0b 0c 01 01 0c 00 00 01 01 03 0a 0c     ................
 108:	01 01 05 0b 00 01 01 08 0b 00 01 01 04 0b 00 01     ................
 118:	01 03 0b 00 00 00 00 00 00 01 00 03 0a 00 01 00     ................
 128:	04 0a 00 01 01 08 00 00 01 00 05 0a 00 01 01 03     ................
 138:	0b 0c 01 01 0c 00 00 01 01 03 0a 0c 01 01 05 0b     ................
 148:	00 01 01 09 00 00 01 01 04 0b 00 01 01 03 0b 00     ................

00000158 <_ZN5Clock15ClockHoursTableE>:
 158:	0d 1a 0f 1a 0e 1a 12 1a 16 1a 13 1a 19 1a 11 1a     ................
 168:	17 1a 15 1a 18 1a 14 1a 0d 00 10 00 0e 00 12 00     ................
 178:	16 00 13 00 19 00 11 00 17 00 15 00 18 00 14 00     ................

00000188 <_ZN7Display21WordIlluminationTableE>:
 188:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
 198:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
 1a8:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
 1b8:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
 1c8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
 1d8:	03                                                  .

000001d9 <digital_pin_to_bit_mask_PGM>:
 1d9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 1e9:	04 08 10 20                                         ... 

000001ed <digital_pin_to_port_PGM>:
 1ed:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
 1fd:	03 03 03 03                                         ....

00000201 <port_to_output_PGM>:
 201:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000020b <port_to_mode_PGM>:
 20b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000216 <__ctors_start>:
 216:	33 01       	movw	r6, r6

00000218 <__ctors_end>:
 218:	45 01       	movw	r8, r10

0000021a <__dtors_end>:
 21a:	11 24       	eor	r1, r1
 21c:	1f be       	out	0x3f, r1	; 63
 21e:	cf ef       	ldi	r28, 0xFF	; 255
 220:	d8 e0       	ldi	r29, 0x08	; 8
 222:	de bf       	out	0x3e, r29	; 62
 224:	cd bf       	out	0x3d, r28	; 61

00000226 <__do_clear_bss>:
 226:	22 e0       	ldi	r18, 0x02	; 2
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	aa 36       	cpi	r26, 0x6A	; 106
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>

00000236 <__do_global_ctors>:
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	cc e0       	ldi	r28, 0x0C	; 12
 23a:	d1 e0       	ldi	r29, 0x01	; 1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__do_global_ctors+0x10>
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	fe 01       	movw	r30, r28
 242:	0e 94 c0 03 	call	0x780	; 0x780 <__tablejump2__>
 246:	cb 30       	cpi	r28, 0x0B	; 11
 248:	d1 07       	cpc	r29, r17
 24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
 24c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <main>
 250:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__do_global_dtors>

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000258 <setup>:
//		flag = 1;
  //} else {
//		flag = 0;
  //}
  //wcAnimation.setChar(0,0, 'T', ANIMATION_FONT_4X6);
  wcClock.show(17,30);
 258:	4e e1       	ldi	r20, 0x1E	; 30
 25a:	61 e1       	ldi	r22, 0x11	; 17
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_ZN5Clock4showEhh>

00000264 <loop>:
}

void loop() {
 264:	08 95       	ret

00000266 <_GLOBAL__sub_I_flag>:
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 266:	24 e1       	ldi	r18, 0x14	; 20
 268:	44 e1       	ldi	r20, 0x14	; 20
 26a:	64 e1       	ldi	r22, 0x14	; 20
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7DisplayC1Ehhh>
Clock wcClock(&WordClockDisplay, CLOCK_MODE_WESSI);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	71 e0       	ldi	r23, 0x01	; 1
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN5ClockC1EP7Display14ClockModesType>
//DisplayCharacter WcDisplayCharacter;
Animation wcAnimation;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_ZN9AnimationC1Ev>

0000028a <_GLOBAL__sub_D_flag>:
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN9AnimationD1Ev>
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
Clock wcClock(&WordClockDisplay, CLOCK_MODE_WESSI);
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN5ClockD1Ev>
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN7DisplayD1Ev>

000002a2 <_ZN9AnimationC1Ev>:
/*! \brief          Template Constructor
 *  \details        Instantiation of the Template library
 *
 *  \return         -
******************************************************************************************************************************************************/
Animation::Animation()
 2a2:	08 95       	ret

000002a4 <_ZN9AnimationD1Ev>:


/******************************************************************************************************************************************************
  DESTRUCTOR OF Animation
******************************************************************************************************************************************************/
Animation::~Animation()
 2a4:	08 95       	ret

000002a6 <_ZN5ClockC1EP7Display14ClockModesType>:
 *
 *  \return         -
******************************************************************************************************************************************************/
Clock::Clock(Display* Display, ClockModesType sMode)
{
	if(Display != NULL) {
 2a6:	61 15       	cp	r22, r1
 2a8:	71 05       	cpc	r23, r1
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <_ZN5ClockC1EP7Display14ClockModesType+0xc>
		pDisplay = Display;
 2ac:	fc 01       	movw	r30, r24
 2ae:	71 83       	std	Z+1, r23	; 0x01
 2b0:	60 83       	st	Z, r22
	}
	Mode = sMode;
 2b2:	fc 01       	movw	r30, r24
 2b4:	42 83       	std	Z+2, r20	; 0x02
 2b6:	08 95       	ret

000002b8 <_ZN5ClockD1Ev>:


/******************************************************************************************************************************************************
  DESTRUCTOR OF Clock
******************************************************************************************************************************************************/
Clock::~Clock()
 2b8:	08 95       	ret

000002ba <_ZN5Clock4showEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Clock::show(byte Hour, byte Minute)
{
 2ba:	af 92       	push	r10
 2bc:	bf 92       	push	r11
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	27 97       	sbiw	r28, 0x07	; 7
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	8c 01       	movw	r16, r24
 2de:	d6 2e       	mov	r13, r22
 2e0:	f4 2e       	mov	r15, r20

    //const DisplayWordWordsType HoursTableEntry;


    /* ----- Implementation ----------------------------------------------- */
    if(Hour < 24 && Minute < 60) {
 2e2:	87 e1       	ldi	r24, 0x17	; 23
 2e4:	86 17       	cp	r24, r22
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <_ZN5Clock4showEhh+0x30>
 2e8:	6a c0       	rjmp	.+212    	; 0x3be <_ZN5Clock4showEhh+0x104>
 2ea:	9b e3       	ldi	r25, 0x3B	; 59
 2ec:	94 17       	cp	r25, r20
 2ee:	08 f4       	brcc	.+2      	; 0x2f2 <_ZN5Clock4showEhh+0x38>
 2f0:	66 c0       	rjmp	.+204    	; 0x3be <_ZN5Clock4showEhh+0x104>
        /*  */
        if (CLOCK_SHOW_IT_IS_PERMANENTLY == STD_ON || Minute <= 4 || (Minute >= 30 && Minute <= 34)) {
            pDisplay->setWord(DISPLAY_WORD_ES);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	f8 01       	movw	r30, r16
 2f6:	80 81       	ld	r24, Z
 2f8:	91 81       	ldd	r25, Z+1	; 0x01
 2fa:	0e 94 34 02 	call	0x468	; 0x468 <_ZN7Display7setWordE16DisplayWordsType>
            pDisplay->setWord(DISPLAY_WORD_IST);
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	f8 01       	movw	r30, r16
 302:	80 81       	ld	r24, Z
 304:	91 81       	ldd	r25, Z+1	; 0x01
 306:	0e 94 34 02 	call	0x468	; 0x468 <_ZN7Display7setWordE16DisplayWordsType>
        }

		memcpy_P(&MinutesTableEntry, &ClockMinutesTable[Mode][Minute / CLOCK_MINUTE_STEP_IN_MINUTES], sizeof(ClockMinutesType));
 30a:	25 e0       	ldi	r18, 0x05	; 5
 30c:	8f 2d       	mov	r24, r15
 30e:	62 2f       	mov	r22, r18
 310:	0e 94 b4 03 	call	0x768	; 0x768 <__udivmodqi4>
 314:	f8 01       	movw	r30, r16
 316:	62 81       	ldd	r22, Z+2	; 0x02
 318:	fc e3       	ldi	r31, 0x3C	; 60
 31a:	6f 9f       	mul	r22, r31
 31c:	b0 01       	movw	r22, r0
 31e:	11 24       	eor	r1, r1
 320:	28 9f       	mul	r18, r24
 322:	60 0d       	add	r22, r0
 324:	71 1d       	adc	r23, r1
 326:	11 24       	eor	r1, r1
 328:	68 59       	subi	r22, 0x98	; 152
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	45 e0       	ldi	r20, 0x05	; 5
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	0e 94 c6 03 	call	0x78c	; 0x78c <memcpy_P>
 338:	5e 01       	movw	r10, r28
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	a8 0e       	add	r10, r24
 33e:	b1 1c       	adc	r11, r1
 340:	7e 01       	movw	r14, r28
 342:	96 e0       	ldi	r25, 0x06	; 6
 344:	e9 0e       	add	r14, r25
 346:	f1 1c       	adc	r15, r1

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
 348:	f5 01       	movw	r30, r10
 34a:	61 91       	ld	r22, Z+
 34c:	5f 01       	movw	r10, r30
 34e:	61 11       	cpse	r22, r1
 350:	06 c0       	rjmp	.+12     	; 0x35e <_ZN5Clock4showEhh+0xa4>
            pDisplay->setWord(MinutesTableEntry.Words[Index]);
        }
        
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;
 352:	fb e0       	ldi	r31, 0x0B	; 11
 354:	fd 15       	cp	r31, r13
 356:	60 f4       	brcc	.+24     	; 0x370 <_ZN5Clock4showEhh+0xb6>
 358:	f4 ef       	ldi	r31, 0xF4	; 244
 35a:	df 0e       	add	r13, r31
 35c:	09 c0       	rjmp	.+18     	; 0x370 <_ZN5Clock4showEhh+0xb6>
        }

		memcpy_P(&MinutesTableEntry, &ClockMinutesTable[Mode][Minute / CLOCK_MINUTE_STEP_IN_MINUTES], sizeof(ClockMinutesType));

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
            pDisplay->setWord(MinutesTableEntry.Words[Index]);
 35e:	f8 01       	movw	r30, r16
 360:	80 81       	ld	r24, Z
 362:	91 81       	ldd	r25, Z+1	; 0x01
 364:	0e 94 34 02 	call	0x468	; 0x468 <_ZN7Display7setWordE16DisplayWordsType>
            pDisplay->setWord(DISPLAY_WORD_IST);
        }

		memcpy_P(&MinutesTableEntry, &ClockMinutesTable[Mode][Minute / CLOCK_MINUTE_STEP_IN_MINUTES], sizeof(ClockMinutesType));

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
 368:	ae 14       	cp	r10, r14
 36a:	bf 04       	cpc	r11, r15
 36c:	69 f7       	brne	.-38     	; 0x348 <_ZN5Clock4showEhh+0x8e>
 36e:	f1 cf       	rjmp	.-30     	; 0x352 <_ZN5Clock4showEhh+0x98>
            pDisplay->setWord(MinutesTableEntry.Words[Index]);
        }
        
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;
        Hour += MinutesTableEntry.HourOffset;                             // correct the hour offset from the minutes
 370:	6a 81       	ldd	r22, Y+2	; 0x02
 372:	6d 0d       	add	r22, r13
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;
 374:	6c 30       	cpi	r22, 0x0C	; 12
 376:	08 f0       	brcs	.+2      	; 0x37a <_ZN5Clock4showEhh+0xc0>
 378:	6c 50       	subi	r22, 0x0C	; 12

		memcpy_P(&HoursTableEntry, &ClockHoursTable[MinutesTableEntry.HourMode][Hour], sizeof(DisplayWordsType) * CLOCK_MAX_NUMBER_OF_HOUR_WORDS);
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	9c e0       	ldi	r25, 0x0C	; 12
 380:	89 9f       	mul	r24, r25
 382:	60 0d       	add	r22, r0
 384:	71 1d       	adc	r23, r1
 386:	11 24       	eor	r1, r1
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	68 5a       	subi	r22, 0xA8	; 168
 38e:	7e 4f       	sbci	r23, 0xFE	; 254
 390:	42 e0       	ldi	r20, 0x02	; 2
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	c7 01       	movw	r24, r14
 396:	0e 94 c6 03 	call	0x78c	; 0x78c <memcpy_P>

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && HoursTableEntry[Index] != DISPLAY_WORD_NONE; Index++) {
 39a:	6e 81       	ldd	r22, Y+6	; 0x06
 39c:	66 23       	and	r22, r22
 39e:	69 f0       	breq	.+26     	; 0x3ba <_ZN5Clock4showEhh+0x100>
            pDisplay->setWord(HoursTableEntry[Index]);
 3a0:	f8 01       	movw	r30, r16
 3a2:	80 81       	ld	r24, Z
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	0e 94 34 02 	call	0x468	; 0x468 <_ZN7Display7setWordE16DisplayWordsType>
        Hour += MinutesTableEntry.HourOffset;                             // correct the hour offset from the minutes
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;

		memcpy_P(&HoursTableEntry, &ClockHoursTable[MinutesTableEntry.HourMode][Hour], sizeof(DisplayWordsType) * CLOCK_MAX_NUMBER_OF_HOUR_WORDS);

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && HoursTableEntry[Index] != DISPLAY_WORD_NONE; Index++) {
 3aa:	6f 81       	ldd	r22, Y+7	; 0x07
 3ac:	66 23       	and	r22, r22
 3ae:	29 f0       	breq	.+10     	; 0x3ba <_ZN5Clock4showEhh+0x100>
            pDisplay->setWord(HoursTableEntry[Index]);
 3b0:	f8 01       	movw	r30, r16
 3b2:	80 81       	ld	r24, Z
 3b4:	91 81       	ldd	r25, Z+1	; 0x01
 3b6:	0e 94 34 02 	call	0x468	; 0x468 <_ZN7Display7setWordE16DisplayWordsType>
        }

        return E_OK;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <_ZN5Clock4showEhh+0x106>
    } else {
        return E_NOT_OK;
 3be:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* show */
 3c0:	27 96       	adiw	r28, 0x07	; 7
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	df 90       	pop	r13
 3da:	bf 90       	pop	r11
 3dc:	af 90       	pop	r10
 3de:	08 95       	ret

000003e0 <_ZN7DisplayC1Ehhh>:
        *Character =  pgm_read_byte_near(&DisplayCharacters[Row][Column]);
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* getChar */
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
 3ec:	f6 2e       	mov	r15, r22
 3ee:	04 2f       	mov	r16, r20
 3f0:	12 2f       	mov	r17, r18
 3f2:	6a e0       	ldi	r22, 0x0A	; 10
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 9c 02 	call	0x538	; 0x538 <_ZN6WS2812C1Eh>
 3fa:	fe 01       	movw	r30, r28
 3fc:	e8 5a       	subi	r30, 0xA8	; 168
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	f0 82       	st	Z, r15
 402:	31 96       	adiw	r30, 0x01	; 1
 404:	00 83       	st	Z, r16
 406:	c6 5a       	subi	r28, 0xA6	; 166
 408:	de 4f       	sbci	r29, 0xFE	; 254
 40a:	18 83       	st	Y, r17
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	08 95       	ret

00000418 <_ZN7DisplayD1Ev>:
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <_ZN6WS2812D1Ev>

0000041e <_ZN7Display21transformToSerpentineEhh>:
******************************************************************************************************************************************************/
byte Display::transformToSerpentine(byte Row, byte Column)
{
    byte Index;

    if(isBitCleared(Row, 0)) Index = (Row * DISPLAY_NUMBER_OF_COLUMNS) + Column;
 41e:	60 fd       	sbrc	r22, 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <_ZN7Display21transformToSerpentineEhh+0x8>
 422:	84 2f       	mov	r24, r20
 424:	02 c0       	rjmp	.+4      	; 0x42a <_ZN7Display21transformToSerpentineEhh+0xc>
    else Index = (Row * DISPLAY_NUMBER_OF_COLUMNS) + (DISPLAY_NUMBER_OF_COLUMNS - Column - 1);
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	84 1b       	sub	r24, r20
 42a:	9b e0       	ldi	r25, 0x0B	; 11
 42c:	69 9f       	mul	r22, r25
 42e:	80 0d       	add	r24, r0
 430:	11 24       	eor	r1, r1
    
    return Index;
} /* transformToSerpentine */
 432:	08 95       	ret

00000434 <_ZN7Display8setPixelEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setPixel(byte Row, byte Column)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
    if(Row < DISPLAY_NUMBER_OF_ROWS && Column < DISPLAY_NUMBER_OF_COLUMNS) {
 438:	6a 30       	cpi	r22, 0x0A	; 10
 43a:	90 f4       	brcc	.+36     	; 0x460 <_ZN7Display8setPixelEhh+0x2c>
 43c:	4b 30       	cpi	r20, 0x0B	; 11
 43e:	80 f4       	brcc	.+32     	; 0x460 <_ZN7Display8setPixelEhh+0x2c>
 440:	ec 01       	movw	r28, r24
#if (DISPLAY_LED_STRIPE_SERPENTINE == STD_ON)
        /* if led stripe is snake or serpentine the odd row: count from right to left */
        Pixels.setPixel(transformToSerpentine(Row, Column), Color);
 442:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN7Display21transformToSerpentineEhh>
 446:	fe 01       	movw	r30, r28
 448:	e8 5a       	subi	r30, 0xA8	; 168
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	20 81       	ld	r18, Z
 44e:	31 81       	ldd	r19, Z+1	; 0x01
 450:	42 81       	ldd	r20, Z+2	; 0x02
 452:	68 2f       	mov	r22, r24
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6WS28128setPixelEh15WS2812PixelType>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	01 c0       	rjmp	.+2      	; 0x462 <_ZN7Display8setPixelEhh+0x2e>
#else
        Pixels.setPixel((Row * DISPLAY_NUMBER_OF_COLUMNS) + Column, Color);
#endif
        return E_OK;
    } else {
        return E_NOT_OK;
 460:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* setPixel */
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <_ZN7Display7setWordE16DisplayWordsType>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setWord(DisplayWordsType Word)
{
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
    stdReturnType ReturnValue = E_OK;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
 476:	6b 31       	cpi	r22, 0x1B	; 27
 478:	18 f5       	brcc	.+70     	; 0x4c0 <_ZN7Display7setWordE16DisplayWordsType+0x58>
 47a:	8c 01       	movw	r16, r24
        byte Row = (byte) pgm_read_byte(&WordIlluminationTable[Word].Row);
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	fb 01       	movw	r30, r22
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	6e 0f       	add	r22, r30
 486:	7f 1f       	adc	r23, r31
 488:	fb 01       	movw	r30, r22
 48a:	e8 57       	subi	r30, 0x78	; 120
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	e4 90       	lpm	r14, Z
        byte Column = (byte) pgm_read_byte(&WordIlluminationTable[Word].Column);
 490:	fb 01       	movw	r30, r22
 492:	e7 57       	subi	r30, 0x77	; 119
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	d4 90       	lpm	r13, Z
        byte Length = (byte) pgm_read_byte(&WordIlluminationTable[Word].Length);
 498:	fb 01       	movw	r30, r22
 49a:	e6 57       	subi	r30, 0x76	; 118
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	c4 91       	lpm	r28, Z

        for(byte Index = 0; Index < Length; Index++) if(setPixel(Row, Column + Index) == E_NOT_OK) ReturnValue = E_NOT_OK;
 4a0:	d0 e0       	ldi	r29, 0x00	; 0
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setWord(DisplayWordsType Word)
{
    stdReturnType ReturnValue = E_OK;
 4a2:	f1 2c       	mov	r15, r1
    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
        byte Row = (byte) pgm_read_byte(&WordIlluminationTable[Word].Row);
        byte Column = (byte) pgm_read_byte(&WordIlluminationTable[Word].Column);
        byte Length = (byte) pgm_read_byte(&WordIlluminationTable[Word].Length);

        for(byte Index = 0; Index < Length; Index++) if(setPixel(Row, Column + Index) == E_NOT_OK) ReturnValue = E_NOT_OK;
 4a4:	dc 17       	cp	r29, r28
 4a6:	71 f0       	breq	.+28     	; 0x4c4 <_ZN7Display7setWordE16DisplayWordsType+0x5c>
 4a8:	4d 2f       	mov	r20, r29
 4aa:	4d 0d       	add	r20, r13
 4ac:	6e 2d       	mov	r22, r14
 4ae:	c8 01       	movw	r24, r16
 4b0:	0e 94 1a 02 	call	0x434	; 0x434 <_ZN7Display8setPixelEhh>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	11 f4       	brne	.+4      	; 0x4bc <_ZN7Display7setWordE16DisplayWordsType+0x54>
 4b8:	ff 24       	eor	r15, r15
 4ba:	f3 94       	inc	r15
 4bc:	df 5f       	subi	r29, 0xFF	; 255
 4be:	f2 cf       	rjmp	.-28     	; 0x4a4 <_ZN7Display7setWordE16DisplayWordsType+0x3c>
    } else {
        ReturnValue = E_NOT_OK;
 4c0:	ff 24       	eor	r15, r15
 4c2:	f3 94       	inc	r15
    }
    return ReturnValue;
} /* setWord */
 4c4:	8f 2d       	mov	r24, r15
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	08 95       	ret

000004d6 <_ZN6WS2812D1Ev>:
        }
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* getPixel */
 4d6:	08 95       	ret

000004d8 <_ZN6WS28126setPinEh>:
 4d8:	dc 01       	movw	r26, r24
 4da:	64 31       	cpi	r22, 0x14	; 20
 4dc:	58 f5       	brcc	.+86     	; 0x534 <_ZN6WS28126setPinEh+0x5c>
 4de:	86 2f       	mov	r24, r22
 4e0:	26 2f       	mov	r18, r22
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	e7 52       	subi	r30, 0x27	; 39
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	e4 91       	lpm	r30, Z
 4ec:	ec 93       	st	X, r30
 4ee:	23 51       	subi	r18, 0x13	; 19
 4f0:	3e 4f       	sbci	r19, 0xFE	; 254
 4f2:	f9 01       	movw	r30, r18
 4f4:	94 91       	lpm	r25, Z
 4f6:	e9 2f       	mov	r30, r25
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	ef 5f       	subi	r30, 0xFF	; 255
 500:	fd 4f       	sbci	r31, 0xFD	; 253
 502:	45 91       	lpm	r20, Z+
 504:	54 91       	lpm	r21, Z
 506:	12 96       	adiw	r26, 0x02	; 2
 508:	5c 93       	st	X, r21
 50a:	4e 93       	st	-X, r20
 50c:	11 97       	sbiw	r26, 0x01	; 1
 50e:	f9 01       	movw	r30, r18
 510:	24 91       	lpm	r18, Z
 512:	e2 2f       	mov	r30, r18
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	e5 5f       	subi	r30, 0xF5	; 245
 51c:	fd 4f       	sbci	r31, 0xFD	; 253
 51e:	25 91       	lpm	r18, Z+
 520:	34 91       	lpm	r19, Z
 522:	14 96       	adiw	r26, 0x04	; 4
 524:	3c 93       	st	X, r19
 526:	2e 93       	st	-X, r18
 528:	13 97       	sbiw	r26, 0x03	; 3
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pinMode>
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	08 95       	ret

00000538 <_ZN6WS2812C1Eh>:
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	ec 01       	movw	r28, r24
 53e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6WS28126setPinEh>
 542:	fe 01       	movw	r30, r28
 544:	e1 5b       	subi	r30, 0xB1	; 177
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	80 83       	st	Z, r24
 54c:	31 96       	adiw	r30, 0x01	; 1
 54e:	10 82       	st	Z, r1
 550:	11 82       	std	Z+1, r1	; 0x01
 552:	12 82       	std	Z+2, r1	; 0x02
 554:	13 82       	std	Z+3, r1	; 0x03
 556:	eb 54       	subi	r30, 0x4B	; 75
 558:	f1 40       	sbci	r31, 0x01	; 1
 55a:	8a e4       	ldi	r24, 0x4A	; 74
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	df 01       	movw	r26, r30
 560:	9c 01       	movw	r18, r24
 562:	1d 92       	st	X+, r1
 564:	21 50       	subi	r18, 0x01	; 1
 566:	30 40       	sbci	r19, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <_ZN6WS2812C1Eh+0x2a>
 56a:	ef 5a       	subi	r30, 0xAF	; 175
 56c:	fe 4f       	sbci	r31, 0xFE	; 254
 56e:	10 82       	st	Z, r1
 570:	32 97       	sbiw	r30, 0x02	; 2
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	80 83       	st	Z, r24
 576:	cb 5a       	subi	r28, 0xAB	; 171
 578:	de 4f       	sbci	r29, 0xFE	; 254
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	88 83       	st	Y, r24
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <_ZN6WS28128setPixelEh15WS2812PixelType>:
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
stdReturnType WS2812::setPixel(byte Index, WS2812PixelType Pixel)
{
    if(Index < WS2812_NUMBER_OF_LEDS) {
 584:	6e 36       	cpi	r22, 0x6E	; 110
 586:	e8 f4       	brcc	.+58     	; 0x5c2 <_ZN6WS28128setPixelEh15WS2812PixelType+0x3e>
        Pixels[WS2812_POS_ABS_RED(Index)] = Pixel.Red;
 588:	fc 01       	movw	r30, r24
 58a:	ec 5a       	subi	r30, 0xAC	; 172
 58c:	fe 4f       	sbci	r31, 0xFE	; 254
 58e:	50 81       	ld	r21, Z
 590:	fc 01       	movw	r30, r24
 592:	e6 0f       	add	r30, r22
 594:	f1 1d       	adc	r31, r1
 596:	bf 01       	movw	r22, r30
 598:	e5 0f       	add	r30, r21
 59a:	f1 1d       	adc	r31, r1
 59c:	25 83       	std	Z+5, r18	; 0x05
        Pixels[WS2812_POS_ABS_GREEN(Index)] = Pixel.Green;
 59e:	fc 01       	movw	r30, r24
 5a0:	eb 5a       	subi	r30, 0xAB	; 171
 5a2:	fe 4f       	sbci	r31, 0xFE	; 254
 5a4:	20 81       	ld	r18, Z
 5a6:	fb 01       	movw	r30, r22
 5a8:	e2 0f       	add	r30, r18
 5aa:	f1 1d       	adc	r31, r1
 5ac:	35 83       	std	Z+5, r19	; 0x05
        Pixels[WS2812_POS_ABS_BLUE(Index)] = Pixel.Blue;
 5ae:	fc 01       	movw	r30, r24
 5b0:	ea 5a       	subi	r30, 0xAA	; 170
 5b2:	fe 4f       	sbci	r31, 0xFE	; 254
 5b4:	80 81       	ld	r24, Z
 5b6:	fb 01       	movw	r30, r22
 5b8:	e8 0f       	add	r30, r24
 5ba:	f1 1d       	adc	r31, r1
 5bc:	45 83       	std	Z+5, r20	; 0x05
        return E_OK;
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
    } else {
        return E_NOT_OK;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* setPixel */
 5c4:	08 95       	ret

000005c6 <initVariant>:
 5c6:	08 95       	ret

000005c8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 5c8:	0e 94 3d 03 	call	0x67a	; 0x67a <init>

	initVariant();
 5cc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 5d0:	0e 94 2c 01 	call	0x258	; 0x258 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 5d4:	c0 e0       	ldi	r28, 0x00	; 0
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 5d8:	0e 94 32 01 	call	0x264	; 0x264 <loop>
		if (serialEventRun) serialEventRun();
 5dc:	20 97       	sbiw	r28, 0x00	; 0
 5de:	e1 f3       	breq	.-8      	; 0x5d8 <main+0x10>
 5e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 5e4:	f9 cf       	rjmp	.-14     	; 0x5d8 <main+0x10>

000005e6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <timer0_millis>
 600:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <timer0_millis+0x1>
 604:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <timer0_millis+0x2>
 608:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <timer0_millis+0x3>
 60c:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <timer0_fract>
 610:	23 e0       	ldi	r18, 0x03	; 3
 612:	23 0f       	add	r18, r19
 614:	2d 37       	cpi	r18, 0x7D	; 125
 616:	20 f4       	brcc	.+8      	; 0x620 <__vector_16+0x3a>
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	a1 1d       	adc	r26, r1
 61c:	b1 1d       	adc	r27, r1
 61e:	05 c0       	rjmp	.+10     	; 0x62a <__vector_16+0x44>
 620:	26 e8       	ldi	r18, 0x86	; 134
 622:	23 0f       	add	r18, r19
 624:	02 96       	adiw	r24, 0x02	; 2
 626:	a1 1d       	adc	r26, r1
 628:	b1 1d       	adc	r27, r1
 62a:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <timer0_fract>
 62e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <timer0_millis>
 632:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <timer0_millis+0x1>
 636:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <timer0_millis+0x2>
 63a:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <timer0_millis+0x3>
 63e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <timer0_overflow_count>
 642:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <timer0_overflow_count+0x1>
 646:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <timer0_overflow_count+0x2>
 64a:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <timer0_overflow_count+0x3>
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	a1 1d       	adc	r26, r1
 652:	b1 1d       	adc	r27, r1
 654:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <timer0_overflow_count>
 658:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <timer0_overflow_count+0x1>
 65c:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <timer0_overflow_count+0x2>
 660:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <timer0_overflow_count+0x3>
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	3f 91       	pop	r19
 66e:	2f 91       	pop	r18
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 67a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 67c:	84 b5       	in	r24, 0x24	; 36
 67e:	82 60       	ori	r24, 0x02	; 2
 680:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 682:	84 b5       	in	r24, 0x24	; 36
 684:	81 60       	ori	r24, 0x01	; 1
 686:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 688:	85 b5       	in	r24, 0x25	; 37
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 68e:	85 b5       	in	r24, 0x25	; 37
 690:	81 60       	ori	r24, 0x01	; 1
 692:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 694:	ee e6       	ldi	r30, 0x6E	; 110
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 69e:	e1 e8       	ldi	r30, 0x81	; 129
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6a4:	80 81       	ld	r24, Z
 6a6:	82 60       	ori	r24, 0x02	; 2
 6a8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6aa:	80 81       	ld	r24, Z
 6ac:	81 60       	ori	r24, 0x01	; 1
 6ae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 6b0:	e0 e8       	ldi	r30, 0x80	; 128
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	81 60       	ori	r24, 0x01	; 1
 6b8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6ba:	e1 eb       	ldi	r30, 0xB1	; 177
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	84 60       	ori	r24, 0x04	; 4
 6c2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6c4:	e0 eb       	ldi	r30, 0xB0	; 176
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 6ce:	ea e7       	ldi	r30, 0x7A	; 122
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	84 60       	ori	r24, 0x04	; 4
 6d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 6d8:	80 81       	ld	r24, Z
 6da:	82 60       	ori	r24, 0x02	; 2
 6dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 6de:	80 81       	ld	r24, Z
 6e0:	81 60       	ori	r24, 0x01	; 1
 6e2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 6e4:	80 81       	ld	r24, Z
 6e6:	80 68       	ori	r24, 0x80	; 128
 6e8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 6ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 6ee:	08 95       	ret

000006f0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	fc 01       	movw	r30, r24
 6f8:	e7 52       	subi	r30, 0x27	; 39
 6fa:	fe 4f       	sbci	r31, 0xFE	; 254
 6fc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 6fe:	fc 01       	movw	r30, r24
 700:	e3 51       	subi	r30, 0x13	; 19
 702:	fe 4f       	sbci	r31, 0xFE	; 254
 704:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 706:	88 23       	and	r24, r24
 708:	61 f1       	breq	.+88     	; 0x762 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	fc 01       	movw	r30, r24
 712:	e5 5f       	subi	r30, 0xF5	; 245
 714:	fd 4f       	sbci	r31, 0xFD	; 253
 716:	c5 91       	lpm	r28, Z+
 718:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 71a:	fc 01       	movw	r30, r24
 71c:	ef 5f       	subi	r30, 0xFF	; 255
 71e:	fd 4f       	sbci	r31, 0xFD	; 253
 720:	a5 91       	lpm	r26, Z+
 722:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 724:	61 11       	cpse	r22, r1
 726:	09 c0       	rjmp	.+18     	; 0x73a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 728:	9f b7       	in	r25, 0x3f	; 63
                cli();
 72a:	f8 94       	cli
		*reg &= ~bit;
 72c:	88 81       	ld	r24, Y
 72e:	20 95       	com	r18
 730:	82 23       	and	r24, r18
 732:	88 83       	st	Y, r24
		*out &= ~bit;
 734:	ec 91       	ld	r30, X
 736:	2e 23       	and	r18, r30
 738:	0b c0       	rjmp	.+22     	; 0x750 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 73a:	62 30       	cpi	r22, 0x02	; 2
 73c:	61 f4       	brne	.+24     	; 0x756 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 73e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 740:	f8 94       	cli
		*reg &= ~bit;
 742:	88 81       	ld	r24, Y
 744:	32 2f       	mov	r19, r18
 746:	30 95       	com	r19
 748:	83 23       	and	r24, r19
 74a:	88 83       	st	Y, r24
		*out |= bit;
 74c:	ec 91       	ld	r30, X
 74e:	2e 2b       	or	r18, r30
 750:	2c 93       	st	X, r18
		SREG = oldSREG;
 752:	9f bf       	out	0x3f, r25	; 63
 754:	06 c0       	rjmp	.+12     	; 0x762 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 756:	8f b7       	in	r24, 0x3f	; 63
                cli();
 758:	f8 94       	cli
		*reg |= bit;
 75a:	e8 81       	ld	r30, Y
 75c:	2e 2b       	or	r18, r30
 75e:	28 83       	st	Y, r18
		SREG = oldSREG;
 760:	8f bf       	out	0x3f, r24	; 63
	}
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <__udivmodqi4>:
 768:	99 1b       	sub	r25, r25
 76a:	79 e0       	ldi	r23, 0x09	; 9
 76c:	04 c0       	rjmp	.+8      	; 0x776 <__udivmodqi4_ep>

0000076e <__udivmodqi4_loop>:
 76e:	99 1f       	adc	r25, r25
 770:	96 17       	cp	r25, r22
 772:	08 f0       	brcs	.+2      	; 0x776 <__udivmodqi4_ep>
 774:	96 1b       	sub	r25, r22

00000776 <__udivmodqi4_ep>:
 776:	88 1f       	adc	r24, r24
 778:	7a 95       	dec	r23
 77a:	c9 f7       	brne	.-14     	; 0x76e <__udivmodqi4_loop>
 77c:	80 95       	com	r24
 77e:	08 95       	ret

00000780 <__tablejump2__>:
 780:	ee 0f       	add	r30, r30
 782:	ff 1f       	adc	r31, r31
 784:	05 90       	lpm	r0, Z+
 786:	f4 91       	lpm	r31, Z
 788:	e0 2d       	mov	r30, r0
 78a:	09 94       	ijmp

0000078c <memcpy_P>:
 78c:	fb 01       	movw	r30, r22
 78e:	dc 01       	movw	r26, r24
 790:	02 c0       	rjmp	.+4      	; 0x796 <memcpy_P+0xa>
 792:	05 90       	lpm	r0, Z+
 794:	0d 92       	st	X+, r0
 796:	41 50       	subi	r20, 0x01	; 1
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	d8 f7       	brcc	.-10     	; 0x792 <memcpy_P+0x6>
 79c:	08 95       	ret

0000079e <__do_global_dtors>:
 79e:	11 e0       	ldi	r17, 0x01	; 1
 7a0:	cc e0       	ldi	r28, 0x0C	; 12
 7a2:	d1 e0       	ldi	r29, 0x01	; 1
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <__do_global_dtors+0x10>
 7a6:	fe 01       	movw	r30, r28
 7a8:	0e 94 c0 03 	call	0x780	; 0x780 <__tablejump2__>
 7ac:	21 96       	adiw	r28, 0x01	; 1
 7ae:	cd 30       	cpi	r28, 0x0D	; 13
 7b0:	d1 07       	cpc	r29, r17
 7b2:	c9 f7       	brne	.-14     	; 0x7a6 <__do_global_dtors+0x8>
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
