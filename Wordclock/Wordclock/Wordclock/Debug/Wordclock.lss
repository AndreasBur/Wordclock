
Wordclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000076a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  00800100  00800100  0000076a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000554a  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c1  00000000  00000000  00005f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f1  00000000  00000000  0000710f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  00008700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d46  00000000  00000000  00008c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a6  00000000  00000000  0000a98e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000cc34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__dtors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_16>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000068 <_ZN5Clock17ClockMinutesTableE>:
  68:	00 00 00 00 00 01 00 03 0a 00 01 00 04 0a 00 01     ................
  78:	00 08 0a 00 01 01 04 0b 0c 01 01 03 0b 0c 01 01     ................
  88:	0c 00 00 01 01 03 0a 0c 01 01 04 0a 0c 01 01 08     ................
  98:	0b 00 01 01 04 0b 00 01 01 03 0b 00 00 00 00 00     ................
  a8:	00 01 00 03 0a 00 01 00 04 0a 00 01 01 08 00 00     ................
  b8:	01 01 04 0b 0c 01 01 03 0b 0c 01 01 0c 00 00 01     ................
  c8:	01 03 0a 0c 01 01 04 0a 0c 01 01 09 00 00 01 01     ................
  d8:	04 0b 00 01 01 03 0b 00 00 00 00 00 00 01 00 03     ................
  e8:	0a 00 01 00 04 0a 00 01 00 08 0a 00 01 00 05 0a     ................
  f8:	00 01 01 03 0b 0c 01 01 0c 00 00 01 01 03 0a 0c     ................
 108:	01 01 05 0b 00 01 01 08 0b 00 01 01 04 0b 00 01     ................
 118:	01 03 0b 00 00 00 00 00 00 01 00 03 0a 00 01 00     ................
 128:	04 0a 00 01 01 08 00 00 01 00 05 0a 00 01 01 03     ................
 138:	0b 0c 01 01 0c 00 00 01 01 03 0a 0c 01 01 05 0b     ................
 148:	00 01 01 09 00 00 01 01 04 0b 00 01 01 03 0b 00     ................

00000158 <_ZN5Clock15ClockHoursTableE>:
 158:	0d 1a 0f 1a 0e 1a 12 1a 16 1a 13 1a 19 1a 11 1a     ................
 168:	17 1a 15 1a 18 1a 14 1a 0d 00 10 00 0e 00 12 00     ................
 178:	16 00 13 00 19 00 11 00 17 00 15 00 18 00 14 00     ................

00000188 <_ZN7Display21WordIlluminationTableE>:
 188:	00 00 00 00 00 02 00 03 03 00 07 04 01 00 04 01     ................
 198:	04 07 02 00 04 02 04 04 02 04 07 02 00 0b 03 02     ................
 1a8:	04 03 06 03 04 00 04 04 05 05 05 00 04 05 02 03     ................
 1b8:	05 02 04 05 05 06 06 01 04 06 07 04 07 00 03 07     ................
 1c8:	03 04 07 07 04 08 01 04 08 05 04 09 01 05 09 08     ................
 1d8:	03                                                  .

000001d9 <digital_pin_to_bit_mask_PGM>:
 1d9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 1e9:	04 08 10 20                                         ... 

000001ed <digital_pin_to_port_PGM>:
 1ed:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
 1fd:	03 03 03 03                                         ....

00000201 <port_to_output_PGM>:
 201:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000020b <port_to_mode_PGM>:
 20b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000216 <__ctors_start>:
 216:	33 01       	movw	r6, r6

00000218 <__ctors_end>:
 218:	41 01       	movw	r8, r2

0000021a <__dtors_end>:
 21a:	11 24       	eor	r1, r1
 21c:	1f be       	out	0x3f, r1	; 63
 21e:	cf ef       	ldi	r28, 0xFF	; 255
 220:	d8 e0       	ldi	r29, 0x08	; 8
 222:	de bf       	out	0x3e, r29	; 62
 224:	cd bf       	out	0x3d, r28	; 61

00000226 <__do_clear_bss>:
 226:	22 e0       	ldi	r18, 0x02	; 2
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a5 36       	cpi	r26, 0x65	; 101
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>

00000236 <__do_global_ctors>:
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	cc e0       	ldi	r28, 0x0C	; 12
 23a:	d1 e0       	ldi	r29, 0x01	; 1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__do_global_ctors+0x10>
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	fe 01       	movw	r30, r28
 242:	0e 94 5f 03 	call	0x6be	; 0x6be <__tablejump2__>
 246:	cb 30       	cpi	r28, 0x0B	; 11
 248:	d1 07       	cpc	r29, r17
 24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
 24c:	0e 94 83 02 	call	0x506	; 0x506 <main>
 250:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__do_global_dtors>

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000258 <setup>:
//		flag = 1;
  //} else {
//		flag = 0;
  //}
  //wcAnimation.setChar(0,0, 'T', ANIMATION_FONT_4X6);
  wcClock.show(17,30);
 258:	4e e1       	ldi	r20, 0x1E	; 30
 25a:	61 e1       	ldi	r22, 0x11	; 17
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_ZN5Clock4showEhh>

00000264 <loop>:
}

void loop() {
 264:	08 95       	ret

00000266 <_GLOBAL__sub_I_flag>:
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 266:	24 e1       	ldi	r18, 0x14	; 20
 268:	44 e1       	ldi	r20, 0x14	; 20
 26a:	64 e1       	ldi	r22, 0x14	; 20
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN7DisplayC1Ehhh>
Clock wcClock(&WordClockDisplay, CLOCK_MODE_WESSI);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	71 e0       	ldi	r23, 0x01	; 1
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0c 94 49 01 	jmp	0x292	; 0x292 <_ZN5ClockC1EP7Display14ClockModesType>

00000282 <_GLOBAL__sub_D_flag>:
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN5ClockD1Ev>
#include "Display.h"
#include "Animation.h"
#include "Clock.h"
/*End of auto generated code by Atmel studio */
int flag;
Display WordClockDisplay(20, 20, 20);
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0c 94 1a 02 	jmp	0x434	; 0x434 <_ZN7DisplayD1Ev>

00000292 <_ZN5ClockC1EP7Display14ClockModesType>:
 *
 *  \return         -
******************************************************************************************************************************************************/
Clock::Clock(Display* Display, ClockModesType sMode)
{
	if(Display != NULL) {
 292:	61 15       	cp	r22, r1
 294:	71 05       	cpc	r23, r1
 296:	19 f0       	breq	.+6      	; 0x29e <_ZN5ClockC1EP7Display14ClockModesType+0xc>
		pDisplay = Display;
 298:	fc 01       	movw	r30, r24
 29a:	71 83       	std	Z+1, r23	; 0x01
 29c:	60 83       	st	Z, r22
	}
	Mode = sMode;
 29e:	fc 01       	movw	r30, r24
 2a0:	42 83       	std	Z+2, r20	; 0x02
 2a2:	08 95       	ret

000002a4 <_ZN5ClockD1Ev>:


/******************************************************************************************************************************************************
  DESTRUCTOR OF Clock
******************************************************************************************************************************************************/
Clock::~Clock()
 2a4:	08 95       	ret

000002a6 <_ZN5Clock4showEhh>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Clock::show(byte Hour, byte Minute)
{
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	28 97       	sbiw	r28, 0x08	; 8
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	8c 01       	movw	r16, r24
 2cc:	c6 2e       	mov	r12, r22
	stdReturnType ReturnValue = E_NOT_OK;
    ClockMinutesType MinutesTableEntry;
    DisplayWordsType HoursTableEntry[CLOCK_MAX_NUMBER_OF_HOUR_WORDS];

    /* ----- Implementation ----------------------------------------------- */
    if(Hour < CLOCK_NUMBER_OF_HOURS_PER_DAY && Minute < CLOCK_NUMBER_OF_MINUTES_PER_HOUR) {
 2ce:	67 e1       	ldi	r22, 0x17	; 23
 2d0:	6c 15       	cp	r22, r12
 2d2:	08 f4       	brcc	.+2      	; 0x2d6 <_ZN5Clock4showEhh+0x30>
 2d4:	79 c0       	rjmp	.+242    	; 0x3c8 <_ZN5Clock4showEhh+0x122>
 2d6:	4c 33       	cpi	r20, 0x3C	; 60
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <_ZN5Clock4showEhh+0x36>
 2da:	76 c0       	rjmp	.+236    	; 0x3c8 <_ZN5Clock4showEhh+0x122>
        /* show IT IS permanently or only to full and half hour */
        if (CLOCK_SHOW_IT_IS_PERMANENTLY == STD_ON	||
			Minute < CLOCK_MINUTE_STEP_IN_MINUTES	||
			(Minute >= (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) && Minute < (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) + CLOCK_MINUTE_STEP_IN_MINUTES)) 
		{
            if(pDisplay->setWord(DISPLAY_WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	48 87       	std	Y+8, r20	; 0x08
 2e6:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7Display7setWordE16DisplayWordsType>
 2ea:	f8 2e       	mov	r15, r24
            if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	f8 01       	movw	r30, r16
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7Display7setWordE16DisplayWordsType>
 2f8:	48 85       	ldd	r20, Y+8	; 0x08
 2fa:	dd 24       	eor	r13, r13
 2fc:	d3 94       	inc	r13
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	11 f0       	breq	.+4      	; 0x306 <_ZN5Clock4showEhh+0x60>
        /* show IT IS permanently or only to full and half hour */
        if (CLOCK_SHOW_IT_IS_PERMANENTLY == STD_ON	||
			Minute < CLOCK_MINUTE_STEP_IN_MINUTES	||
			(Minute >= (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) && Minute < (CLOCK_NUMBER_OF_MINUTES_PER_HOUR/2) + CLOCK_MINUTE_STEP_IN_MINUTES)) 
		{
            if(pDisplay->setWord(DISPLAY_WORD_ES) == E_NOT_OK) ReturnValue = E_NOT_OK;
 302:	fd 10       	cpse	r15, r13
 304:	d1 2c       	mov	r13, r1
            if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
        }

		memcpy_P(&MinutesTableEntry, &ClockMinutesTable[Mode][Minute / CLOCK_MINUTE_STEP_IN_MINUTES], sizeof(ClockMinutesType));
 306:	55 e0       	ldi	r21, 0x05	; 5
 308:	84 2f       	mov	r24, r20
 30a:	65 2f       	mov	r22, r21
 30c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__udivmodqi4>
 310:	f8 01       	movw	r30, r16
 312:	22 81       	ldd	r18, Z+2	; 0x02
 314:	fc e3       	ldi	r31, 0x3C	; 60
 316:	2f 9f       	mul	r18, r31
 318:	90 01       	movw	r18, r0
 31a:	11 24       	eor	r1, r1
 31c:	b9 01       	movw	r22, r18
 31e:	58 9f       	mul	r21, r24
 320:	60 0d       	add	r22, r0
 322:	71 1d       	adc	r23, r1
 324:	11 24       	eor	r1, r1
 326:	68 59       	subi	r22, 0x98	; 152
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	45 e0       	ldi	r20, 0x05	; 5
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 65 03 	call	0x6ca	; 0x6ca <memcpy_P>
 336:	5e 01       	movw	r10, r28
 338:	73 e0       	ldi	r23, 0x03	; 3
 33a:	a7 0e       	add	r10, r23
 33c:	b1 1c       	adc	r11, r1
 33e:	7e 01       	movw	r14, r28
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	e8 0e       	add	r14, r24
 344:	f1 1c       	adc	r15, r1

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
 346:	f5 01       	movw	r30, r10
 348:	61 91       	ld	r22, Z+
 34a:	5f 01       	movw	r10, r30
 34c:	66 23       	and	r22, r22
 34e:	61 f0       	breq	.+24     	; 0x368 <_ZN5Clock4showEhh+0xc2>
            if(pDisplay->setWord(MinutesTableEntry.Words[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 350:	f8 01       	movw	r30, r16
 352:	80 81       	ld	r24, Z
 354:	91 81       	ldd	r25, Z+1	; 0x01
 356:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7Display7setWordE16DisplayWordsType>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	11 f4       	brne	.+4      	; 0x362 <_ZN5Clock4showEhh+0xbc>
 35e:	dd 24       	eor	r13, r13
 360:	d3 94       	inc	r13
            if(pDisplay->setWord(DISPLAY_WORD_IST) == E_NOT_OK) ReturnValue = E_NOT_OK;
        }

		memcpy_P(&MinutesTableEntry, &ClockMinutesTable[Mode][Minute / CLOCK_MINUTE_STEP_IN_MINUTES], sizeof(ClockMinutesType));

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_MINUTE_WORDS && MinutesTableEntry.Words[Index] != DISPLAY_WORD_NONE; Index++) {
 362:	ae 14       	cp	r10, r14
 364:	bf 04       	cpc	r11, r15
 366:	79 f7       	brne	.-34     	; 0x346 <_ZN5Clock4showEhh+0xa0>
            if(pDisplay->setWord(MinutesTableEntry.Words[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
        }
        
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;
 368:	fb e0       	ldi	r31, 0x0B	; 11
 36a:	fc 15       	cp	r31, r12
 36c:	10 f4       	brcc	.+4      	; 0x372 <_ZN5Clock4showEhh+0xcc>
 36e:	64 ef       	ldi	r22, 0xF4	; 244
 370:	c6 0e       	add	r12, r22
        Hour += MinutesTableEntry.HourOffset;                             // correct the hour offset from the minutes
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	8c 0d       	add	r24, r12
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;
 376:	8c 30       	cpi	r24, 0x0C	; 12
 378:	08 f0       	brcs	.+2      	; 0x37c <_ZN5Clock4showEhh+0xd6>
 37a:	8c 50       	subi	r24, 0x0C	; 12

		memcpy_P(&HoursTableEntry, &ClockHoursTable[MinutesTableEntry.HourMode][Hour], sizeof(DisplayWordsType) * CLOCK_MAX_NUMBER_OF_HOUR_WORDS);
 37c:	69 81       	ldd	r22, Y+1	; 0x01
 37e:	9c e0       	ldi	r25, 0x0C	; 12
 380:	69 9f       	mul	r22, r25
 382:	b0 01       	movw	r22, r0
 384:	11 24       	eor	r1, r1
 386:	68 0f       	add	r22, r24
 388:	71 1d       	adc	r23, r1
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	68 5a       	subi	r22, 0xA8	; 168
 390:	7e 4f       	sbci	r23, 0xFE	; 254
 392:	42 e0       	ldi	r20, 0x02	; 2
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	c7 01       	movw	r24, r14
 398:	0e 94 65 03 	call	0x6ca	; 0x6ca <memcpy_P>

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && HoursTableEntry[Index] != DISPLAY_WORD_NONE; Index++) {
 39c:	6e 81       	ldd	r22, Y+6	; 0x06
 39e:	66 23       	and	r22, r22
 3a0:	a9 f0       	breq	.+42     	; 0x3cc <_ZN5Clock4showEhh+0x126>
            if(pDisplay->setWord(HoursTableEntry[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3a2:	f8 01       	movw	r30, r16
 3a4:	80 81       	ld	r24, Z
 3a6:	91 81       	ldd	r25, Z+1	; 0x01
 3a8:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7Display7setWordE16DisplayWordsType>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <_ZN5Clock4showEhh+0x10e>
 3b0:	dd 24       	eor	r13, r13
 3b2:	d3 94       	inc	r13
        Hour += MinutesTableEntry.HourOffset;                             // correct the hour offset from the minutes
        if(Hour >= CLOCK_NUMBER_OF_HOURS) Hour -= CLOCK_NUMBER_OF_HOURS;

		memcpy_P(&HoursTableEntry, &ClockHoursTable[MinutesTableEntry.HourMode][Hour], sizeof(DisplayWordsType) * CLOCK_MAX_NUMBER_OF_HOUR_WORDS);

        for(byte Index = 0; Index < CLOCK_MAX_NUMBER_OF_HOUR_WORDS && HoursTableEntry[Index] != DISPLAY_WORD_NONE; Index++) {
 3b4:	6f 81       	ldd	r22, Y+7	; 0x07
 3b6:	66 23       	and	r22, r22
 3b8:	49 f0       	breq	.+18     	; 0x3cc <_ZN5Clock4showEhh+0x126>
            if(pDisplay->setWord(HoursTableEntry[Index]) == E_NOT_OK) ReturnValue = E_NOT_OK;
 3ba:	f8 01       	movw	r30, r16
 3bc:	80 81       	ld	r24, Z
 3be:	91 81       	ldd	r25, Z+1	; 0x01
 3c0:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7Display7setWordE16DisplayWordsType>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	11 f4       	brne	.+4      	; 0x3cc <_ZN5Clock4showEhh+0x126>
        }        
    } else {
        ReturnValue = E_NOT_OK;
 3c8:	dd 24       	eor	r13, r13
 3ca:	d3 94       	inc	r13
    }
	return ReturnValue;
} /* show */
 3cc:	8d 2d       	mov	r24, r13
 3ce:	28 96       	adiw	r28, 0x08	; 8
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	08 95       	ret

000003f0 <_ZN7DisplayC1Ehhh>:
#endif
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* setPixel */
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <_ZN7DisplayC1Ehhh+0xc>
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	7c 01       	movw	r14, r24
 402:	16 2f       	mov	r17, r22
 404:	6a e0       	ldi	r22, 0x0A	; 10
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	2a 83       	std	Y+2, r18	; 0x02
 40a:	49 83       	std	Y+1, r20	; 0x01
 40c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN6WS2812C1Eh>
 410:	f7 01       	movw	r30, r14
 412:	ea 5a       	subi	r30, 0xAA	; 170
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	10 83       	st	Z, r17
 418:	31 96       	adiw	r30, 0x01	; 1
 41a:	49 81       	ldd	r20, Y+1	; 0x01
 41c:	40 83       	st	Z, r20
 41e:	31 96       	adiw	r30, 0x01	; 1
 420:	2a 81       	ldd	r18, Y+2	; 0x02
 422:	20 83       	st	Z, r18
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	08 95       	ret

00000434 <_ZN7DisplayD1Ev>:
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	0c 94 3a 02 	jmp	0x474	; 0x474 <_ZN6WS2812D1Ev>

0000043a <_ZN7Display7setWordE16DisplayWordsType>:
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType Display::setWord(DisplayWordsType Word)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	1f 92       	push	r1
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	69 83       	std	Y+1, r22	; 0x01
    stdReturnType ReturnValue = E_NOT_OK;
	DisplayWordIlluminationType WordIllu;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
 446:	6b 31       	cpi	r22, 0x1B	; 27
 448:	80 f4       	brcc	.+32     	; 0x46a <_ZN7Display7setWordE16DisplayWordsType+0x30>
		ReturnValue = E_OK;
		memcpy_P(&Word, &WordIlluminationTable[Word], sizeof(WordIllu));
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	cb 01       	movw	r24, r22
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	68 0f       	add	r22, r24
 454:	79 1f       	adc	r23, r25
 456:	68 57       	subi	r22, 0x78	; 120
 458:	7e 4f       	sbci	r23, 0xFE	; 254
 45a:	43 e0       	ldi	r20, 0x03	; 3
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	0e 94 65 03 	call	0x6ca	; 0x6ca <memcpy_P>
{
    stdReturnType ReturnValue = E_NOT_OK;
	DisplayWordIlluminationType WordIllu;

    if(Word < DISPLAY_WORD_NUMBER_OF_WORDS) {
		ReturnValue = E_OK;
 466:	80 e0       	ldi	r24, 0x00	; 0
		memcpy_P(&Word, &WordIlluminationTable[Word], sizeof(WordIllu));

        for(byte Index = 0; Index < WordIllu.Length; Index++) {
 468:	01 c0       	rjmp	.+2      	; 0x46c <_ZN7Display7setWordE16DisplayWordsType+0x32>
			if(setPixel(WordIllu.Column + Index,  WordIllu.Row) == E_NOT_OK) ReturnValue = E_NOT_OK;
		}
    } else {
        ReturnValue = E_NOT_OK;
 46a:	81 e0       	ldi	r24, 0x01	; 1
    }
    return ReturnValue;
} /* setWord */
 46c:	0f 90       	pop	r0
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <_ZN6WS2812D1Ev>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void WS2812::init()
{
 474:	08 95       	ret

00000476 <_ZN6WS28126setPinEh>:
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
stdReturnType WS2812::setPin(byte Pin)
{
 476:	dc 01       	movw	r26, r24
    if(Pin < NUM_DIGITAL_PINS) {
 478:	64 31       	cpi	r22, 0x14	; 20
 47a:	e0 f4       	brcc	.+56     	; 0x4b4 <_ZN6WS28126setPinEh+0x3e>
 47c:	86 2f       	mov	r24, r22
        PinMask = digitalPinToBitMask(Pin);
 47e:	26 2f       	mov	r18, r22
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	f9 01       	movw	r30, r18
 484:	e7 52       	subi	r30, 0x27	; 39
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	e4 91       	lpm	r30, Z
 48a:	ec 93       	st	X, r30
        PortOutputRegister = portOutputRegister(digitalPinToPort(Pin));
 48c:	f9 01       	movw	r30, r18
 48e:	e3 51       	subi	r30, 0x13	; 19
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	e4 91       	lpm	r30, Z
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ef 5f       	subi	r30, 0xFF	; 255
 49c:	fd 4f       	sbci	r31, 0xFD	; 253
 49e:	25 91       	lpm	r18, Z+
 4a0:	34 91       	lpm	r19, Z
 4a2:	12 96       	adiw	r26, 0x02	; 2
 4a4:	3c 93       	st	X, r19
 4a6:	2e 93       	st	-X, r18
 4a8:	11 97       	sbiw	r26, 0x01	; 1
        //PortModeRegister = portModeRegister(digitalPinToPort(Pin));
        pinMode(Pin, OUTPUT);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	0e 94 17 03 	call	0x62e	; 0x62e <pinMode>
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
        return E_OK;
    } else {
         return E_NOT_OK;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
    }
} /* setPin */
 4b6:	08 95       	ret

000004b8 <_ZN6WS2812C1Eh>:
/*! \brief          WS2812 Constructor
 *  \details        Instantiation of the WS2812 library
 *
 *  \return         -
 *****************************************************************************************************************************************************/
WS2812::WS2812(byte Pin)
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	ec 01       	movw	r28, r24
{
    setPin(Pin);
 4be:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN6WS28126setPinEh>
    Brightness = 255;
 4c2:	fe 01       	movw	r30, r28
 4c4:	e3 5b       	subi	r30, 0xB3	; 179
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	80 83       	st	Z, r24
#if (WS2812_RESET_TIMER == STD_ON)
    ResetTimer = 0;
 4cc:	31 96       	adiw	r30, 0x01	; 1
 4ce:	10 82       	st	Z, r1
 4d0:	11 82       	std	Z+1, r1	; 0x01
 4d2:	12 82       	std	Z+2, r1	; 0x02
 4d4:	13 82       	std	Z+3, r1	; 0x03
#endif
    memset(Pixels, 0, sizeof(Pixels));
 4d6:	eb 54       	subi	r30, 0x4B	; 75
 4d8:	f1 40       	sbci	r31, 0x01	; 1
 4da:	8a e4       	ldi	r24, 0x4A	; 74
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	df 01       	movw	r26, r30
 4e0:	9c 01       	movw	r18, r24
 4e2:	1d 92       	st	X+, r1
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	30 40       	sbci	r19, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <_ZN6WS2812C1Eh+0x2a>
 *****************************************************************************************************************************************************/
#if (WS2812_RGB_ORDER_ON_RUNTIME == STD_ON)
void WS2812::setColorOrder(WS2812ColorOrderType ColorOrder)
{
    if(ColorOrder == WS2812_COLOR_ORDER_BRG) {
        OffsetBlue = 0;
 4ea:	ef 5a       	subi	r30, 0xAF	; 175
 4ec:	fe 4f       	sbci	r31, 0xFE	; 254
 4ee:	10 82       	st	Z, r1
        OffsetRed = 1;
 4f0:	32 97       	sbiw	r30, 0x02	; 2
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 83       	st	Z, r24
        OffsetGreen = 2;
 4f6:	cd 5a       	subi	r28, 0xAD	; 173
 4f8:	de 4f       	sbci	r29, 0xFE	; 254
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	88 83       	st	Y, r24
#endif
    memset(Pixels, 0, sizeof(Pixels));
#if (WS2812_RGB_ORDER_ON_RUNTIME == STD_ON)
    setColorOrder(WS2812_COLOR_ORDER_BRG);
#endif
} /* WS2812 */
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 504:	08 95       	ret

00000506 <main>:

int main(void)
{
	init();
 506:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <init>

	initVariant();
 50a:	0e 94 82 02 	call	0x504	; 0x504 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 50e:	0e 94 2c 01 	call	0x258	; 0x258 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 512:	c0 e0       	ldi	r28, 0x00	; 0
 514:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 516:	0e 94 32 01 	call	0x264	; 0x264 <loop>
		if (serialEventRun) serialEventRun();
 51a:	20 97       	sbiw	r28, 0x00	; 0
 51c:	e1 f3       	breq	.-8      	; 0x516 <main+0x10>
 51e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 522:	f9 cf       	rjmp	.-14     	; 0x516 <main+0x10>

00000524 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	2f 93       	push	r18
 530:	3f 93       	push	r19
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
 536:	af 93       	push	r26
 538:	bf 93       	push	r27
 53a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis>
 53e:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x1>
 542:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <timer0_millis+0x2>
 546:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <timer0_millis+0x3>
 54a:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <timer0_fract>
 54e:	23 e0       	ldi	r18, 0x03	; 3
 550:	23 0f       	add	r18, r19
 552:	2d 37       	cpi	r18, 0x7D	; 125
 554:	20 f4       	brcc	.+8      	; 0x55e <__vector_16+0x3a>
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	a1 1d       	adc	r26, r1
 55a:	b1 1d       	adc	r27, r1
 55c:	05 c0       	rjmp	.+10     	; 0x568 <__vector_16+0x44>
 55e:	26 e8       	ldi	r18, 0x86	; 134
 560:	23 0f       	add	r18, r19
 562:	02 96       	adiw	r24, 0x02	; 2
 564:	a1 1d       	adc	r26, r1
 566:	b1 1d       	adc	r27, r1
 568:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <timer0_fract>
 56c:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timer0_millis>
 570:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <timer0_millis+0x1>
 574:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <timer0_millis+0x2>
 578:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <timer0_millis+0x3>
 57c:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_overflow_count>
 580:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_overflow_count+0x1>
 584:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <timer0_overflow_count+0x2>
 588:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <timer0_overflow_count+0x3>
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	a1 1d       	adc	r26, r1
 590:	b1 1d       	adc	r27, r1
 592:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <timer0_overflow_count>
 596:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <timer0_overflow_count+0x1>
 59a:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <timer0_overflow_count+0x2>
 59e:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <timer0_overflow_count+0x3>
 5a2:	bf 91       	pop	r27
 5a4:	af 91       	pop	r26
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 5b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 5ba:	84 b5       	in	r24, 0x24	; 36
 5bc:	82 60       	ori	r24, 0x02	; 2
 5be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 5c0:	84 b5       	in	r24, 0x24	; 36
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5c6:	85 b5       	in	r24, 0x25	; 37
 5c8:	82 60       	ori	r24, 0x02	; 2
 5ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 5cc:	85 b5       	in	r24, 0x25	; 37
 5ce:	81 60       	ori	r24, 0x01	; 1
 5d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 5d2:	ee e6       	ldi	r30, 0x6E	; 110
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 5dc:	e1 e8       	ldi	r30, 0x81	; 129
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 5e2:	80 81       	ld	r24, Z
 5e4:	82 60       	ori	r24, 0x02	; 2
 5e6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 5e8:	80 81       	ld	r24, Z
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 5ee:	e0 e8       	ldi	r30, 0x80	; 128
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	81 60       	ori	r24, 0x01	; 1
 5f6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 5f8:	e1 eb       	ldi	r30, 0xB1	; 177
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	84 60       	ori	r24, 0x04	; 4
 600:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 602:	e0 eb       	ldi	r30, 0xB0	; 176
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 60c:	ea e7       	ldi	r30, 0x7A	; 122
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	84 60       	ori	r24, 0x04	; 4
 614:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 616:	80 81       	ld	r24, Z
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 61c:	80 81       	ld	r24, Z
 61e:	81 60       	ori	r24, 0x01	; 1
 620:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 622:	80 81       	ld	r24, Z
 624:	80 68       	ori	r24, 0x80	; 128
 626:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 628:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 62c:	08 95       	ret

0000062e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	fc 01       	movw	r30, r24
 636:	e7 52       	subi	r30, 0x27	; 39
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 63c:	fc 01       	movw	r30, r24
 63e:	e3 51       	subi	r30, 0x13	; 19
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 644:	88 23       	and	r24, r24
 646:	61 f1       	breq	.+88     	; 0x6a0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	fc 01       	movw	r30, r24
 650:	e5 5f       	subi	r30, 0xF5	; 245
 652:	fd 4f       	sbci	r31, 0xFD	; 253
 654:	c5 91       	lpm	r28, Z+
 656:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 658:	fc 01       	movw	r30, r24
 65a:	ef 5f       	subi	r30, 0xFF	; 255
 65c:	fd 4f       	sbci	r31, 0xFD	; 253
 65e:	a5 91       	lpm	r26, Z+
 660:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 662:	61 11       	cpse	r22, r1
 664:	09 c0       	rjmp	.+18     	; 0x678 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 666:	9f b7       	in	r25, 0x3f	; 63
                cli();
 668:	f8 94       	cli
		*reg &= ~bit;
 66a:	88 81       	ld	r24, Y
 66c:	20 95       	com	r18
 66e:	82 23       	and	r24, r18
 670:	88 83       	st	Y, r24
		*out &= ~bit;
 672:	ec 91       	ld	r30, X
 674:	2e 23       	and	r18, r30
 676:	0b c0       	rjmp	.+22     	; 0x68e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 678:	62 30       	cpi	r22, 0x02	; 2
 67a:	61 f4       	brne	.+24     	; 0x694 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 67c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 67e:	f8 94       	cli
		*reg &= ~bit;
 680:	38 81       	ld	r19, Y
 682:	82 2f       	mov	r24, r18
 684:	80 95       	com	r24
 686:	83 23       	and	r24, r19
 688:	88 83       	st	Y, r24
		*out |= bit;
 68a:	ec 91       	ld	r30, X
 68c:	2e 2b       	or	r18, r30
 68e:	2c 93       	st	X, r18
		SREG = oldSREG;
 690:	9f bf       	out	0x3f, r25	; 63
 692:	06 c0       	rjmp	.+12     	; 0x6a0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 694:	8f b7       	in	r24, 0x3f	; 63
                cli();
 696:	f8 94       	cli
		*reg |= bit;
 698:	e8 81       	ld	r30, Y
 69a:	2e 2b       	or	r18, r30
 69c:	28 83       	st	Y, r18
		SREG = oldSREG;
 69e:	8f bf       	out	0x3f, r24	; 63
	}
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <__udivmodqi4>:
 6a6:	99 1b       	sub	r25, r25
 6a8:	79 e0       	ldi	r23, 0x09	; 9
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <__udivmodqi4_ep>

000006ac <__udivmodqi4_loop>:
 6ac:	99 1f       	adc	r25, r25
 6ae:	96 17       	cp	r25, r22
 6b0:	08 f0       	brcs	.+2      	; 0x6b4 <__udivmodqi4_ep>
 6b2:	96 1b       	sub	r25, r22

000006b4 <__udivmodqi4_ep>:
 6b4:	88 1f       	adc	r24, r24
 6b6:	7a 95       	dec	r23
 6b8:	c9 f7       	brne	.-14     	; 0x6ac <__udivmodqi4_loop>
 6ba:	80 95       	com	r24
 6bc:	08 95       	ret

000006be <__tablejump2__>:
 6be:	ee 0f       	add	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	05 90       	lpm	r0, Z+
 6c4:	f4 91       	lpm	r31, Z
 6c6:	e0 2d       	mov	r30, r0
 6c8:	09 94       	ijmp

000006ca <memcpy_P>:
 6ca:	fb 01       	movw	r30, r22
 6cc:	dc 01       	movw	r26, r24
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <memcpy_P+0xa>
 6d0:	05 90       	lpm	r0, Z+
 6d2:	0d 92       	st	X+, r0
 6d4:	41 50       	subi	r20, 0x01	; 1
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	d8 f7       	brcc	.-10     	; 0x6d0 <memcpy_P+0x6>
 6da:	08 95       	ret

000006dc <__do_global_dtors>:
 6dc:	11 e0       	ldi	r17, 0x01	; 1
 6de:	cc e0       	ldi	r28, 0x0C	; 12
 6e0:	d1 e0       	ldi	r29, 0x01	; 1
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <__do_global_dtors+0x10>
 6e4:	fe 01       	movw	r30, r28
 6e6:	0e 94 5f 03 	call	0x6be	; 0x6be <__tablejump2__>
 6ea:	21 96       	adiw	r28, 0x01	; 1
 6ec:	cd 30       	cpi	r28, 0x0D	; 13
 6ee:	d1 07       	cpc	r29, r17
 6f0:	c9 f7       	brne	.-14     	; 0x6e4 <__do_global_dtors+0x8>
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
