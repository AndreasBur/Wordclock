/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       AnimationWipe.cpp
 *      \brief      
 *
 *      \details    
 *                  
 *
******************************************************************************************************************************************************/
#define _ANIMATION_WIPE_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "AnimationWipe.h"


/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S 
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  Constructor of AnimationWipe
******************************************************************************************************************************************************/
/*! \brief          AnimationWipe Constructor
 *  \details        Instantiation of the AnimationWipe library
 *
 *  \return         -
******************************************************************************************************************************************************/
AnimationWipe::AnimationWipe()
{
    pDisplay = nullptr;
    pClock = nullptr;
    State = STATE_UNINIT;
    reset();
} /* AnimationWipe */


/******************************************************************************************************************************************************
  Destructor of AnimationWipe
******************************************************************************************************************************************************/
AnimationWipe::~AnimationWipe()
{

} /* ~AnimationWipe */


/******************************************************************************************************************************************************
  init()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationWipe::init(Display* Display, Clock* Clock)
{
    pDisplay = Display;
    pClock = Clock;
    wcTransformation.setDisplay(pDisplay);
    State = STATE_IDLE;
    reset();
} /* init */


/******************************************************************************************************************************************************
  setClock()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType AnimationWipe::setClock(byte Hour, byte Minute)
{
    stdReturnType ReturnValue{E_NOT_OK};

    if(pClock->getClockWords(Hour, Minute, ClockWordsTable) == E_OK && State == STATE_IDLE) {
        ReturnValue = E_OK;
        State = STATE_CLEAR_TIME;
    }
    return ReturnValue;
} /* setClock */


/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationWipe::task()
{
    if(State == STATE_CLEAR_TIME) { clearTimeTask(); }
    if(State == STATE_SET_TIME) { setTimeTask(); }
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  reset()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationWipe::reset()
{
    ColumnCounter = 0;
    ShiftCounter = 0;
} /* reset */


/******************************************************************************************************************************************************
  clearTimeTask()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationWipe::clearTimeTask()
{
    for(byte Column = 0; Column <= ColumnCounter; Column++) {
        wcTransformation.shiftColumnDownFast(Column);
    }
    if(ColumnCounter < DISPLAY_CHARACTERS_NUMBER_OF_COLUMNS) ColumnCounter++;
    if(ShiftCounter >= ANIMATION_WIRE_NUMBER_OF_SHIFT_CYCLES) {
        State = STATE_SET_TIME;
        reset();
    }
    ShiftCounter++;
} /* clearTimeTask */


/******************************************************************************************************************************************************
  setTimeTask()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationWipe::setTimeTask()
{
    for(byte Column = 0; Column <= ColumnCounter; Column++) {
        wcTransformation.shiftColumnDownFast(Column);
        if(isPixelPartOfClockWords(Column, ShiftCounter - Column)) pDisplay->setPixelFast(Column, 0);
    }
    if(ColumnCounter < DISPLAY_CHARACTERS_NUMBER_OF_COLUMNS) ColumnCounter++;
    if(ShiftCounter >= ANIMATION_WIRE_NUMBER_OF_SHIFT_CYCLES) State = STATE_IDLE;
    ShiftCounter++;
} /* setTimeTask */


/******************************************************************************************************************************************************
  isPixelPartOfWord()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
boolean AnimationWipe::isPixelPartOfClockWords(byte Column, byte Row)
{
    for(uint8_t WordIndex = 0; WordIndex < CLOCK_WORDS_TABLE_TYPE_SIZE; WordIndex++) {
        if(ClockWordsTable[WordIndex] == DisplayWords::WORD_NONE) { break; }
        DisplayWords::Word Word = Words.getDisplayWordFast(ClockWordsTable[WordIndex]);
        if(Word.Row == Row) {
            if(Column >= Word.Column && Column < Word.Column + Word.Length) { return true; }
        }
    }
    return false;
} /* isPixelPartOfWord */


/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
 