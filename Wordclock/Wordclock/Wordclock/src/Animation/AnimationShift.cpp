/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       AnimationShift.cpp
 *      \brief      
 *
 *      \details    
 *                  
 *
******************************************************************************************************************************************************/
#define _ANIMATION_SHIFT_SOURCE_

/******************************************************************************************************************************************************
 * I N C L U D E S
******************************************************************************************************************************************************/
#include "AnimationShift.h"


/******************************************************************************************************************************************************
 *  L O C A L   C O N S T A N T   M A C R O S 
******************************************************************************************************************************************************/


/******************************************************************************************************************************************************
 *  L O C A L   F U N C T I O N   M A C R O S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 *  L O C A L   D A T A   T Y P E S   A N D   S T R U C T U R E S
******************************************************************************************************************************************************/



/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  Constructor of AnimationShift
******************************************************************************************************************************************************/
/*! \brief          AnimationShift Constructor
 *  \details        Instantiation of the AnimationShift library
 *
 *  \return         -
******************************************************************************************************************************************************/
AnimationShift::AnimationShift()
{
    pDisplay = nullptr;
    pClock = nullptr;
    State = STATE_UNINIT;
    reset();
} /* AnimationShift */


/******************************************************************************************************************************************************
  Destructor of AnimationShift
******************************************************************************************************************************************************/
AnimationShift::~AnimationShift()
{

} /* ~AnimationShift */


/******************************************************************************************************************************************************
  init()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationShift::init(Display* Display, Clock* Clock)
{
    pDisplay = Display;
    pClock = Clock;
    State = STATE_IDLE;
    wcTransformation.setDisplay(Display);
    reset();
} /* init */


/******************************************************************************************************************************************************
  setClock()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
stdReturnType AnimationShift::setClock(byte Hour, byte Minute)
{
    stdReturnType ReturnValue{E_NOT_OK};

    if(pClock->getClockWords(Hour, Minute, ClockWordsTable) == E_OK && State == STATE_IDLE) {
        State = STATE_CLEAR_TIME;
    }
    return ReturnValue;
} /* setClock */


/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationShift::task()
{
    if(State == STATE_CLEAR_TIME) { clearTimeTask(); }
    if(State == STATE_SET_TIME) { setTimeTask(); }
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
******************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  reset()
******************************************************************************************************************************************************/
/*! \brief
 *  \details
 *
 *  \return         -
******************************************************************************************************************************************************/
void AnimationShift::reset()
{
#if (ANIMATION_SHIFT_HORIZONTAL == STD_ON)
    MaxWordColumn = 0;
    MinWordColumn = 0;
    CurrentColumn = 0;
#endif

#if (ANIMATION_SHIFT_VERTICAL == STD_ON)
    MaxWordRow = 0;
    MinWordRow = 0;
    CurrentRow = 0;
#endif
} /* reset */


/******************************************************************************************************************************************************
  clearTimeTask()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationShift::clearTimeTask()
{
#if (ANIMATION_SHIFT_HORIZONTAL == STD_ON)
    if(CurrentColumn < DISPLAY_NUMBER_OF_COLUMNS) { 
        wcTransformation.shiftRightFast();
        CurrentColumn++;
    } else {
        State = STATE_SET_TIME;
        reset();
    }
#endif

#if (ANIMATION_SHIFT_VERTICAL == STD_ON)
    if(CurrentRow < DISPLAY_NUMBER_OF_ROWS) wcTransformation.shiftDownFast();
    CurrentRow++;
#endif
    
} /* clearTimeTask */


/******************************************************************************************************************************************************
  setTimeTask()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *  \return         -
******************************************************************************************************************************************************/
void AnimationShift::setTimeTask()
{
#if (ANIMATION_SHIFT_HORIZONTAL == STD_ON)
    if(CurrentColumn < DISPLAY_NUMBER_OF_COLUMNS) {
        wcTransformation.shiftRightFast();
        for(byte Row = 0; Row < DISPLAY_NUMBER_OF_ROWS; Row++) {
            if(isPixelPartOfClockWords(ClockWordsTable, CurrentColumn, Row)) {
                pDisplay->setPixelFast(0, Row);
            }
        }
        CurrentColumn++;
    } else {
        State = STATE_IDLE;
    }
#endif
} /* setTimeTask */

/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
******************************************************************************************************************************************************/
 